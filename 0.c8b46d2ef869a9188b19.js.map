{"version":3,"sources":["webpack:///static/js/0.c8b46d2ef869a9188b19.js","webpack:///./src/components/LiveView.vue","webpack:///LiveView.vue","webpack:///./src/components/LiveView.vue?746b","webpack:///./src/components/LiveView.vue?2698","webpack:///./~/videojs-contrib-hls/dist/videojs-contrib-hls.js","webpack:///./src/components/LiveView.vue?eaa4"],"names":["webpackJsonp","107","module","exports","__webpack_require__","Component","121","__webpack_exports__","Object","defineProperty","value","name","mounted","this","setplayer","data","currentTab","dialog","videoplayerurl","playerOptions","beforeRouteEnter","to","from","next","vm","beforeRouteLeave","computed","videoObject","$store","state","liveobj","chaturl","loginedUser","username","Math","floor","random","methods","_this","$http","get","serverUrl","alt","then","response","slist","push","type","src","body","withCredentials","aspectRatio","sources","controlBar","timeDivider","durationDisplay","document","getElementById","style","top","offsetWidth","fetchData","alert","handleTabChange","val","goback","$router","go","134","i","version","names","mappings","file","sourcesContent","sourceRoot","147","content","locals","153","global","require","f","define","e","t","n","r","s","o","u","a","Error","code","l","call","length","1","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","done","err","Array","isArray","TypeError","_globalWindow","_globalWindow2","obj","__esModule","default","findAdCue","track","mediaTime","cues","cue","adStartTime","adEndTime","updateAdCues","media","offset","arguments","segments","segment","duration","endTime","VTTCue","cueOut","parseFloat","addCue","adOffset","adTotal","_segment$cueOutCont$split$map","cueOutCont","split","map","_segment$cueOutCont$split$map2","global/window","2","textRange","range","start","end","formatHexString","toString","substring","formatAsciiString","String","fromCharCode","createTransferableMessage","message","transferable","keys","forEach","key","ArrayBuffer","isView","bytes","buffer","byteOffset","byteLength","initSegmentId","initSegment","byterange","Infinity","resolvedUri","join","utils","hexDump","prototype","slice","result","hex","ascii","j","tagDump","tag","textRanges","ranges","3","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","4","_aesDecrypter","_binUtils","DecrypterWorker","self","onmessage","event","encrypted","Uint8Array","Uint32Array","iv","Decrypter","postMessage","source","decrypted","./bin-utils","aes-decrypter","5","_interopRequireDefault","_classCallCheck","instance","Constructor","_inherits","subClass","superClass","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","descriptor","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","getter","parent","getPrototypeOf","_playlistLoader","_playlistLoader2","_segmentLoader","_segmentLoader2","_vttSegmentLoader","_vttSegmentLoader2","_ranges","_ranges2","_videoJs","window","_videoJs2","_adCueTags","_adCueTags2","_syncController","_syncController2","_videojsContribMediaSourcesEs5CodecUtils","_webworkify","_webworkify2","_decrypterWorker","_decrypterWorker2","_config","_config2","_utilCodecsJs","Hls","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","objectChanged","b","prop","mapLegacyAvcCodecs_","codecString","replace","match","translateLegacyCodecs","makeMimeTypeString","container","codecs","filter","c","getContainerType","getCodecs","mediaAttributes","attributes","CODECS","parseCodecs","mimeTypesForPlaylist_","master","containerType","codecInfo","isMuxed","isMaat","mediaGroups","AUDIO","audioGroup","groupId","uri","log","warn","codecStrings","video","audio","justAudio","justVideo","bothVideoAudio","MasterPlaylistController","_videojs$EventTarget","options","url","mode","tech","bandwidth","externHls","useCueTags","blacklistDuration","enableLowInitialPlaylist","tech_","hls_","hls","mode_","useCueTags_","cueTagsTrack_","addTextTrack","inBandMetadataTrackDispatchType","requestOptions_","timeout","audioGroups_","subtitleGroups_","groups","tracks","closedCaptionGroups_","mediaSource","MediaSource","audioinfo_","on","handleAudioinfoUpdate_","bind","addEventListener","handleSourceOpen_","seekable_","createTimeRanges","hasPlayed_","syncController_","segmentMetadataTrack_","addRemoteTextTrack","kind","label","decrypter_","segmentLoaderSettings","currentTime","seekable","seeking","hasPlayed","goalBufferLength","syncController","decrypter","masterPlaylistLoader_","setupMasterPlaylistLoaderListeners_","audioPlaylistLoader_","subtitlePlaylistLoader_","mergeOptions","segmentMetadataTrack","loaderType","subtitleSegmentLoader_","setupSegmentLoaderListeners_","load","_this2","requestTimeout","targetDuration","isLowestEnabledRendition_","endList","preload","playlist","fillAudioTracks_","setupAudio","fillSubtitleTracks_","setupSubtitles","triggerPresenceUsage_","fillClosedCaptionTracks_","setupSourceBuffers_","endOfStream","setupFirstPlay","trigger","updatedPlaylist","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","paused","addSeekableRange","addSeekableRange_","onDurationchange","one","blacklistCurrentPlaylist","error","abort","pause","activeAudioGroup","activeTrack","enabled","mediaGroupChanged","bubbles","stuckAtPlaylistEnd_","defaultDemuxed","audioGroupKeys","mediaGroup","properties","SUBTITLES","Playlist","isAes","isFmp4","_this3","nextPlaylist","currentPlaylist","buffered","forwardBuffer","bufferLowWaterLine","BANDWIDTH","onSyncInfoUpdate_","onEndOfStream","handleSubtitleError_","supportsAudioInfoChange_","audioInfo_","info","enabledIndex","indexOf","enabledTrack","defaultTrack","properties_","splice","max","mediaSecondsLoaded","main","AudioTrack","id","audioTrackKind_","language","audioTrack","characteristics","forced","instreamId","videoPlaylist","trackName","activeSubtitleTrack_","getActiveAudioTrack_","stopAudioLoaders_","resyncAudioLoaders_","resetAudioLoaders_","dispose","resetEverything","setupAudioPlaylistLoader_","resyncLoader","_this4","audioPlaylist","playlists","_this5","subtitleGroup","activeSubtitleGroup_","subtitleProperties","subtitlePlaylist","resetLoader","ended","setCurrentTime","autoplay","play","isEndOfStream","ended_","expired","getExpiredTime","absolutePlaylistEnd","playlistEnd","TIME_FUDGE_FACTOR","bufferedEnd","isFinalRendition","isFinalRendition_","excludeUntil","Date","now","findRange","isFlash","supportsNativeMediaSources","mainSeekable","audioSeekable","_this6","oldDuration","newDuration","setDuration","removeEventListener","readyState","terminate","mimeTypes","mimeType","excludeIncompatibleVariants_","codecCount","variant","variantCodecs","isTypeSupported","initial","rate","min","EventTarget","./ad-cue-tags","./config","./decrypter-worker","./playlist-loader","./ranges","./segment-loader","./sync-controller","./util/codecs.js","./vtt-segment-loader","videojs-contrib-media-sources/es5/codec-utils","webworkify","6","REQUEST_ERRORS","FAILURE","TIMEOUT","ABORTED","byterangeStr","byterangeEnd","segmentXhrHeaders","headers","Range","abortAll","activeXhrs","xhr","getRequestStats","request","bytesReceived","roundTripTime","getProgressStats","progressEvent","requestTime","stats","loaded","handleErrors","timedout","status","aborted","handleKeyResponse","finishProcessingFn","errorObj","view","DataView","getUint32","handleInitSegmentResponse","handleSegmentResponse","encryptedBytes","decryptSegment","doneFn","decryptionHandler","requestId","getMostImportantError","errors","reduce","prev","waitForCompletion","count","endOfAllRequests","worstError","handleProgress","progressFn","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","keyRequestOptions","responseType","keyRequestCallback","keyXhr","initSegmentOptions","initSegmentRequestCallback","initSegmentXhr","segmentRequestOptions","segmentRequestCallback","segmentXhr","7","timerCancelEvents","PlaybackWatcher","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","debug","logger_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","off","clearTimeout","checkCurrentTime_","setTimeout","waiting_","outsideOfSeekableWindow_","seekableEnd","printableRange","currentRange","fellOutOfLiveWindow_","livePoint","nextRange","findNextRange","videoUnderflow_","difference","skipTheGap_","gap","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","findGaps","8","_resolveUrl","_resolveUrl2","_playlistJs","_m3u8Parser","_m3u8Parser2","updateSegments","original","update","updateMaster","changed","mediaSequence","PlaylistLoader","srcUrl","loader","mediaUpdateTimeout","playlistRequestError","haveMetadata","startingState","setBandwidth","responseText","parser","refreshDelay","Parser","manifest","media_","stopRequest","oldRequest","onreadystatechange","enabledPlaylists_","isEnabled","currentBandwidth","Number","MAX_VALUE","mediaChange","req","syncInfo","time","started","mediaType","groupKey","labelKey","mediaProperties","VIDEO","CLOSED-CAPTIONS","location","href","./playlist.js","./resolve-url","m3u8-parser","9","_playlist","_playlist2","safeGetComputedStyle","el","getComputedStyle","stableSort","array","sortFn","newArray","sort","left","right","cmp","comparePlaylistBandwidth","leftBandwidth","rightBandwidth","comparePlaylistResolution","leftWidth","rightWidth","RESOLUTION","width","simpleSelector","playerBandwidth","playerWidth","playerHeight","sortedPlaylistReps","height","rep","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","lastBandwidthSelector","systemBandwidth","parseInt","movingAverageBandwidthSelector","decay","average","minRebufferMaxBandwidthSelector","settings","segmentDuration","timeUntilRebuffer","currentTimeline","bandwidthPlaylists","hasAttribute","rebufferingEstimates","syncPoint","getSyncPoint","numRequests","rebufferingImpact","estimateSegmentRequestTime","noRebufferingPlaylists","estimate","lowestBitrateCompatibleVariantSelector","./playlist","10","UNSAFE_LIVE_SEGMENTS","backwardDuration","endSequence","precise","forwardDuration","intervalDuration","backward","forward","totalDuration","sumDurations","startIndex","endIndex","durations","_ref","useSafeLiveEnd","seekableStart","createTimeRange","isWholeNumber","num","roundSignificantDigit","increment","numDecimalDigits","scale","pow","temp","ceilLeastSignificantDigit","floorLeastSignificantDigit","getMediaInfoForTime","startTime","numSegments","mediaIndex","isBlacklisted","blacklisted","disabled","attr","NaN","11","clamp","_ref2","filterRanges","timeRanges","predicate","results","findSoleUncommonTimeRangesEnd","edges","overlapsCurrentEnd","span","some","bufferIntersection","bufferA","bufferB","arity","extents","calculateBufferedPercent","adjustedRange","referenceRange","referenceDuration","adjustedDuration","bufferMissingFromAdjusted","adjustedIntersection","referenceIntersection","adjustedOverlap","referenceOverlap","getSegmentBufferedPercent","startOfSegment","endOfSegment","originalSegmentRange","adjustedSegmentRange","percent","isNaN","strArr","playbackRate","12","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","currentSource_","initPlugin","player","lastCalled","seekTo","localOptions","ready","loadedMetadataHandler","setSource","sourceObj","errorHandler","cleanupEvents","reinitPlugin","newOptions","reloadSourceOnError","13","enableFunction","playlistUri","changePlaylistFn","enable","currentlyEnabled","Representation","hlsHandler","fastChangeFunction","masterPlaylistController_","fastQualityChange_","resolution","renditionSelectionMixin","representations","14","_urlToolkit","_urlToolkit2","resolveUrl","baseURL","relativeURL","test","buildAbsoluteURL","url-toolkit","15","_x4","_x5","_x6","_sourceUpdater","_sourceUpdater2","_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs","_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2","_mediaSegmentRequest","_playlistSelectors","detectEndOfStream","segmentIndex","appendedLastSegment","finite","isFinite","SegmentLoader","throughput","roundTrip","resetStats_","currentTime_","seeking_","duration_","mediaSource_","loaderType_","goalBufferLength_","checkBufferTimeout_","error_","currentTimeline_","pendingSegment_","mimeType_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","syncPoint_","fetchAtBuffer_","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","abort_","monitorBuffer_","abortRequests","_error","set","storedMap","playlist_","setDateTimeMapping","couldBeginLoading_","init_","newPlaylist","oldPlaylist","segmentInfo","mediaSequenceDiff","saveExpiredSegmentInfo","_mimeType","remove","monitorBufferTick_","fillBuffer_","updating","checkBuffer_","buffered_","timeline","timestampOffset","reset","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","segmentIndexArray","isSyncRequest","measuredBandwidth","requestTimeRemaining","switchCandidate","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","removeToTime","processSegmentResponse_","handleSegment_","probeSegmentInfo","initId","appendBuffer","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","Cue","WebKitDataCue","JSON","stringify","./media-segment-request","./playlist-selectors","./source-updater","videojs-contrib-media-sources/es5/remove-cues-from-track.js","16","noop","SourceUpdater","createSourceBuffer","sourceBuffer_","addSourceBuffer","onUpdateendCallback_","pendingCallback","pendingCallback_","runCallback_","callbacks_","timestampOffset_","processedAppend_","queueCallback_","callback","callbacks","shift","17","_muxJsLibMp4Probe","_muxJsLibMp4Probe2","_muxJsLibToolsTsInspectorJs","syncPointStrategies","run","datetimeToDisplayTime","dateTimeObject","getTime","lastDistance","distance","abs","discontinuityStarts","discontinuity","discontinuitySequence","discontinuitySync","discontinuities","SyncController","inspectCache_","timelines","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","timingInfo","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timescales","timescale","timeInfo","inspect","segmentStartTime","segmentEndTime","dts","dtsTime","mappingObj","mapping","accuracy","mediaIndexDiff","mux.js/lib/mp4/probe","mux.js/lib/tools/ts-inspector.js","18","parsed","exec","19","VTT_LINE_TERMINATORS","char","charCodeAt","uintToString","uintArray","apply","VTTSegmentLoader","_SegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","_track","skipEmptySegments_","timestampOffsetForTimeline","checkTimestampOffset","empty","WebVTT","_ret","loadHandler","v","requested","parseVTTCues_","updateTimeMapping_","decoder","decodeBytesToString","TextDecoder","StringDecoder","vttjs","timestampmap","MPEGTS","LOCAL","oncue","ontimestampmap","onparsingerror","mapData","parse","segmentData","flush","diff","firstStart","lastStart","20","xhrFactory","XhrFunction","beforeRequest","reqResponse","responseTime","statusCode","originalAbort","21","precompute","tables","encTable","decTable","sbox","sboxInv","x","xInv","d","th","x2","x4","x8","tEnc","tDec","aesTables","AES","_tables","tmp","encKey","decKey","keyLen","rcon","_key","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","b2","c2","nInnerRounds","kIndex","table","table0","table1","table2","table3","22","_stream","_stream2","AsyncStream","_Stream","jobs","delay","timeout_","processJob_","job","./stream","23","_aes","_aes2","_asyncStream","_asyncStream2","_pkcs7","ntoh","word","decrypt","initVector","encrypted32","Int32Array","decipher","decrypted32","init0","init1","init2","init3","wordIx","step","STEP","asyncStream_","decryptChunk_","subarray","unpad","./aes","./async-stream","pkcs7","24","_decrypter","./decrypter","25","Stream","listeners","listener","index","args","destination","26","PADDING","plaintext","padding","27","pad","./pad.js","./unpad.js","28","padded","29","30","doccy","topLevel","minDoc","min-document","31","win","32","_lineStream","_lineStream2","_parseStream","_parseStream2","_parser","_parser2","LineStream","ParseStream","./line-stream","./parse-stream","./parser","33","_possibleConstructorReturn","ReferenceError","nextNewline","34","attributeSeparator","RegExp","parseAttributes","attrs","line","text","tagType","title","number","playlistType","allowed","URI","BYTERANGE","_attributes$BYTERANGE","_attributes$BYTERANGE2","dateTimeString","IV","toLowerCase","35","_extends","assign","hasOwnProperty","lineStream","parseStream","pipe","uris","currentUri","currentMap","defaultMediaGroups","allowCache","entry","rendition","allow-cache","endlist","inf","METHOD","method","media-sequence","discontinuity-sequence","playlist-type","stream-inf","TYPE","NAME","mediaGroupType","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","CHARACTERISTICS","FORCED","program-date-time","targetduration","totalduration","cue-out","cue-out-cont","cue-in","cueIn","comment","chunk","36","37","AacStream","everything","timeStamp","init","setTimestamp","timestamp","parseId3TagSize","header","byteIndex","returnSize","parseAdtsSize","lowThree","middle","bytesLeft","packet","tempLength","frameSize","pts","../utils/stream.js","38","ADTS_SAMPLING_FREQUENCIES","parseSyncSafeInteger","percentEncode","parseIso88591","unescape","parseType","parseSampleRate","parseAacTimestamp","frameStart","frame","owner","size","39","AdtsStream","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","audioobjecttype","channelcount","samplerate","samplingfrequencyindex","samplesize","40","H264Stream","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","ExpGolomb","swapBuffer","100","110","122","244","44","83","86","118","128","138","139","trackId","currentPts","currentDts","discardEmulationPreventionBytes","readSequenceParameterSet","skipScalingList","nalByteStream","nalUnitType","escapedRBSP","config","expGolombDecoder","deltaScale","lastScale","nextScale","readExpGolomb","newLength","newData","emulationPreventionBytesPositions","sourceIndex","profileIdc","levelIdc","profileCompatibility","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","readUnsignedByte","skipUnsignedExpGolomb","readUnsignedExpGolomb","skipBits","readBoolean","skipExpGolomb","readBits","ceil","../utils/exp-golomb.js","41","highPrefix","lowPrefix","zeroFill","coneOfSilence","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","metaTable","part","concat","42","CoalesceStream","numberOfTracks","metadataStream","videoTags","audioTags","videoTrack","pendingCaptions","pendingMetadata","pendingTracks","processedTracks","output","frames","tags","flushSource","id3","caption","timelineStartPts","captions","captionStreams","metadata","timelineStartInfo","startPts","endPts","stream","cueTime","dispatchType","43","FlvTag","getFlvHeader","metadataLength","headBytes","head","setUint8","setUint32","METADATA_TAG","writeMetaDataDouble","finalize","./flv-tag.js","extraData","adHoc","bufferStartSize","prepareWrite","flv","minLength","position","widthBytes","heightBytes","videocodecidBytes","keyFrame","VIDEO_TAG","AUDIO_TAG","writeBytes","writeByte","byte","writeShort","short","setUint16","negIndex","pos","nalUnitSize","startNalUnit","endNalUnit","nalContainer","nalStart","nalLength","setFloat64","writeMetaDataBoolean","dtsDelta","len","frameTime","isAudioFrame","isVideoFrame","isMetaData","isKeyFrame","45","Transmuxer","./flv-header","./flv-tag","./transmuxer","46","TagList","list","metaDataTag","47","VideoSegmentStream","AudioSegmentStream","collectTimelineInfo","extraDataTag","m2ts","sps","pps","oldExtraData","adtsFrames","round","currentFrame","adtsFrame","lastMetaPts","h264Frame","nalUnits","finishFrame","newMetadata","metaTag","extraTag","currentNal","packetStream","elementaryStream","videoTimestampRolloverStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","h264Stream","videoSegmentStream","audioSegmentStream","captionStream","coalesceStream","MetadataStream","TransportPacketStream","TransportParseStream","ElementaryStream","TimestampRolloverStream","CaptionStream","resetCaptions","../codecs/adts.js","../codecs/h264","../m2ts/m2ts.js","./coalesce-stream.js","./tag-list.js","48","parseSei","payloadType","payloadSize","payload","parseUserData","sei","parseCaptionPackets","userData","ccData","packetDropper","captionPackets_","ccStreams_","Cea608Stream","cc","latestDts_","ignoreNextEqualDts_","elem","idx","presortIndex","dispatchCea608Packet","activeCea608Channel_","activeCea608Streams_","ccStream","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","ROWS","createDisplayBuffer","BOTTOM_ROW","field","dataChannel","field_","dataChannel_","name_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","topRow_","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","row_","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","trim","BASE_","EXT_","CONTROL_","OFFSET_","format","reverse","popOn","baseRow","rollUp","paintOn","../utils/stream","49","StreamTypes","m2tsStreamTypes","bytesInBuffer","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","sectionLength","tableEnd","programInfoLength","processPes_","pid","streamType","STREAM_TYPES","h264","adts","timedMetadata","parsePes","pes","ptsDtsFlags","packetLength","dataAlignmentIndicator","flushStream","forceFlush","fragment","packetData","packetFlushable","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","k","baseMediaDecodeTime","codec","PAT_PID","MP2T_PACKET_LENGTH","./caption-stream","./metadata-stream","./stream-types","./stream-types.js","./timestamp-rollover-stream","50","parseUtf8","decodeURIComponent","tagParsers","TXXX","description","WXXX","PRIV","privateData","tagSize","bufferSize","frameHeader","console","51","parsePid","parsePayloadUnitStartIndicator","parseAdaptionField","pusi","payloadOffset","parsePesType","parsePesTime","parseNalUnitType","videoPacketContainsKeyFrame","nalType","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","52","53","handleRollover","reference","direction","lastDTS","referenceDTS","type_","54","generator","./mp4-generator","55","box","dinf","esds","ftyp","mdat","mfhd","minf","moof","moov","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun","types","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","UINT32_MAX","avc1","avcC","btrt","dref","mp4a","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","vmhd","sequenceNumber","trackFragments","boxes","flags","samples","dependsOn","isDependedOn","videoSample","audioSample","sequenceParameterSets","pictureParameterSets","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","dataOffset","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","audioTrun","videoTrun","trunHeader","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","hasRedundancy","paddingValue","isNonSyncSample","degradationPriority","fileType","movie","56","findBox","path","subresults","trafs","baseTimes","baseTime","57","createDefaultSample","isLikelyAacData","collectDtsInfo","clearDtsInfo","calculateTrackBaseMediaDecodeTime","arrayEquals","sumFrameByteLengths","mp4","clock","AUDIO_PROPERTIES","VIDEO_PROPERTIES","currentObj","sum","earliestAllowedDts","audioAppendStartTs","videoBaseMediaDecodeTime","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","trimAdtsFramesByEarliestDts_","prefixWithSilence_","generateSampleTable_","concatenateFrameData_","baseMediaDecodeTimeTs","silentFrame","frameDuration","audioGapDuration","audioFillFrameCount","audioFillDuration","audioTsToVideoTs","ONE_SECOND_IN_TS","videoTsToAudioTs","minSegmentDts","minSegmentPts","minPTS","gopCache_","nalUnit","gopForFusion","gops","resetStream_","groupNalsIntoFrames_","groupFramesIntoGops_","getGopForFusion_","unshift","nalCount","extendFirstKeyFrame_","concatenateNalData_","gop","pop","dtsDistance","nearestGopObj","currentGop","currentGopObj","nearestDistance","baseDataOffset","h","nalsByteLength","numberOfNals","totalByteLength","maxSegmentPts","maxSegmentDts","timeSinceStartOfTimeline","remux","remuxTracks","pendingBoxes","pendingBytes","emittedTracks","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","aacStream","headOfPipeline","setupTsPipeline","setBaseMediaDecodeTime","isAac","../aac","../data/silence","../utils/clock","./mp4-generator.js","58","probe","ts","aac","parsePsi_","parseAudioPes_","pesType","endLoop","parseVideoPes_","firstKeyFrame","adjustTimestamp_","baseTimestamp","audioBaseTimestamp","ptsTime","videoBaseTimestamp","inspectAac_","audioCount","sampleRate","audioTimescale","inspectTs_","isAacData","../aac/probe.js","../m2ts/probe.js","../m2ts/stream-types.js","../m2ts/timestamp-rollover-stream.js","59","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","seconds","60","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBytes","bits","valu","skipLeadingZeros","leadingZeroCount","clz","61","62","root","URLToolkit","relativeURLQuery","relativeURLHash","relativeURLHashSplit","relativeURLQuerySplit","baseURLHashSplit","baseURLQuerySplit","baseURLDomainSplit","baseURLProtocol","baseURLProtocolDomain","baseURLPath","builtURL","buildAbsolutePath","basePath","relativePath","nUpLn","nEnd","sRelPath","sDir","sPath","nStart","substr","amd","63","deprecateOldCue","durationOfVideo","addTextTrackData","sourceHandler","captionArray","metadataArray","inbandTextTracks_","videoDuration","metadataTrack_","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","nextTime","64","removeExistingTrack","remoteTextTracks","removeRemoteTextTrack","cleanupTextTracks","65","isAudioCodec","isVideoCodec","parseContentType","parameters","parameter","pair","_name","orig","profile","avcLevel","66","_cleanupTextTracks","createTextTracksIfNecessary","sourceBuffer","player_","textTracks","getTrackById","./cleanup-text-tracks","67","flashConstants","TIME_BETWEEN_CHUNKS","BYTES_PER_CHUNK","68","_globalDocument","_globalDocument2","_flashSourceBuffer","_flashSourceBuffer2","_flashConstants","_flashConstants2","_codecUtils","FlashMediaSource","sourceBuffers","swfObj","swfId","parentNode","vjs_load","parsedType","vjs_endOfStream","vjs_getProperty","vjs_setProperty","./codec-utils","./flash-constants","./flash-source-buffer","global/document","69","_muxJsLibFlv","_muxJsLibFlv2","_removeCuesFromTrack","_removeCuesFromTrack2","_createTextTracksIfNecessary","_createTextTracksIfNecessary2","_addTextTrackData","_flashTransmuxerWorker","_flashTransmuxerWorker2","scheduleTick","func","generateRandomString","toDecimalPlaces","places","FlashSourceBuffer","encodedHeader","chunkSize_","buffer_","bufferSize_","basePtsOffset_","audioBufferEnd_","videoBufferEnd_","btoa","safePlayerId","flashEncodedHeaderName_","flashEncodedDataName_","vjs_appendChunkReady","transmuxer_","action","receiveBuffer_","vjs_discontinuity","onHlsReset","onHlsReset_","vjs_abort","flvBytes","convertTagsToData_","processBuffer_","chunkSize","binary","b64str","segmentByteLength","videoTargetPts","firstVideoTag","firstAudioTag","currentIndex","currentTag","filteredVideoTags","audioTargetPts","filteredAudioTags","getOrderedTags_","adjustedTime","vjs_adjustCurrentTime","./add-text-track-data","./create-text-tracks-if-necessary","./flash-transmuxer-worker","./remove-cues-from-track","mux.js/lib/flv","70","wireTransmuxerEvents","transmuxer","MessageHandlers","FlashTransmuxerWorker","messageHandlers","71","_virtualSourceBuffer","_virtualSourceBuffer2","HtmlMediaSource","nativeMediaSource_","activeSourceBuffers_","updateActiveSourceBuffers_","appendAudioInitSegment_","audioDisabled_","audioCodec_","disableCombined","disableAudioOnly","audioTracks","videoCodec_","onPlayerMediachange_","eventName","querySelector","url_","sourcebuffer","el_","createRealSourceBuffers_","./virtual-source-buffer","72","removeCuesFromTrack","removeCue","73","_muxJsLibMp4","_muxJsLibMp42","initArray","typedArray","appendStart","TransmuxerWorker","mux.js/lib/mp4","74","_flashMediaSource","_flashMediaSource2","_htmlMediaSource","_htmlMediaSource2","urlCount","defaults","mediaSources","open","msObjectURL","getTech","URL","createObjectURL","./flash-media-source","./html-media-source","75","_transmuxerWorker","_transmuxerWorker2","makeWrappedSourceBuffer","wrapper","realBuffer_","VirtualSourceBuffer","pendingBuffers_","bufferUpdating_","codecs_","data_","done_","videoBuffer_","audioBuffer_","appendWindowStart","videoBuffered","audioBuffered","processPendingSegments_","codecProperty","every","sortedSegments","segmentObj","concatAndAppendSegments_","destinationBuffer","tempBuffer","originalError","./transmuxer-worker","76","bundleFn","cache","fn","wkey","cacheKeys","wcache","skey","scache","webkitURL","mozURL","msURL","Worker","Blob","77","_xhr","_xhr2","_binUtils2","_videojsContribMediaSources","_masterPlaylistController","_renditionMixin","_renditionMixin2","_playbackWatcher","_playbackWatcher2","_reloadSourceOnError","_reloadSourceOnError2","_playlistSelectorsJs","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","handleHlsMediaChange","qualityLevels","playlistLoader","selectedIndex","selectedIndex_","handleHlsLoadedMetadata","addQualityLevel","canPlaySource","supportsNativeHls","createElement","isSupported","canItPlay","canPlayType","USER_AGENT","navigator","userAgent","browser","IS_FIREFOX","firefoxVersionMap","getComponent","HlsHandler","_Component","options_","playerId","_player","source_","ignoreNextSeekingEvent_","setOptions_","overrideNative","featuresNativeVideoTracks","featuresNativeAudioTracks","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","contains","pauseLoading","audioTrackChange_","textTrackChange_","option","_src","playbackWatcher_","players","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","clearTracks","addTrack","setupQualityLevels_","qualityLevels_","HlsSourceHandler","canHandleSource","srcObj","handleSource","IE_VERSION","mpegurlRE","flashTech","registerSourceHandler","use","registerComponent","m3u8","registerPlugin","plugin","./master-playlist-controller","./playback-watcher","./playlist-selectors.js","./reload-source-on-error","./rendition-mixin","./xhr","videojs-contrib-media-sources","161","render","_vm","_h","$createElement","_c","_self","staticClass","icon","click","$event","slot","_v","staticStyle","padding-top","ref","playsinline","bottom","primary","staticRenderFns"],"mappings":"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","file":"static/js/0.c8b46d2ef869a9188b19.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 107:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(147)\n\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(121),\n  /* template */\n  __webpack_require__(161),\n  /* scopeId */\n  \"data-v-4da5a97e\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 121:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n\n__webpack_require__(153);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'livevideo',\n\n  mounted: function mounted() {\n\n    this.setplayer();\n  },\n  data: function data() {\n    return {\n      currentTab: 'tab1',\n      dialog: false,\n      videoplayerurl: '',\n\n      playerOptions: null\n    };\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.setplayer();\n    });\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.playerOptions = null;\n    next(true);\n  },\n\n  computed: {\n    videoObject: function videoObject() {\n      return this.$store.state.liveobj;\n    },\n    chaturl: function chaturl() {\n      if (this.$store.state.loginedUser) {\n        return \"http://104.201.54.66:8000?role=user&username=\" + this.$store.state.loginedUser.username;\n      }\n\n      return \"http://104.201.54.66:8000?role=guest&username=游客\" + Math.floor(Math.random() * 100000);\n    }\n  },\n  methods: {\n    setplayer: function setplayer() {\n      var _this = this;\n\n      this.$http.get(this.$store.state.serverUrl + \"/live/?name=\" + this.videoObject.alt).then(function (response) {\n\n        var slist = [];\n        slist.push({ type: \"application/x-mpegURL\", src: response.body, withCredentials: false });\n\n        _this.playerOptions = {\n          aspectRatio: '16:9',\n          sources: slist,\n          controlBar: {\n            timeDivider: false,\n            durationDisplay: false\n          }\n        };\n\n        document.getElementById(\"chatview\").style.top = 66 + document.getElementById(\"player\").offsetWidth * 9 / 16 + \"px\";\n      }, function (response) {});\n    },\n    fetchData: function fetchData() {\n      alert('hello');\n    },\n    handleTabChange: function handleTabChange(val) {\n      this.currentTab = val;\n    },\n    goback: function goback() {\n      this.$router.go(-1);\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 134:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(98)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".flex[data-v-4da5a97e]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.desc-container[data-v-4da5a97e]{height:100%;overflow-y:scroll}img[data-v-4da5a97e]{width:100%}.fixed[data-v-4da5a97e]{position:fixed;top:0}\", \"\", {\"version\":3,\"sources\":[\"/Users/apple/mywebs/caitianxia/src/components/LiveView.vue\"],\"names\":[],\"mappings\":\"AACA,uBACC,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,4BAA6B,AAC7B,6BAA8B,AAC1B,0BAA2B,AACvB,sBAAuB,AAC/B,qBAAsB,AAClB,iBAAkB,AACtB,uBAAwB,AACpB,oBAAqB,AACjB,0BAA4B,CACpC,AACD,iCACC,YAAY,AACZ,iBAAmB,CACnB,AACD,qBACC,UAAY,CACZ,AACD,wBACC,eAAe,AACf,KAAO,CACP\",\"file\":\"LiveView.vue\",\"sourcesContent\":[\"\\n.flex[data-v-4da5a97e]{\\n display: -webkit-box;\\n display: -ms-flexbox;\\n display: flex;\\n -webkit-box-orient: vertical;\\n -webkit-box-direction: normal;\\n     -ms-flex-direction: column;\\n         flex-direction: column;\\n -ms-flex-wrap: nowrap;\\n     flex-wrap: nowrap;\\n -webkit-box-pack: start;\\n     -ms-flex-pack: start;\\n         justify-content: flex-start;\\n}\\n.desc-container[data-v-4da5a97e]{\\n height:100%;\\n overflow-y: scroll;\\n}\\nimg[data-v-4da5a97e] {\\n width: 100%;\\n}\\n.fixed[data-v-4da5a97e] {\\n position:fixed;\\n top: 0;\\n}\\n\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 147:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(134);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(99)(\"df3203aa\", content, true);\n\n/***/ }),\n\n/***/ 153:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/**\n * videojs-contrib-hls\n * @version 5.10.0\n * @copyright 2017 Brightcove, Inc\n * @license Apache-2.0\n */\n(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.videojsContribHls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file ad-cue-tags.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = undefined;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = undefined;\n        var adTotal = undefined;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$split$map = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$split$map2 = _slicedToArray(_segment$cueOutCont$split$map, 2);\n\n        adOffset = _segment$cueOutCont$split$map2[0];\n        adTotal = _segment$cueOutCont$split$map2[1];\n\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\nexports['default'] = {\n  updateAdCues: updateAdCues,\n  findAdCue: findAdCue\n};\nmodule.exports = exports['default'];\n},{\"global/window\":31}],2:[function(require,module,exports){\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar utils = {\n  hexDump: function hexDump(data) {\n    var bytes = Array.prototype.slice.call(data);\n    var step = 16;\n    var result = '';\n    var hex = undefined;\n    var ascii = undefined;\n\n    for (var j = 0; j < bytes.length / step; j++) {\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n      result += hex + ' ' + ascii + '\\n';\n    }\n    return result;\n  },\n  tagDump: function tagDump(tag) {\n    return utils.hexDump(tag.bytes);\n  },\n  textRanges: function textRanges(ranges) {\n    var result = '';\n    var i = undefined;\n\n    for (i = 0; i < ranges.length; i++) {\n      result += textRange(ranges, i) + ' ';\n    }\n    return result;\n  },\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId\n};\n\nexports['default'] = utils;\nmodule.exports = exports['default'];\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\nmodule.exports = exports[\"default\"];\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\n/**\n * Our web worker interface so that things can talk to aes-decrypter\n * that will be running in a web worker. the scope is passed to this by\n * webworkify.\n *\n * @param {Object} self\n *        the scope for the web worker\n */\nvar DecrypterWorker = function DecrypterWorker(self) {\n  self.onmessage = function (event) {\n    var data = event.data;\n    var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n    /* eslint-disable no-new, handle-callback-err */\n    new _aesDecrypter.Decrypter(encrypted, key, iv, function (err, bytes) {\n      _globalWindow2['default'].postMessage((0, _binUtils.createTransferableMessage)({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n};\n\nexports['default'] = function (self) {\n  return new DecrypterWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"./bin-utils\":2,\"aes-decrypter\":24,\"global/window\":31}],5:[function(require,module,exports){\n(function (global){\n/**\n * @file master-playlist-controller.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _vttSegmentLoader = require('./vtt-segment-loader');\n\nvar _vttSegmentLoader2 = _interopRequireDefault(_vttSegmentLoader);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _adCueTags = require('./ad-cue-tags');\n\nvar _adCueTags2 = _interopRequireDefault(_adCueTags);\n\nvar _syncController = require('./sync-controller');\n\nvar _syncController2 = _interopRequireDefault(_syncController);\n\nvar _videojsContribMediaSourcesEs5CodecUtils = require('videojs-contrib-media-sources/es5/codec-utils');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _decrypterWorker = require('./decrypter-worker');\n\nvar _decrypterWorker2 = _interopRequireDefault(_decrypterWorker);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = undefined;\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\n/**\n * determine if an object a is differnt from\n * and object b. both only having one dimensional\n * properties\n *\n * @param {Object} a object one\n * @param {Object} b object two\n * @return {Boolean} if the object has changed or not\n */\nvar objectChanged = function objectChanged(a, b) {\n  if (typeof a !== typeof b) {\n    return true;\n  }\n  // if we have a different number of elements\n  // something has changed\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return true;\n  }\n\n  for (var prop in a) {\n    if (a[prop] !== b[prop]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs_ = function mapLegacyAvcCodecs_(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return (0, _videojsContribMediaSourcesEs5CodecUtils.translateLegacyCodecs)([match])[0];\n  });\n};\n\nexports.mapLegacyAvcCodecs_ = mapLegacyAvcCodecs_;\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return (0, _utilCodecsJs.parseCodecs)(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist_ = function mimeTypesForPlaylist_(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        if (!audioGroup[groupId].uri) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    _videoJs2['default'].log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n    codecInfo.audioProfile = defaultCodecs.audioProfile;\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is ano video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\nexports.mimeTypesForPlaylist_ = mimeTypesForPlaylist_;\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\n\nvar MasterPlaylistController = (function (_videojs$EventTarget) {\n  _inherits(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    var _this = this;\n\n    _classCallCheck(this, MasterPlaylistController);\n\n    _get(Object.getPrototypeOf(MasterPlaylistController.prototype), 'constructor', this).call(this);\n\n    var url = options.url;\n    var withCredentials = options.withCredentials;\n    var mode = options.mode;\n    var tech = options.tech;\n    var bandwidth = options.bandwidth;\n    var externHls = options.externHls;\n    var useCueTags = options.useCueTags;\n    var blacklistDuration = options.blacklistDuration;\n    var enableLowInitialPlaylist = options.enableLowInitialPlaylist;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.hls_ = tech.hls;\n    this.mode_ = mode;\n    this.useCueTags_ = useCueTags;\n    this.blacklistDuration = blacklistDuration;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    this.requestOptions_ = {\n      withCredentials: this.withCredentials,\n      timeout: null\n    };\n\n    this.audioGroups_ = {};\n    this.subtitleGroups_ = { groups: {}, tracks: {} };\n    this.closedCaptionGroups_ = { groups: {}, tracks: {} };\n\n    this.mediaSource = new _videoJs2['default'].MediaSource({ mode: mode });\n    this.audioinfo_ = null;\n    this.mediaSource.on('audioinfo', this.handleAudioinfoUpdate_.bind(this));\n\n    // load the media source into the player\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_.bind(this));\n\n    this.seekable_ = _videoJs2['default'].createTimeRanges();\n    this.hasPlayed_ = function () {\n      return false;\n    };\n\n    this.syncController_ = new _syncController2['default'](options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    this.decrypter_ = (0, _webworkify2['default'])(_decrypterWorker2['default']);\n\n    var segmentLoaderSettings = {\n      hls: this.hls_,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: function seekable() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_\n    };\n\n    // setup playlist loaders\n    this.masterPlaylistLoader_ = new _playlistLoader2['default'](url, this.hls_, this.withCredentials);\n    this.setupMasterPlaylistLoaderListeners_();\n    this.audioPlaylistLoader_ = null;\n    this.subtitlePlaylistLoader_ = null;\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    this.mainSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    this.audioSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    this.subtitleSegmentLoader_ = new _vttSegmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    this.masterPlaylistLoader_.load();\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  _createClass(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        _this2.fillAudioTracks_();\n        _this2.setupAudio();\n\n        _this2.fillSubtitleTracks_();\n        _this2.setupSubtitles();\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n        _this2.fillClosedCaptionTracks_();\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          _videoJs2['default'].log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('audioupdate');\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          var selectedMedia = undefined;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n        }\n\n        if (!updatedPlaylist.endList) {\n          (function () {\n            var addSeekableRange = function addSeekableRange() {\n              var seekable = _this2.seekable();\n\n              if (seekable.length !== 0) {\n                _this2.mediaSource.addSeekableRange_(seekable.start(0), seekable.end(0));\n              }\n            };\n\n            if (_this2.duration() !== Infinity) {\n              (function () {\n                var onDurationchange = function onDurationchange() {\n                  if (_this2.duration() === Infinity) {\n                    addSeekableRange();\n                  } else {\n                    _this2.tech_.one('durationchange', onDurationchange);\n                  }\n                };\n\n                _this2.tech_.one('durationchange', onDurationchange);\n              })();\n            } else {\n              addSeekableRange();\n            }\n          })();\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n        var activeAudioGroup = undefined;\n        var activeTrack = undefined;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n        _this2.mainSegmentLoader_.load();\n\n        // if the audio group has changed, a new audio track has to be\n        // enabled\n        activeAudioGroup = _this2.activeAudioGroup();\n        activeTrack = activeAudioGroup.filter(function (track) {\n          return track.enabled;\n        })[0];\n        if (!activeTrack) {\n          _this2.mediaGroupChanged();\n          _this2.trigger('audioupdate');\n        }\n        _this2.setupSubtitles();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < _config2['default'].MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.audioSegmentLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered with the current alternate audio track' + '. Switching back to default.');\n        _this3.audioSegmentLoader_.abort();\n        _this3.audioPlaylistLoader_ = null;\n        _this3.setupAudio();\n      });\n\n      this.subtitleSegmentLoader_.on('error', this.handleSubtitleError_.bind(this));\n    }\n  }, {\n    key: 'handleAudioinfoUpdate_',\n    value: function handleAudioinfoUpdate_(event) {\n      if (Hls.supportsAudioInfoChange_() || !this.audioInfo_ || !objectChanged(this.audioInfo_, event.info)) {\n        this.audioInfo_ = event.info;\n        return;\n      }\n\n      var error = 'had different audio properties (channels, sample rate, etc.) ' + 'or changed in some other way.  This behavior is currently ' + 'unsupported in Firefox 48 and below due to an issue: \\n\\n' + 'https://bugzilla.mozilla.org/show_bug.cgi?id=1247138\\n\\n';\n\n      var enabledIndex = this.activeAudioGroup().map(function (track) {\n        return track.enabled;\n      }).indexOf(true);\n      var enabledTrack = this.activeAudioGroup()[enabledIndex];\n      var defaultTrack = this.activeAudioGroup().filter(function (track) {\n        return track.properties_ && track.properties_['default'];\n      })[0];\n\n      // they did not switch audiotracks\n      // blacklist the current playlist\n      if (!this.audioPlaylistLoader_) {\n        error = 'The rendition that we tried to switch to ' + error + 'Unfortunately that means we will have to blacklist ' + 'the current playlist and switch to another. Sorry!';\n        this.blacklistCurrentPlaylist();\n      } else {\n        error = 'The audio track \\'' + enabledTrack.label + '\\' that we tried to ' + ('switch to ' + error + ' Unfortunately this means we will have to ') + ('return you to the main track \\'' + defaultTrack.label + '\\'. Sorry!');\n        defaultTrack.enabled = true;\n        this.activeAudioGroup().splice(enabledIndex, 1);\n        this.trigger('audioupdate');\n      }\n\n      _videoJs2['default'].log.warn(error);\n      this.setupAudio();\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * fill our internal list of HlsAudioTracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillAudioTracks_',\n    value: function fillAudioTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      // force a default if we have none or we are not\n      // in html5 mode (the only mode to support more than one\n      // audio track)\n      if (!mediaGroups || !mediaGroups.AUDIO || Object.keys(mediaGroups.AUDIO).length === 0 || this.mode_ !== 'html5') {\n        // \"main\" audio group, track name \"default\"\n        mediaGroups.AUDIO = { main: { 'default': { 'default': true } } };\n      }\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        if (!this.audioGroups_[mediaGroup]) {\n          this.audioGroups_[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n          var track = new _videoJs2['default'].AudioTrack({\n            id: label,\n            kind: this.audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            label: label\n          });\n\n          track.properties_ = properties;\n          this.audioGroups_[mediaGroup].push(track);\n        }\n      }\n\n      // enable the default active track\n      (this.activeAudioGroup().filter(function (audioTrack) {\n        return audioTrack.properties_['default'];\n      })[0] || this.activeAudioGroup()[0]).enabled = true;\n    }\n\n    /**\n     * Convert the properties of an HLS track into an audioTrackKind.\n     *\n     * @private\n     */\n  }, {\n    key: 'audioTrackKind_',\n    value: function audioTrackKind_(properties) {\n      var kind = properties['default'] ? 'main' : 'alternative';\n\n      if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n        kind = 'main-desc';\n      }\n\n      return kind;\n    }\n\n    /**\n     * fill our internal list of Subtitle Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillSubtitleTracks_',\n    value: function fillSubtitleTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups.SUBTITLES) {\n        if (!this.subtitleGroups_.groups[mediaGroup]) {\n          this.subtitleGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.SUBTITLES[mediaGroup]) {\n          var properties = mediaGroups.SUBTITLES[mediaGroup][label];\n\n          if (!properties.forced) {\n            this.subtitleGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n            if (typeof this.subtitleGroups_.tracks[label] === 'undefined') {\n              var track = this.tech_.addRemoteTextTrack({\n                id: label,\n                kind: 'subtitles',\n                enabled: false,\n                language: properties.language,\n                label: label\n              }, false).track;\n\n              this.subtitleGroups_.tracks[label] = track;\n            }\n          }\n        }\n      }\n\n      // Do not enable a default subtitle track. Wait for user interaction instead.\n    }\n\n    /**\n     * fill our internal list of Captions Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillClosedCaptionTracks_',\n    value: function fillClosedCaptionTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups['CLOSED-CAPTIONS']) {\n        if (!this.closedCaptionGroups_.groups[mediaGroup]) {\n          this.closedCaptionGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups['CLOSED-CAPTIONS'][mediaGroup]) {\n          var properties = mediaGroups['CLOSED-CAPTIONS'][mediaGroup][label];\n\n          // We only support CEA608 captions for now, so ignore anything that\n          // doesn't use a CCx INSTREAM-ID\n          if (!properties.instreamId.match(/CC\\d/)) {\n            continue;\n          }\n\n          this.closedCaptionGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n          if (typeof this.closedCaptionGroups_.tracks[label] === 'undefined') {\n            var track = this.tech_.addRemoteTextTrack({\n              id: properties.instreamId,\n              kind: 'captions',\n              enabled: false,\n              language: properties.language,\n              label: label\n            }, false).track;\n\n            this.closedCaptionGroups_.tracks[label] = track;\n          }\n        }\n      }\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Returns the audio group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeAudioGroup',\n    value: function activeAudioGroup() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (videoPlaylist.attributes.AUDIO) {\n        result = this.audioGroups_[videoPlaylist.attributes.AUDIO];\n      }\n\n      return result || this.audioGroups_.main;\n    }\n\n    /**\n     * Returns the subtitle group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeSubtitleGroup_',\n    value: function activeSubtitleGroup_() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (!videoPlaylist) {\n        return null;\n      }\n\n      if (videoPlaylist.attributes.SUBTITLES) {\n        result = this.subtitleGroups_.groups[videoPlaylist.attributes.SUBTITLES];\n      }\n\n      return result || this.subtitleGroups_.groups.main;\n    }\n  }, {\n    key: 'activeSubtitleTrack_',\n    value: function activeSubtitleTrack_() {\n      for (var trackName in this.subtitleGroups_.tracks) {\n        if (this.subtitleGroups_.tracks[trackName].mode === 'showing') {\n          return this.subtitleGroups_.tracks[trackName];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: 'handleSubtitleError_',\n    value: function handleSubtitleError_() {\n      _videoJs2['default'].log.warn('Problem encountered loading the subtitle track' + '. Switching back to default.');\n\n      this.subtitleSegmentLoader_.abort();\n\n      var track = this.activeSubtitleTrack_();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      this.setupSubtitles();\n    }\n\n    /**\n     * Determine the correct audio renditions based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is only called when the media-group changes\n     * and performs non-destructive 'resync' of the SegmentLoader(s) since\n     * the playlist has likely changed\n     */\n  }, {\n    key: 'mediaGroupChanged',\n    value: function mediaGroupChanged() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resyncAudioLoaders_(track);\n    }\n\n    /**\n     * Determine the correct audio rendition based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default audio track and should be\n     * invoked again if the track is changed. Performs destructive 'reset'\n     * on the SegmentLoaders(s) to ensure we start loading audio as\n     * close to currentTime as possible\n     */\n  }, {\n    key: 'setupAudio',\n    value: function setupAudio() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resetAudioLoaders_(track);\n    }\n\n    /**\n     * Returns the currently active track or the default track if none\n     * are active\n     */\n  }, {\n    key: 'getActiveAudioTrack_',\n    value: function getActiveAudioTrack_() {\n      // determine whether seperate loaders are required for the audio\n      // rendition\n      var audioGroup = this.activeAudioGroup();\n      var track = audioGroup.filter(function (audioTrack) {\n        return audioTrack.enabled;\n      })[0];\n\n      if (!track) {\n        track = audioGroup.filter(function (audioTrack) {\n          return audioTrack.properties_['default'];\n        })[0] || audioGroup[0];\n        track.enabled = true;\n      }\n\n      return track;\n    }\n\n    /**\n     * Destroy the PlaylistLoader and pause the SegmentLoader specifically\n     * for audio when switching audio tracks\n     */\n  }, {\n    key: 'stopAudioLoaders_',\n    value: function stopAudioLoaders_() {\n      // stop playlist and segment loading for audio\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n        this.audioPlaylistLoader_ = null;\n      }\n      this.audioSegmentLoader_.pause();\n    }\n\n    /**\n     * Destructive reset of the mainSegmentLoader (when audio is muxed)\n     * or audioSegmentLoader (when audio is demuxed) to prepare them\n     * to start loading new data right at currentTime\n     */\n  }, {\n    key: 'resetAudioLoaders_',\n    value: function resetAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        this.mainSegmentLoader_.resetEverything();\n        return;\n      }\n\n      this.audioSegmentLoader_.resetEverything();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Non-destructive resync of the audioSegmentLoader (when audio\n     * is demuxed) to prepare to continue appending new audio data\n     * at the end of the current buffered region\n     */\n  }, {\n    key: 'resyncAudioLoaders_',\n    value: function resyncAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        return;\n      }\n\n      this.audioSegmentLoader_.resyncLoader();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Setup a new audioPlaylistLoader and start the audioSegmentLoader\n     * to begin loading demuxed audio\n     */\n  }, {\n    key: 'setupAudioPlaylistLoader_',\n    value: function setupAudioPlaylistLoader_(track) {\n      var _this4 = this;\n\n      // startup playlist and segment loaders for the enabled audio\n      // track\n      this.audioPlaylistLoader_ = new _playlistLoader2['default'](track.properties_.resolvedUri, this.hls_, this.withCredentials);\n      this.audioPlaylistLoader_.load();\n\n      this.audioPlaylistLoader_.on('loadedmetadata', function () {\n        var audioPlaylist = _this4.audioPlaylistLoader_.media();\n\n        _this4.audioSegmentLoader_.playlist(audioPlaylist, _this4.requestOptions_);\n\n        // if the video is already playing, or if this isn't a live video and preload\n        // permits, start downloading segments\n        if (!_this4.tech_.paused() || audioPlaylist.endList && _this4.tech_.preload() !== 'none') {\n          _this4.audioSegmentLoader_.load();\n        }\n\n        if (!audioPlaylist.endList) {\n          _this4.audioPlaylistLoader_.trigger('firstplay');\n        }\n      });\n\n      this.audioPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = undefined;\n\n        if (_this4.audioPlaylistLoader_) {\n          updatedPlaylist = _this4.audioPlaylistLoader_.media();\n        }\n\n        if (!updatedPlaylist) {\n          // only one playlist to select\n          _this4.audioPlaylistLoader_.media(_this4.audioPlaylistLoader_.playlists.master.playlists[0]);\n          return;\n        }\n\n        _this4.audioSegmentLoader_.playlist(updatedPlaylist, _this4.requestOptions_);\n      });\n\n      this.audioPlaylistLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered loading the alternate audio track' + '. Switching back to default.');\n        _this4.audioSegmentLoader_.abort();\n        _this4.setupAudio();\n      });\n    }\n\n    /**\n     * Determine the correct subtitle playlist based on the active\n     * SubtitleTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default subtitle track and should be\n     * invoked again if the track is changed.\n     */\n  }, {\n    key: 'setupSubtitles',\n    value: function setupSubtitles() {\n      var _this5 = this;\n\n      var subtitleGroup = this.activeSubtitleGroup_();\n      var track = this.activeSubtitleTrack_();\n\n      this.subtitleSegmentLoader_.pause();\n\n      if (!track) {\n        // stop playlist and segment loading for subtitles\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n          this.subtitlePlaylistLoader_ = null;\n        }\n        return;\n      }\n\n      var properties = subtitleGroup.filter(function (subtitleProperties) {\n        return subtitleProperties.id === track.id;\n      })[0];\n\n      // startup playlist and segment loaders for the enabled subtitle track\n      if (!this.subtitlePlaylistLoader_ ||\n      // if the media hasn't loaded yet, we don't have the URI to check, so it is\n      // easiest to simply recreate the playlist loader\n      !this.subtitlePlaylistLoader_.media() || this.subtitlePlaylistLoader_.media().resolvedUri !== properties.resolvedUri) {\n\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n        }\n\n        // reset the segment loader only when the subtitle playlist is changed instead of\n        // every time setupSubtitles is called since switching subtitle tracks fires\n        // multiple `change` events on the TextTrackList\n        this.subtitleSegmentLoader_.resetEverything();\n\n        // can't reuse playlistloader because we're only using single renditions and not a\n        // proper master\n        this.subtitlePlaylistLoader_ = new _playlistLoader2['default'](properties.resolvedUri, this.hls_, this.withCredentials);\n\n        this.subtitlePlaylistLoader_.on('loadedmetadata', function () {\n          var subtitlePlaylist = _this5.subtitlePlaylistLoader_.media();\n\n          _this5.subtitleSegmentLoader_.playlist(subtitlePlaylist, _this5.requestOptions_);\n          _this5.subtitleSegmentLoader_.track(_this5.activeSubtitleTrack_());\n\n          // if the video is already playing, or if this isn't a live video and preload\n          // permits, start downloading segments\n          if (!_this5.tech_.paused() || subtitlePlaylist.endList && _this5.tech_.preload() !== 'none') {\n            _this5.subtitleSegmentLoader_.load();\n          }\n        });\n\n        this.subtitlePlaylistLoader_.on('loadedplaylist', function () {\n          var updatedPlaylist = undefined;\n\n          if (_this5.subtitlePlaylistLoader_) {\n            updatedPlaylist = _this5.subtitlePlaylistLoader_.media();\n          }\n\n          if (!updatedPlaylist) {\n            return;\n          }\n\n          _this5.subtitleSegmentLoader_.playlist(updatedPlaylist, _this5.requestOptions_);\n        });\n\n        this.subtitlePlaylistLoader_.on('error', this.handleSubtitleError_.bind(this));\n      }\n\n      if (this.subtitlePlaylistLoader_.media() && this.subtitlePlaylistLoader_.media().resolvedUri === properties.resolvedUri) {\n        this.subtitleSegmentLoader_.load();\n      } else {\n        this.subtitlePlaylistLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method may perform destructive actions, like\n     * removing already buffered content, to readjust the currently\n     * active playlist quickly.\n     *\n     * @private\n     */\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Begin playback.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.tech_.setCurrentTime(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable.start(0)) {\n          return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var seekable = undefined;\n      var media = this.masterPlaylistLoader_.media();\n\n      // check that everything is ready to begin buffering in the live\n      // scenario\n      // 1) the active media playlist is available\n      if (media &&\n      // 2) the player is not paused\n      !this.tech_.paused() &&\n      // 3) the player has not started playing\n      !this.hasPlayed_()) {\n\n        // when the video is a live stream\n        if (!media.endList) {\n          this.trigger('firstplay');\n\n          // seek to the latest media position for live videos\n          seekable = this.seekable();\n          if (seekable.length) {\n            this.tech_.setCurrentTime(seekable.end(0));\n          }\n        }\n        this.hasPlayed_ = function () {\n          return true;\n        };\n        // now that we are ready, load the segment\n        this.load();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        _videoJs2['default'].log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        this.tech_.play();\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.audioPlaylistLoader_) {\n        // if the audio playlist loader exists, then alternate audio is active, so we need\n        // to wait for both the main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable = this.seekable();\n\n      if (!seekable.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and\n      // buffer has reached absolute end of playlist\n      return bufferedEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR && absolutePlaylistEnd - bufferedEnd <= _ranges2['default'].TIME_FUDGE_FACTOR;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist(error, blacklistDuration) {\n      if (error === undefined) error = {};\n\n      var currentPlaylist = undefined;\n      var nextPlaylist = undefined;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.isFinalRendition_();\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        _videoJs2['default'].log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + (blacklistDuration ? blacklistDuration : this.blacklistDuration) * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      _videoJs2['default'].log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = _ranges2['default'].findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks\n      var isFlash = this.mode_ === 'flash' || this.mode_ === 'auto' && !_videoJs2['default'].MediaSource.supportsNativeMediaSources();\n\n      // if the seek location is already buffered, continue buffering as\n      // usual\n      if (buffered && buffered.length && !isFlash) {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = undefined;\n      var audioSeekable = undefined;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.audioPlaylistLoader_) {\n        media = this.audioPlaylistLoader_.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = _videoJs2['default'].createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this6.mediaSource.duration = newDuration;\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitlePlaylistLoader_.dispose();\n      }\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = undefined;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist_(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n      this.mainSegmentLoader_.mimeType(mimeTypes[0]);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1]);\n      }\n\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var master = this.masterPlaylistLoader_.master;\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = undefined;\n\n      if (media.attributes.CODECS) {\n        codecs = (0, _utilCodecsJs.parseCodecs)(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n      master.playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          var codecString = variant.attributes.CODECS;\n\n          variantCodecs = (0, _utilCodecsJs.parseCodecs)(codecString);\n\n          if (window.MediaSource && window.MediaSource.isTypeSupported && !window.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs_(codecString) + '\"')) {\n            variant.excludeUntil = Infinity;\n          }\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable = this.seekable();\n\n      if (seekable.length) {\n        offset = seekable.start(0);\n      }\n\n      _adCueTags2['default'].updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].GOAL_BUFFER_LENGTH;\n      var rate = _config2['default'].GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].BUFFER_LOW_WATER_LINE;\n      var rate = _config2['default'].BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n\n  return MasterPlaylistController;\n})(_videoJs2['default'].EventTarget);\n\nexports.MasterPlaylistController = MasterPlaylistController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ad-cue-tags\":1,\"./config\":3,\"./decrypter-worker\":4,\"./playlist-loader\":8,\"./ranges\":11,\"./segment-loader\":15,\"./sync-controller\":17,\"./util/codecs.js\":18,\"./vtt-segment-loader\":19,\"videojs-contrib-media-sources/es5/codec-utils\":65,\"webworkify\":76}],6:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\nexports.REQUEST_ERRORS = REQUEST_ERRORS;\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = undefined;\n  var byterangeEnd = undefined;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr) {\n    xhr.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage((0, _binUtils.createTransferableMessage)({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = _videoJs2['default'].mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr, xhrOptions, decryptionWorker, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, finishProcessingFn);\n    var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, finishProcessingFn);\n  var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\nexports.mediaSegmentRequest = mediaSegmentRequest;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2}],7:[function(require,module,exports){\n(function (global){\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = (function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    _classCallCheck(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'playback-watcher ->');\n    }\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  _createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = _globalWindow2['default'].setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + 0.1 >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies (e.g. The Flash tech does not fire a `waiting` event when the end\n        // of the buffer is reached and has fallen off the live window). Calling\n        // `techWaiting_` here allows us to simulate responding to a native `waiting` event\n        // when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.outsideOfSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + _ranges2['default'].printableRange(seekable) + '. Seeking to ') + (seekableEnd + '.'));\n        this.tech_.setCurrentTime(seekableEnd);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = _ranges2['default'].findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.fellOutOfLiveWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'outsideOfSeekableWindow_',\n    value: function outsideOfSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n      if (currentTime < seekable.start(0) - 0.1 || currentTime > seekable.end(seekable.length - 1) + 0.1) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'fellOutOfLiveWindow_',\n    value: function fellOutOfLiveWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.tech_.setCurrentTime(nextRange.start(0) + _ranges2['default'].TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = _ranges2['default'].findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return PlaybackWatcher;\n})();\n\nexports['default'] = PlaybackWatcher;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ranges\":11,\"global/window\":31}],8:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _resolveUrl = require('./resolve-url');\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _playlistJs = require('./playlist.js');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n  var length = undefined;\n  var i = undefined;\n\n  offset = offset || 0;\n  length = Math.min(original.length, update.length + offset);\n\n  for (i = offset; i < length; i++) {\n    result[i - offset] = (0, _videoJs.mergeOptions)(original[i], result[i - offset]);\n  }\n  return result;\n};\n\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var changed = false;\n  var result = (0, _videoJs.mergeOptions)(master, {});\n  var i = master.playlists.length;\n  var playlist = undefined;\n  var segment = undefined;\n  var j = undefined;\n\n  while (i--) {\n    playlist = result.playlists[i];\n    if (playlist.uri === media.uri) {\n      // consider the playlist unchanged if the number of segments\n      // are equal and the media sequence number is unchanged\n      if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n        continue;\n      }\n\n      result.playlists[i] = (0, _videoJs.mergeOptions)(playlist, media);\n      result.playlists[media.uri] = result.playlists[i];\n\n      // if the update could overlap existing segment information,\n      // merge the two lists\n      if (playlist.segments) {\n        result.playlists[i].segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n      }\n      // resolve any missing segment and key URIs\n      j = 0;\n      if (result.playlists[i].segments) {\n        j = result.playlists[i].segments.length;\n      }\n      while (j--) {\n        segment = result.playlists[i].segments[j];\n        if (!segment.resolvedUri) {\n          segment.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.uri);\n        }\n        if (segment.key && !segment.key.resolvedUri) {\n          segment.key.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.key.uri);\n        }\n        if (segment.map && !segment.map.resolvedUri) {\n          segment.map.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.map.uri);\n        }\n      }\n      changed = true;\n    }\n  }\n  return changed ? result : null;\n};\n\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\nvar PlaylistLoader = function PlaylistLoader(srcUrl, hls, withCredentials) {\n  var _this = this;\n\n  /* eslint-disable consistent-this */\n  var loader = this;\n  /* eslint-enable consistent-this */\n  var mediaUpdateTimeout = undefined;\n  var request = undefined;\n  var playlistRequestError = undefined;\n  var haveMetadata = undefined;\n\n  PlaylistLoader.prototype.constructor.call(this);\n\n  this.hls_ = hls;\n\n  if (!srcUrl) {\n    throw new Error('A non-empty playlist URL is required');\n  }\n\n  playlistRequestError = function (xhr, url, startingState) {\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    if (startingState) {\n      loader.state = startingState;\n    }\n\n    loader.error = {\n      playlist: loader.master.playlists[url],\n      status: xhr.status,\n      message: 'HLS playlist request error at URL: ' + url,\n      responseText: xhr.responseText,\n      code: xhr.status >= 500 ? 4 : 2\n    };\n\n    loader.trigger('error');\n  };\n\n  // update the playlist loader's state in response to a new or\n  // updated playlist.\n  haveMetadata = function (xhr, url) {\n    var parser = undefined;\n    var refreshDelay = undefined;\n    var update = undefined;\n\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    loader.state = 'HAVE_METADATA';\n\n    parser = new _m3u8Parser2['default'].Parser();\n    parser.push(xhr.responseText);\n    parser.end();\n    parser.manifest.uri = url;\n    // m3u8-parser does not attach an attributes property to media playlists so make\n    // sure that the property is attached to avoid undefined reference errors\n    parser.manifest.attributes = parser.manifest.attributes || {};\n\n    // merge this playlist into the master\n    update = updateMaster(loader.master, parser.manifest);\n    refreshDelay = (parser.manifest.targetDuration || 10) * 1000;\n    loader.targetDuration = parser.manifest.targetDuration;\n    if (update) {\n      loader.master = update;\n      loader.media_ = loader.master.playlists[parser.manifest.uri];\n    } else {\n      // if the playlist is unchanged since the last reload,\n      // try again after half the target duration\n      refreshDelay /= 2;\n      loader.trigger('playlistunchanged');\n    }\n\n    // refresh live playlists after a target duration passes\n    if (!loader.media().endList) {\n      _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(function () {\n        loader.trigger('mediaupdatetimeout');\n      }, refreshDelay);\n    }\n\n    loader.trigger('loadedplaylist');\n  };\n\n  // initialize the loader state\n  loader.state = 'HAVE_NOTHING';\n\n  /**\n   * Abort any outstanding work and clean up.\n   */\n  loader.dispose = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    loader.off();\n  };\n\n  loader.stopRequest = function () {\n    if (request) {\n      var oldRequest = request;\n\n      request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  };\n\n  /**\n   * Returns the number of enabled playlists on the master playlist object\n   *\n   * @return {Number} number of eneabled playlists\n   */\n  loader.enabledPlaylists_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length;\n  };\n\n  /**\n   * Returns whether the current playlist is the lowest rendition\n   *\n   * @return {Boolean} true if on lowest rendition\n   */\n  loader.isLowestEnabledRendition_ = function () {\n    if (loader.master.playlists.length === 1) {\n      return true;\n    }\n\n    var media = loader.media();\n\n    var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n    return loader.master.playlists.filter(function (playlist) {\n      var enabled = (0, _playlistJs.isEnabled)(playlist);\n\n      if (!enabled) {\n        return false;\n      }\n\n      return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n    }).length === 0;\n  };\n\n  /**\n   * Returns whether the current playlist is the final available rendition\n   *\n   * @return {Boolean} true if on final rendition\n   */\n  loader.isFinalRendition_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length === 1;\n  };\n\n  /**\n   * When called without any arguments, returns the currently\n   * active media playlist. When called with a single argument,\n   * triggers the playlist loader to asynchronously switch to the\n   * specified media playlist. Calling this method while the\n   * loader is in the HAVE_NOTHING causes an error to be emitted\n   * but otherwise has no effect.\n   *\n   * @param {Object=} playlist the parsed media playlist\n   * object to switch to\n   * @return {Playlist} the current loaded media\n   */\n  loader.media = function (playlist) {\n    var startingState = loader.state;\n    var mediaChange = undefined;\n\n    // getter\n    if (!playlist) {\n      return loader.media_;\n    }\n\n    // setter\n    if (loader.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + loader.state);\n    }\n\n    // find the playlist object if the target playlist has been\n    // specified by URI\n    if (typeof playlist === 'string') {\n      if (!loader.master.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = loader.master.playlists[playlist];\n    }\n\n    mediaChange = !loader.media_ || playlist.uri !== loader.media_.uri;\n\n    // switch to fully loaded playlists immediately\n    if (loader.master.playlists[playlist.uri].endList) {\n      // abort outstanding playlist requests\n      if (request) {\n        request.onreadystatechange = null;\n        request.abort();\n        request = null;\n      }\n      loader.state = 'HAVE_METADATA';\n      loader.media_ = playlist;\n\n      // trigger media change if the active media has been updated\n      if (mediaChange) {\n        loader.trigger('mediachanging');\n        loader.trigger('mediachange');\n      }\n      return;\n    }\n\n    // switching to the active playlist is a no-op\n    if (!mediaChange) {\n      return;\n    }\n\n    loader.state = 'SWITCHING_MEDIA';\n\n    // there is already an outstanding playlist request\n    if (request) {\n      if ((0, _resolveUrl2['default'])(loader.master.uri, playlist.uri) === request.url) {\n        // requesting to switch to the same playlist multiple times\n        // has no effect after the first\n        return;\n      }\n      request.onreadystatechange = null;\n      request.abort();\n      request = null;\n    }\n\n    // request the new playlist\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, playlist.uri, startingState);\n      }\n\n      haveMetadata(req, playlist.uri);\n\n      // fire loadedmetadata the first time a media playlist is loaded\n      if (startingState === 'HAVE_MASTER') {\n        loader.trigger('loadedmetadata');\n      } else {\n        loader.trigger('mediachange');\n      }\n    });\n  };\n\n  /**\n   * set the bandwidth on an xhr to the bandwidth on the playlist\n   */\n  loader.setBandwidth = function (xhr) {\n    loader.bandwidth = xhr.bandwidth;\n  };\n\n  // live playlist staleness timeout\n  loader.on('mediaupdatetimeout', function () {\n    if (loader.state !== 'HAVE_METADATA') {\n      // only refresh the media playlist if no other activity is going on\n      return;\n    }\n\n    loader.state = 'HAVE_CURRENT_METADATA';\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, loader.media().uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, loader.media().uri, 'HAVE_METADATA');\n      }\n      haveMetadata(request, loader.media().uri);\n    });\n  });\n\n  // setup initial sync info\n  loader.on('firstplay', function () {\n    var playlist = loader.media();\n\n    if (playlist) {\n      playlist.syncInfo = {\n        mediaSequence: playlist.mediaSequence,\n        time: 0\n      };\n    }\n  });\n\n  /**\n   * pause loading of the playlist\n   */\n  loader.pause = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    if (loader.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      loader.started = false;\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.load = function (isFinalRendition) {\n    var media = loader.media();\n\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n\n    if (isFinalRendition) {\n      var refreshDelay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(loader.load.bind(null, false), refreshDelay);\n      return;\n    }\n\n    if (!loader.started) {\n      loader.start();\n      return;\n    }\n\n    if (media && !media.endList) {\n      loader.trigger('mediaupdatetimeout');\n    } else {\n      loader.trigger('loadedplaylist');\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.start = function () {\n    loader.started = true;\n\n    // request the specified URL\n    request = _this.hls_.xhr({\n      uri: srcUrl,\n      withCredentials: withCredentials\n    }, function (error, req) {\n      var parser = undefined;\n      var playlist = undefined;\n      var i = undefined;\n\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      // clear the loader's request reference\n      request = null;\n\n      if (error) {\n        loader.error = {\n          status: req.status,\n          message: 'HLS playlist request error at URL: ' + srcUrl,\n          responseText: req.responseText,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        };\n        if (loader.state === 'HAVE_NOTHING') {\n          loader.started = false;\n        }\n        return loader.trigger('error');\n      }\n\n      parser = new _m3u8Parser2['default'].Parser();\n      parser.push(req.responseText);\n      parser.end();\n\n      loader.state = 'HAVE_MASTER';\n\n      parser.manifest.uri = srcUrl;\n\n      // loaded a master playlist\n      if (parser.manifest.playlists) {\n        loader.master = parser.manifest;\n\n        // setup by-URI lookups and resolve media playlist URIs\n        i = loader.master.playlists.length;\n        while (i--) {\n          playlist = loader.master.playlists[i];\n          loader.master.playlists[playlist.uri] = playlist;\n          playlist.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri);\n\n          if (!playlist.attributes) {\n            // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n            // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n            // formatted master playlist may not have an attribute list. An attributes\n            // property is added here to prevent undefined references when we encounter\n            // this scenario.\n            playlist.attributes = {};\n\n            _videoJs.log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n          }\n        }\n\n        // resolve any media group URIs\n        ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n          for (var groupKey in loader.master.mediaGroups[mediaType]) {\n            for (var labelKey in loader.master.mediaGroups[mediaType][groupKey]) {\n              var mediaProperties = loader.master.mediaGroups[mediaType][groupKey][labelKey];\n\n              if (mediaProperties.uri) {\n                mediaProperties.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, mediaProperties.uri);\n              }\n            }\n          }\n        });\n\n        loader.trigger('loadedplaylist');\n        if (!request) {\n          // no media playlist was specifically selected so start\n          // from the first listed one\n          loader.media(parser.manifest.playlists[0]);\n        }\n        return;\n      }\n\n      // loaded a media playlist\n      // infer a master playlist if none was previously requested\n      loader.master = {\n        mediaGroups: {\n          'AUDIO': {},\n          'VIDEO': {},\n          'CLOSED-CAPTIONS': {},\n          'SUBTITLES': {}\n        },\n        uri: _globalWindow2['default'].location.href,\n        playlists: [{\n          uri: srcUrl\n        }]\n      };\n      loader.master.playlists[srcUrl] = loader.master.playlists[0];\n      loader.master.playlists[0].resolvedUri = srcUrl;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      loader.master.playlists[0].attributes = loader.master.playlists[0].attributes || {};\n      haveMetadata(req, srcUrl);\n      return loader.trigger('loadedmetadata');\n    });\n  };\n};\n\nPlaylistLoader.prototype = new _videoJs.EventTarget();\n\nexports['default'] = PlaylistLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist.js\":10,\"./resolve-url\":14,\"global/window\":31,\"m3u8-parser\":32}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = undefined;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = undefined;\n  var rightBandwidth = undefined;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\nexports.comparePlaylistBandwidth = comparePlaylistBandwidth;\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = undefined;\n  var rightWidth = undefined;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\nexports.comparePlaylistResolution = comparePlaylistResolution;\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = undefined;\n    var height = undefined;\n    var bandwidth = undefined;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return _playlist2['default'].isEnabled(rep.playlist);\n  });\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * _config2['default'].BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = undefined;\n  var resolutionPlusOneSmallest = undefined;\n  var resolutionPlusOneRep = undefined;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  return (resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || sortedPlaylistReps[0]).playlist;\n};\n\nexports.simpleSelector = simpleSelector;\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\nexports.lastBandwidthSelector = lastBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @param {Number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\nvar movingAverageBandwidthSelector = function movingAverageBandwidthSelector(decay) {\n  var average = -1;\n\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n\n  return function () {\n    if (average < 0) {\n      average = this.systemBandwidth;\n    }\n\n    average = decay * this.systemBandwidth + (1 - decay) * average;\n    return simpleSelector(this.playlists.master, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n  };\n};\n\nexports.movingAverageBandwidthSelector = movingAverageBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master;\n  var currentTime = settings.currentTime;\n  var bandwidth = settings.bandwidth;\n  var duration = settings.duration;\n  var segmentDuration = settings.segmentDuration;\n  var timeUntilRebuffer = settings.timeUntilRebuffer;\n  var currentTimeline = settings.currentTimeline;\n  var syncController = settings.syncController;\n\n  var bandwidthPlaylists = master.playlists.filter(function (playlist) {\n    return _playlist2['default'].isEnabled(playlist) && _playlist2['default'].hasAttribute('BANDWIDTH', playlist);\n  });\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\nexports.minRebufferMaxBandwidthSelector = minRebufferMaxBandwidthSelector;\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(_playlist2['default'].isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return (0, _utilCodecsJs.parseCodecs)(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\nexports.lowestBitrateCompatibleVariantSelector = lowestBitrateCompatibleVariantSelector;\n},{\"./config\":3,\"./playlist\":10,\"./util/codecs.js\":18}],10:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar Playlist = {\n  /**\n   * The number of segments that are unsafe to start playback at in\n   * a live stream. Changing this value can cause playback stalls.\n   * See HTTP Live Streaming, \"Playing the Media Playlist File\"\n   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-18#section-6.3.3\n   */\n  UNSAFE_LIVE_SEGMENTS: 3\n};\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = undefined;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = undefined;\n  var forward = undefined;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return _globalWindow2['default'].Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\nexports.duration = duration;\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var i = startIndex; i < endIndex; i++) {\n    durations += playlist.segments[i].duration;\n  }\n\n  return durations;\n};\n\nexports.sumDurations = sumDurations;\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? Math.max(0, playlist.segments.length - Playlist.UNSAFE_LIVE_SEGMENTS) : Math.max(0, playlist.segments.length);\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\nexports.playlistEnd = playlistEnd;\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return (0, _videoJs.createTimeRange)();\n  }\n  return (0, _videoJs.createTimeRange)(seekableStart, seekableEnd);\n};\n\nexports.seekable = seekable;\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = undefined;\n  var segment = undefined;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\nexports.getMediaInfoForTime = getMediaInfoForTime;\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\nexports.isBlacklisted = isBlacklisted;\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\nexports.isEnabled = isEnabled;\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isAes = isAes;\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isFmp4 = isFmp4;\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\nexports.hasAttribute = hasAttribute;\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\nexports.estimateSegmentRequestTime = estimateSegmentRequestTime;\nPlaylist.duration = duration;\nPlaylist.seekable = seekable;\nPlaylist.getMediaInfoForTime = getMediaInfoForTime;\nPlaylist.isEnabled = isEnabled;\nPlaylist.isBlacklisted = isBlacklisted;\nPlaylist.playlistEnd = playlistEnd;\nPlaylist.isAes = isAes;\nPlaylist.isFmp4 = isFmp4;\nPlaylist.hasAttribute = hasAttribute;\nPlaylist.estimateSegmentRequestTime = estimateSegmentRequestTime;\n\n// exports\nexports['default'] = Playlist;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],11:[function(require,module,exports){\n(function (global){\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n\n/**\n * Clamps a value to within a range\n * @param {Number} num - the value to clamp\n * @param {Number} start - the start of the range to clamp within, inclusive\n * @param {Number} end - the end of the range to clamp within, inclusive\n * @return {Number}\n */\nvar clamp = function clamp(num, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var start = _ref2[0];\n  var end = _ref2[1];\n\n  return Math.min(Math.max(start, num), end);\n};\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = undefined;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return _videoJs2['default'].createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Search for a likely end time for the segment that was just appened\n * based on the state of the `buffered` property before and after the\n * append. If we fin only one such uncommon end-point return it.\n * @param {TimeRanges} original - the buffered time ranges before the update\n * @param {TimeRanges} update - the buffered time ranges after the update\n * @returns {Number|null} the end time added between `original` and `update`,\n * or null if one cannot be unambiguously determined.\n */\nvar findSoleUncommonTimeRangesEnd = function findSoleUncommonTimeRangesEnd(original, update) {\n  var i = undefined;\n  var start = undefined;\n  var end = undefined;\n  var result = [];\n  var edges = [];\n\n  // In order to qualify as a possible candidate, the end point must:\n  //  1) Not have already existed in the `original` ranges\n  //  2) Not result from the shrinking of a range that already existed\n  //     in the `original` ranges\n  //  3) Not be contained inside of a range that existed in `original`\n  var overlapsCurrentEnd = function overlapsCurrentEnd(span) {\n    return span[0] <= end && span[1] >= end;\n  };\n\n  if (original) {\n    // Save all the edges in the `original` TimeRanges object\n    for (i = 0; i < original.length; i++) {\n      start = original.start(i);\n      end = original.end(i);\n\n      edges.push([start, end]);\n    }\n  }\n\n  if (update) {\n    // Save any end-points in `update` that are not in the `original`\n    // TimeRanges object\n    for (i = 0; i < update.length; i++) {\n      start = update.start(i);\n      end = update.end(i);\n\n      if (edges.some(overlapsCurrentEnd)) {\n        continue;\n      }\n\n      // at this point it must be a unique non-shrinking end edge\n      result.push(end);\n    }\n  }\n\n  // we err on the side of caution and return null if didn't find\n  // exactly *one* differing end edge in the search above\n  if (result.length !== 1) {\n    return null;\n  }\n\n  return result[0];\n};\n\n/**\n * Calculate the intersection of two TimeRanges\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @returns {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\nvar bufferIntersection = function bufferIntersection(bufferA, bufferB) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return _videoJs2['default'].createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var count = bufferA.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: bufferA.start(count), type: 'start' });\n    extents.push({ time: bufferA.end(count), type: 'end' });\n  }\n  count = bufferB.length;\n  while (count--) {\n    extents.push({ time: bufferB.start(count), type: 'start' });\n    extents.push({ time: bufferB.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Calculates the percentage of `segmentRange` that overlaps the\n * `buffered` time ranges.\n * @param {TimeRanges} segmentRange - the time range that the segment\n * covers adjusted according to currentTime\n * @param {TimeRanges} referenceRange - the original time range that the\n * segment covers\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the currently buffered time ranges\n * @returns {Number} percent of the segment currently buffered\n */\nvar calculateBufferedPercent = function calculateBufferedPercent(adjustedRange, referenceRange, currentTime, buffered) {\n  var referenceDuration = referenceRange.end(0) - referenceRange.start(0);\n  var adjustedDuration = adjustedRange.end(0) - adjustedRange.start(0);\n  var bufferMissingFromAdjusted = referenceDuration - adjustedDuration;\n  var adjustedIntersection = bufferIntersection(adjustedRange, buffered);\n  var referenceIntersection = bufferIntersection(referenceRange, buffered);\n  var adjustedOverlap = 0;\n  var referenceOverlap = 0;\n\n  var count = adjustedIntersection.length;\n\n  while (count--) {\n    adjustedOverlap += adjustedIntersection.end(count) - adjustedIntersection.start(count);\n\n    // If the current overlap segment starts at currentTime, then increase the\n    // overlap duration so that it actually starts at the beginning of referenceRange\n    // by including the difference between the two Range's durations\n    // This is a work around for the way Flash has no buffer before currentTime\n    if (adjustedIntersection.start(count) === currentTime) {\n      adjustedOverlap += bufferMissingFromAdjusted;\n    }\n  }\n\n  count = referenceIntersection.length;\n\n  while (count--) {\n    referenceOverlap += referenceIntersection.end(count) - referenceIntersection.start(count);\n  }\n\n  // Use whichever value is larger for the percentage-buffered since that value\n  // is likely more accurate because the only way\n  return Math.max(adjustedOverlap, referenceOverlap) / referenceDuration * 100;\n};\n\n/**\n * Return the amount of a range specified by the startOfSegment and segmentDuration\n * overlaps the current buffered content.\n *\n * @param {Number} startOfSegment - the time where the segment begins\n * @param {Number} segmentDuration - the duration of the segment in seconds\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the state of the buffer\n * @returns {Number} percentage of the segment's time range that is\n * already in `buffered`\n */\nvar getSegmentBufferedPercent = function getSegmentBufferedPercent(startOfSegment, segmentDuration, currentTime, buffered) {\n  var endOfSegment = startOfSegment + segmentDuration;\n\n  // The entire time range of the segment\n  var originalSegmentRange = _videoJs2['default'].createTimeRanges([[startOfSegment, endOfSegment]]);\n\n  // The adjusted segment time range that is setup such that it starts\n  // no earlier than currentTime\n  // Flash has no notion of a back-buffer so adjustedSegmentRange adjusts\n  // for that and the function will still return 100% if a only half of a\n  // segment is actually in the buffer as long as the currentTime is also\n  // half-way through the segment\n  var adjustedSegmentRange = _videoJs2['default'].createTimeRanges([[clamp(startOfSegment, [currentTime, endOfSegment]), endOfSegment]]);\n\n  // This condition happens when the currentTime is beyond the segment's\n  // end time\n  if (adjustedSegmentRange.start(0) === adjustedSegmentRange.end(0)) {\n    return 0;\n  }\n\n  var percent = calculateBufferedPercent(adjustedSegmentRange, originalSegmentRange, currentTime, buffered);\n\n  // If the segment is reported as having a zero duration, return 0%\n  // since it is likely that we will need to fetch the segment\n  if (isNaN(percent) || percent === Infinity || percent === -Infinity) {\n    return 0;\n  }\n\n  return percent;\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\nexports['default'] = {\n  findRange: findRange,\n  findNextRange: findNextRange,\n  findGaps: findGaps,\n  findSoleUncommonTimeRangesEnd: findSoleUncommonTimeRangesEnd,\n  getSegmentBufferedPercent: getSegmentBufferedPercent,\n  TIME_FUDGE_FACTOR: TIME_FUDGE_FACTOR,\n  printableRange: printableRange,\n  timeUntilRebuffer: timeUntilRebuffer\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],12:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = _videoJs2['default'].mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      _videoJs2['default'].log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nexports['default'] = reloadSourceOnError;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _playlistJs = require('./playlist.js');\n\n/**\n * Enable/disable playlist function. It is intended to have the first two\n * arguments partially-applied in order to create the final per-playlist\n * function.\n *\n * @param {PlaylistLoader} playlist - The rendition or media-playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Boolean} The current enabled-state of the playlist\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn, enable) {\n  var playlist = loader.master.playlists[playlistUri];\n  var blacklisted = (0, _playlistJs.isBlacklisted)(playlist);\n  var currentlyEnabled = (0, _playlistJs.isEnabled)(playlist);\n\n  if (typeof enable === 'undefined') {\n    return currentlyEnabled;\n  }\n\n  if (enable) {\n    delete playlist.disabled;\n  } else {\n    playlist.disabled = true;\n  }\n\n  if (enable !== currentlyEnabled && !blacklisted) {\n    // Ensure the outside world knows about our changes\n    changePlaylistFn();\n    if (enable) {\n      loader.trigger('renditionenabled');\n    } else {\n      loader.trigger('renditiondisabled');\n    }\n  }\n  return enable;\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  _classCallCheck(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction.bind(this, hlsHandler.playlists, playlist.uri, fastChangeFunction);\n}\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n;\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !(0, _playlistJs.isBlacklisted)(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\nexports['default'] = renditionSelectionMixin;\nmodule.exports = exports['default'];\n},{\"./playlist.js\":10}],14:[function(require,module,exports){\n/**\n * @file resolve-url.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _urlToolkit = require('url-toolkit');\n\nvar _urlToolkit2 = _interopRequireDefault(_urlToolkit);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = _urlToolkit2['default'].buildAbsoluteURL(_globalWindow2['default'].location.href, baseURL);\n  }\n\n  return _urlToolkit2['default'].buildAbsoluteURL(baseURL, relativeURL);\n};\n\nexports['default'] = resolveUrl;\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"url-toolkit\":62}],15:[function(require,module,exports){\n(function (global){\n/**\n * @file segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _sourceUpdater = require('./source-updater');\n\nvar _sourceUpdater2 = _interopRequireDefault(_sourceUpdater);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar _mediaSegmentRequest = require('./media-segment-request');\n\nvar _ranges = require('./ranges');\n\nvar _playlistSelectors = require('./playlist-selectors');\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = (function (_videojs$EventTarget) {\n  _inherits(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    var _this = this;\n\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, SegmentLoader);\n\n    _get(Object.getPrototypeOf(SegmentLoader.prototype), 'constructor', this).call(this);\n    // check pre-conditions\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    this.state = 'INIT';\n    this.bandwidth = settings.bandwidth;\n    this.throughput = { rate: 0, count: 0 };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n\n    // private settings\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.hls_ = settings.hls;\n    this.loaderType_ = settings.loaderType;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n\n    // private instance variables\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.pendingSegment_ = null;\n    this.mimeType_ = null;\n    this.sourceUpdater_ = null;\n    this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {};\n\n    this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    this.fetchAtBuffer_ = false;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'segment-loader', this.loaderType_, '->');\n    }\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  _createClass(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new _sourceUpdater2['default'](this.mediaSource_, this.mimeType_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('mediaSequenceDiff', mediaSequenceDiff);\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     */\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     */\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything() {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_());\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end);\n      }\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = undefined;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      this.logger_('checkBuffer_', 'mediaIndex:', mediaIndex, 'hasPlayed:', hasPlayed, 'currentTime:', currentTime, 'syncPoint:', syncPoint, 'fetchAtBuffer:', this.fetchAtBuffer_, 'bufferedTime:', bufferedTime);\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        this.logger_('getSync', 'mediaIndex:', mediaIndex);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        this.logger_('walkForward', 'mediaIndex:', mediaIndex + 1);\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      }\n      this.logger_('getMediaIndexForTime', 'mediaIndex:', mediaIndex, 'startOfSegment:', startOfSegment);\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer = (0, _ranges.timeUntilRebuffer)(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer) {\n        return false;\n      }\n\n      var switchCandidate = (0, _playlistSelectors.minRebufferMaxBandwidthSelector)({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer <= _ranges.TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * _config2['default'].BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = (0, _mediaSegmentRequest.mediaSegmentRequest)(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var seekable = this.seekable_();\n      var currentTime = this.currentTime_();\n      var removeToTime = 0;\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      // If we have a seekable range use that as the limit for what can be removed safely\n      // otherwise remove anything older than 30 seconds before the current play head\n      if (seekable.length && seekable.start(0) > 0 && seekable.start(0) < currentTime) {\n        removeToTime = seekable.start(0);\n      } else {\n        removeToTime = currentTime - 30;\n      }\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      this.syncController_.probeSegmentInfo(segmentInfo);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        (function () {\n          var initId = (0, _binUtils.initSegmentId)(segment.map);\n\n          if (!_this3.activeInitSegmentId_ || _this3.activeInitSegmentId_ !== initId) {\n            var initSegment = _this3.initSegment(segment.map);\n\n            _this3.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n              _this3.activeInitSegmentId_ = initId;\n            });\n          }\n        })();\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      this.logger_('handleUpdateEnd_', 'segmentInfo:', this.pendingSegment_);\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n\n      var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n      var value = {\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n\n  return SegmentLoader;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./media-segment-request\":6,\"./playlist\":10,\"./playlist-selectors\":9,\"./ranges\":11,\"./source-updater\":16,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],16:[function(require,module,exports){\n(function (global){\n/**\n * @file source-updater.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar noop = function noop() {};\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n */\n\nvar SourceUpdater = (function () {\n  function SourceUpdater(mediaSource, mimeType) {\n    var _this = this;\n\n    _classCallCheck(this, SourceUpdater);\n\n    var createSourceBuffer = function createSourceBuffer() {\n      _this.sourceBuffer_ = mediaSource.addSourceBuffer(mimeType);\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      _this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this.pendingCallback_;\n\n        _this.pendingCallback_ = null;\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this.runCallback_();\n      };\n\n      _this.sourceBuffer_.addEventListener('updateend', _this.onUpdateendCallback_);\n\n      _this.runCallback_();\n    };\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', createSourceBuffer);\n    } else {\n      createSourceBuffer();\n    }\n  }\n\n  /**\n   * Aborts the current segment and resets the segment parser.\n   *\n   * @param {Function} done function to call when done\n   * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n   */\n\n  _createClass(SourceUpdater, [{\n    key: 'abort',\n    value: function abort(done) {\n      var _this2 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this2.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this3 = this;\n\n      this.processedAppend_ = true;\n\n      this.queueCallback_(function () {\n        _this3.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this4 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this4.sourceBuffer_.remove(start, end);\n        }, noop);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this5 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this5.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = undefined;\n\n      if (!this.updating() && this.callbacks_.length) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n\n  return SourceUpdater;\n})();\n\nexports['default'] = SourceUpdater;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],17:[function(require,module,exports){\n(function (global){\n/**\n * @file sync-controller.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _muxJsLibMp4Probe = require('mux.js/lib/mp4/probe');\n\nvar _muxJsLibMp4Probe2 = _interopRequireDefault(_muxJsLibMp4Probe);\n\nvar _muxJsLibToolsTsInspectorJs = require('mux.js/lib/tools/ts-inspector.js');\n\nvar _playlist = require('./playlist');\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (duration !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (syncController.datetimeToDisplayTime && playlist.dateTimeObject) {\n      var playlistTime = playlist.dateTimeObject.getTime() / 1000;\n      var playlistStart = playlistTime + syncController.datetimeToDisplayTime;\n      var syncPoint = {\n        time: playlistStart,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nexports.syncPointStrategies = syncPointStrategies;\n\nvar SyncController = (function (_videojs$EventTarget) {\n  _inherits(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, SyncController);\n\n    _get(Object.getPrototypeOf(SyncController.prototype), 'constructor', this).call(this);\n    // Segment Loader state variables...\n    // ...for synching across variants\n    this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    this.timelines = [];\n    this.discontinuities = [];\n    this.datetimeToDisplayTime = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'sync-controller ->');\n    }\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  _createClass(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + (0, _playlist.sumDurations)(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n          this.logger_('syncPoint found via <' + strategy.name + '>:', syncPoint);\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint with strategy <' + bestStrategy + '> chosen: ', bestSyncPoint);\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist sync:', newPlaylist.syncInfo);\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.dateTimeObject) {\n        var playlistTimestamp = playlist.dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timingInfo = undefined;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n        }\n      }\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = _muxJsLibMp4Probe2['default'].timescale(segment.map.bytes);\n      var startTime = _muxJsLibMp4Probe2['default'].startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = (0, _muxJsLibToolsTsInspectorJs.inspect)(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = undefined;\n      var segmentEndTime = undefined;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        this.logger_('tsO:', segmentInfo.timestampOffset);\n\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = undefined;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return SyncController;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SyncController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist\":10,\"mux.js/lib/mp4/probe\":56,\"mux.js/lib/tools/ts-inspector.js\":58}],18:[function(require,module,exports){\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = undefined;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc1)([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\nexports.parseCodecs = parseCodecs;\n},{}],19:[function(require,module,exports){\n(function (global){\n/**\n * @file vtt-segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\nvar uintToString = function uintToString(uintArray) {\n  return String.fromCharCode.apply(null, uintArray);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = (function (_SegmentLoader) {\n  _inherits(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, VTTSegmentLoader);\n\n    _get(Object.getPrototypeOf(VTTSegmentLoader.prototype), 'constructor', this).call(this, settings, options);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    this.mediaSource_ = null;\n\n    this.subtitlesTrack_ = null;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  _createClass(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return _videoJs2['default'].createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack} track\n     *        The text track to add loaded subtitles to\n     */\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this.state = 'READY';\n          if (!_this.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this2 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof _globalWindow2['default'].WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n        var _ret = (function () {\n\n          var loadHandler = function loadHandler() {\n            _this2.handleSegment_();\n          };\n\n          _this2.state = 'WAITING_ON_VTTJS';\n          _this2.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n          _this2.subtitlesTrack_.tech_.one('vttjserror', function () {\n            _this2.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n            _this2.error({\n              message: 'Error loading vtt.js'\n            });\n            _this2.state = 'READY';\n            _this2.pause();\n            _this2.trigger('error');\n          });\n\n          return {\n            v: undefined\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this2.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = undefined;\n      var decodeBytesToString = false;\n\n      if (typeof _globalWindow2['default'].TextDecoder === 'function') {\n        decoder = new _globalWindow2['default'].TextDecoder('utf8');\n      } else {\n        decoder = _globalWindow2['default'].WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        _videoJs2['default'].log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uintToString(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uintToString(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n\n  return VTTSegmentLoader;\n})(_segmentLoader2['default']);\n\nexports['default'] = VTTSegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./segment-loader\":15,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],20:[function(require,module,exports){\n(function (global){\n/**\n * @file xhr.js\n */\n\n/**\n * A wrapper for videojs.xhr that tracks bandwidth.\n *\n * @param {Object} options options for the XHR\n * @param {Function} callback the callback to call when done\n * @return {Request} the xhr request that is going to be made\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar xhrFactory = function xhrFactory() {\n  var xhr = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = (0, _videoJs.mergeOptions)({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || _videoJs2['default'].Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = (0, _videoJs.xhr)(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr;\n};\n\nexports['default'] = xhrFactory;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],21:[function(require,module,exports){\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = undefined;\n  var x = undefined;\n  var xInv = undefined;\n  var d = [];\n  var th = [];\n  var x2 = undefined;\n  var x4 = undefined;\n  var x8 = undefined;\n  var s = undefined;\n  var tEnc = undefined;\n  var tDec = undefined;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = (function () {\n  function AES(key) {\n    _classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = undefined;\n    var j = undefined;\n    var tmp = undefined;\n    var encKey = undefined;\n    var decKey = undefined;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n  _createClass(AES, [{\n    key: 'decrypt',\n    value: function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      var key = this._key[1];\n      // state variables a,b,c,d are loaded with pre-whitened data\n      var a = encrypted0 ^ key[0];\n      var b = encrypted3 ^ key[1];\n      var c = encrypted2 ^ key[2];\n      var d = encrypted1 ^ key[3];\n      var a2 = undefined;\n      var b2 = undefined;\n      var c2 = undefined;\n\n      // key.length === 2 ?\n      var nInnerRounds = key.length / 4 - 2;\n      var i = undefined;\n      var kIndex = 4;\n      var table = this._tables[1];\n\n      // load up the tables\n      var table0 = table[0];\n      var table1 = table[1];\n      var table2 = table[2];\n      var table3 = table[3];\n      var sbox = table[4];\n\n      // Inner rounds. Cribbed from OpenSSL.\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;b = b2;c = c2;\n      }\n\n      // Last round.\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;a = b;b = c;c = d;d = a2;\n      }\n    }\n  }]);\n\n  return AES;\n})();\n\nexports['default'] = AES;\nmodule.exports = exports['default'];\n},{}],22:[function(require,module,exports){\n/**\n * @file async-stream.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = (function (_Stream) {\n  _inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    _classCallCheck(this, AsyncStream);\n\n    _get(Object.getPrototypeOf(AsyncStream.prototype), 'constructor', this).call(this, _stream2['default']);\n    this.jobs = [];\n    this.delay = 1;\n    this.timeout_ = null;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n  _createClass(AsyncStream, [{\n    key: 'processJob_',\n    value: function processJob_() {\n      this.jobs.shift()();\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n  }, {\n    key: 'push',\n    value: function push(job) {\n      this.jobs.push(job);\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n  }]);\n\n  return AsyncStream;\n})(_stream2['default']);\n\nexports['default'] = AsyncStream;\nmodule.exports = exports['default'];\n},{\"./stream\":25}],23:[function(require,module,exports){\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _aes = require('./aes');\n\nvar _aes2 = _interopRequireDefault(_aes);\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nvar _pkcs7 = require('pkcs7');\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new _aes2['default'](Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = undefined;\n  var init1 = undefined;\n  var init2 = undefined;\n  var init3 = undefined;\n  var encrypted0 = undefined;\n  var encrypted1 = undefined;\n  var encrypted2 = undefined;\n  var encrypted3 = undefined;\n\n  // iteration variable\n  var wordIx = undefined;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\nexports.decrypt = decrypt;\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = (function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    _classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new _asyncStream2['default']();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, (0, _pkcs7.unpad)(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n  _createClass(Decrypter, [{\n    key: 'decryptChunk_',\n\n    /**\n     * @private\n     */\n    value: function decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        var bytes = decrypt(encrypted, key, initVector);\n\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }], [{\n    key: 'STEP',\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n})();\n\nexports.Decrypter = Decrypter;\nexports['default'] = {\n  Decrypter: Decrypter,\n  decrypt: decrypt\n};\n},{\"./aes\":21,\"./async-stream\":22,\"pkcs7\":27}],24:[function(require,module,exports){\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _decrypter = require('./decrypter');\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nexports['default'] = {\n  decrypt: _decrypter.decrypt,\n  Decrypter: _decrypter.Decrypter,\n  AsyncStream: _asyncStream2['default']\n};\nmodule.exports = exports['default'];\n},{\"./async-stream\":22,\"./decrypter\":23}],25:[function(require,module,exports){\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Stream = (function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      var index = undefined;\n\n      if (!this.listeners[type]) {\n        return false;\n      }\n      index = this.listeners[type].indexOf(listener);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = undefined;\n      var i = undefined;\n      var length = undefined;\n      var args = undefined;\n\n      callbacks = this.listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n})();\n\nexports['default'] = Stream;\nmodule.exports = exports['default'];\n},{}],26:[function(require,module,exports){\n/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nvar PADDING;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function pad(plaintext) {\n  var padding = PADDING[(plaintext.byteLength % 16) || 0],\n      result = new Uint8Array(plaintext.byteLength + padding.length);\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n  return result;\n};\n\n// pre-define the padding values\nPADDING = [\n  [16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16],\n\n  [15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15],\n\n  [14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14],\n\n  [13, 13, 13, 13,\n   13, 13, 13, 13,\n   13, 13, 13, 13,\n   13],\n\n  [12, 12, 12, 12,\n   12, 12, 12, 12,\n   12, 12, 12, 12],\n\n  [11, 11, 11, 11,\n   11, 11, 11, 11,\n   11, 11, 11],\n\n  [10, 10, 10, 10,\n   10, 10, 10, 10,\n   10, 10],\n\n  [9, 9, 9, 9,\n   9, 9, 9, 9,\n   9],\n\n  [8, 8, 8, 8,\n   8, 8, 8, 8],\n\n  [7, 7, 7, 7,\n   7, 7, 7],\n\n  [6, 6, 6, 6,\n   6, 6],\n\n  [5, 5, 5, 5,\n   5],\n\n  [4, 4, 4, 4],\n\n  [3, 3, 3],\n\n  [2, 2],\n\n  [1]\n];\n\n},{}],27:[function(require,module,exports){\n/*\n * pkcs7\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nexports.pad = require('./pad.js');\nexports.unpad = require('./unpad.js');\n\n},{\"./pad.js\":26,\"./unpad.js\":28}],28:[function(require,module,exports){\n/*\n * pkcs7.unpad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n};\n\n},{}],29:[function(require,module,exports){\n\n},{}],30:[function(require,module,exports){\n(function (global){\nvar topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"min-document\":29}],31:[function(require,module,exports){\n(function (global){\nvar win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],32:[function(require,module,exports){\n'use strict';\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nmodule.exports = {\n  LineStream: _lineStream2['default'],\n  ParseStream: _parseStream2['default'],\n  Parser: _parser2['default']\n}; /**\n    * @file m3u8/index.js\n    *\n    * Utilities for parsing M3U8 files. If the entire manifest is available,\n    * `Parser` will create an object representation with enough detail for managing\n    * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n    * that do not assume the entirety of the manifest is ready and expose a\n    * ReadableStream-like interface.\n    */\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./parser\":35}],33:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/line-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\nvar LineStream = function (_Stream) {\n  _inherits(LineStream, _Stream);\n\n  function LineStream() {\n    _classCallCheck(this, LineStream);\n\n    var _this = _possibleConstructorReturn(this, (LineStream.__proto__ || Object.getPrototypeOf(LineStream)).call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  _createClass(LineStream, [{\n    key: 'push',\n    value: function push(data) {\n      var nextNewline = void 0;\n\n      this.buffer += data;\n      nextNewline = this.buffer.indexOf('\\n');\n\n      for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n        this.trigger('data', this.buffer.substring(0, nextNewline));\n        this.buffer = this.buffer.substring(nextNewline + 1);\n      }\n    }\n  }]);\n\n  return LineStream;\n}(_stream2['default']);\n\nexports['default'] = LineStream;\n},{\"./stream\":36}],34:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parse-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  _inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    _classCallCheck(this, ParseStream);\n\n    return _possibleConstructorReturn(this, (ParseStream.__proto__ || Object.getPrototypeOf(ParseStream)).call(this));\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  _createClass(ParseStream, [{\n    key: 'push',\n    value: function push(line) {\n      var match = void 0;\n      var event = void 0;\n\n      // strip whitespace\n      line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n      if (line.length === 0) {\n        // ignore empty lines\n        return;\n      }\n\n      // URIs\n      if (line[0] !== '#') {\n        this.trigger('data', {\n          type: 'uri',\n          uri: line\n        });\n        return;\n      }\n\n      // Comments\n      if (line.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: line.slice(1)\n        });\n        return;\n      }\n\n      // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n      line = line.replace('\\r', '');\n\n      // Tags\n      match = /^#EXTM3U/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n        if (match[2]) {\n          event.title = match[2];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'totalduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'byterange'\n        };\n        if (match[1]) {\n          event.length = parseInt(match[1], 10);\n        }\n        if (match[2]) {\n          event.offset = parseInt(match[2], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n          if (attributes.BYTERANGE) {\n            var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n                _attributes$BYTERANGE2 = _slicedToArray(_attributes$BYTERANGE, 2),\n                length = _attributes$BYTERANGE2[0],\n                offset = _attributes$BYTERANGE2[1];\n\n            event.byterange = {};\n            if (length) {\n              event.byterange.length = parseInt(length, 10);\n            }\n            if (offset) {\n              event.byterange.offset = parseInt(offset, 10);\n            }\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n            event.attributes.RESOLUTION = resolution;\n          }\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ENDLIST/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          // parse the IV string into a Uint32Array\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n\n      // unknown tag type\n      this.trigger('data', {\n        type: 'tag',\n        data: line.slice(4)\n      });\n    }\n  }]);\n\n  return ParseStream;\n}(_stream2['default']);\n\nexports['default'] = ParseStream;\n},{\"./stream\":36}],35:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parser.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\nvar Parser = function (_Stream) {\n  _inherits(Parser, _Stream);\n\n  function Parser() {\n    _classCallCheck(this, Parser);\n\n    var _this = _possibleConstructorReturn(this, (Parser.__proto__ || Object.getPrototypeOf(Parser)).call(this));\n\n    _this.lineStream = new _lineStream2['default']();\n    _this.parseStream = new _parseStream2['default']();\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              this.manifest.dateTimeString = entry.dateTimeString;\n              this.manifest.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  _createClass(Parser, [{\n    key: 'push',\n    value: function push(chunk) {\n      this.lineStream.push(chunk);\n    }\n\n    /**\n     * Flush any remaining input. This can be handy if the last line of an M3U8\n     * manifest did not contain a trailing newline but the file has been\n     * completely received.\n     */\n\n  }, {\n    key: 'end',\n    value: function end() {\n      // flush any buffered input\n      this.lineStream.push('\\n');\n    }\n  }]);\n\n  return Parser;\n}(_stream2['default']);\n\nexports['default'] = Parser;\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./stream\":36}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n\n      var index = this.listeners[type].indexOf(listener);\n\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = this.listeners[type];\n      var i = void 0;\n      var length = void 0;\n      var args = void 0;\n\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n}();\n\nexports['default'] = Stream;\n},{}],37:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n\n},{\"../utils/stream.js\":61}],38:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n\n},{}],39:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n\n},{\"../utils/stream.js\":61}],40:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n\n},{\"../utils/exp-golomb.js\":60,\"../utils/stream.js\":61}],41:[function(require,module,exports){\nvar highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n\n},{}],42:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\n/**\n * The final stage of the transmuxer that emits the flv tags\n * for audio, video, and metadata. Also tranlates in time and\n * outputs caption data and id3 cues.\n */\nvar CoalesceStream = function(options) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = options.metadataStream;\n\n  this.videoTags = [];\n  this.audioTags = [];\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n      this.videoTags = output.tags;\n      this.pendingTracks++;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n      this.audioTags = output.tags;\n      this.pendingTracks++;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    id3,\n    caption,\n    i,\n    timelineStartPts,\n    event = {\n      tags: {},\n      captions: [],\n      captionStreams: {},\n      metadata: []\n    };\n\n  if (this.pendingTracks < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.pendingTracks === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.processedTracks++;\n\n      if (this.processedTracks < this.numberOfTracks) {\n        return;\n      }\n    }\n  }\n\n  this.processedTracks += this.pendingTracks;\n  this.pendingTracks = 0;\n\n  if (this.processedTracks < this.numberOfTracks) {\n    return;\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n  }\n\n  event.tags.videoTags = this.videoTags;\n  event.tags.audioTags = this.audioTags;\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = caption.startPts - timelineStartPts;\n    caption.startTime /= 90e3;\n    caption.endTime = caption.endPts - timelineStartPts;\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = id3.pts - timelineStartPts;\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.videoTags = [];\n  this.audioTags = [];\n  this.pendingCaptions.length = 0;\n  this.pendingMetadata.length = 0;\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  // Emit the final segment\n  this.trigger('data', event);\n\n  this.trigger('done');\n};\n\nmodule.exports = CoalesceStream;\n\n},{\"../utils/stream.js\":61}],43:[function(require,module,exports){\n'use strict';\n\nvar FlvTag = require('./flv-tag.js');\n\n// For information on the FLV format, see\n// http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf.\n// Technically, this function returns the header and a metadata FLV tag\n// if duration is greater than zero\n// duration in seconds\n// @return {object} the bytes of the FLV header as a Uint8Array\nvar getFlvHeader = function(duration, audio, video) { // :ByteArray {\n  var\n    headBytes = new Uint8Array(3 + 1 + 1 + 4),\n    head = new DataView(headBytes.buffer),\n    metadata,\n    result,\n    metadataLength;\n\n  // default arguments\n  duration = duration || 0;\n  audio = audio === undefined ? true : audio;\n  video = video === undefined ? true : video;\n\n  // signature\n  head.setUint8(0, 0x46); // 'F'\n  head.setUint8(1, 0x4c); // 'L'\n  head.setUint8(2, 0x56); // 'V'\n\n  // version\n  head.setUint8(3, 0x01);\n\n  // flags\n  head.setUint8(4, (audio ? 0x04 : 0x00) | (video ? 0x01 : 0x00));\n\n  // data offset, should be 9 for FLV v1\n  head.setUint32(5, headBytes.byteLength);\n\n  // init the first FLV tag\n  if (duration <= 0) {\n    // no duration available so just write the first field of the first\n    // FLV tag\n    result = new Uint8Array(headBytes.byteLength + 4);\n    result.set(headBytes);\n    result.set([0, 0, 0, 0], headBytes.byteLength);\n    return result;\n  }\n\n  // write out the duration metadata tag\n  metadata = new FlvTag(FlvTag.METADATA_TAG);\n  metadata.pts = metadata.dts = 0;\n  metadata.writeMetaDataDouble('duration', duration);\n  metadataLength = metadata.finalize().length;\n  result = new Uint8Array(headBytes.byteLength + metadataLength);\n  result.set(headBytes);\n  result.set(head.byteLength, metadataLength);\n\n  return result;\n};\n\nmodule.exports = getFlvHeader;\n\n},{\"./flv-tag.js\":44}],44:[function(require,module,exports){\n/**\n * An object that stores the bytes of an FLV tag and methods for\n * querying and manipulating that data.\n * @see http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf\n */\n'use strict';\n\nvar FlvTag;\n\n// (type:uint, extraData:Boolean = false) extends ByteArray\nFlvTag = function(type, extraData) {\n  var\n    // Counter if this is a metadata tag, nal start marker if this is a video\n    // tag. unused if this is an audio tag\n    adHoc = 0, // :uint\n\n    // The default size is 16kb but this is not enough to hold iframe\n    // data and the resizing algorithm costs a bit so we create a larger\n    // starting buffer for video tags\n    bufferStartSize = 16384,\n\n    // checks whether the FLV tag has enough capacity to accept the proposed\n    // write and re-allocates the internal buffers if necessary\n    prepareWrite = function(flv, count) {\n      var\n        bytes,\n        minLength = flv.position + count;\n      if (minLength < flv.bytes.byteLength) {\n        // there's enough capacity so do nothing\n        return;\n      }\n\n      // allocate a new buffer and copy over the data that will not be modified\n      bytes = new Uint8Array(minLength * 2);\n      bytes.set(flv.bytes.subarray(0, flv.position), 0);\n      flv.bytes = bytes;\n      flv.view = new DataView(flv.bytes.buffer);\n    },\n\n    // commonly used metadata properties\n    widthBytes = FlvTag.widthBytes || new Uint8Array('width'.length),\n    heightBytes = FlvTag.heightBytes || new Uint8Array('height'.length),\n    videocodecidBytes = FlvTag.videocodecidBytes || new Uint8Array('videocodecid'.length),\n    i;\n\n  if (!FlvTag.widthBytes) {\n    // calculating the bytes of common metadata names ahead of time makes the\n    // corresponding writes faster because we don't have to loop over the\n    // characters\n    // re-test with test/perf.html if you're planning on changing this\n    for (i = 0; i < 'width'.length; i++) {\n      widthBytes[i] = 'width'.charCodeAt(i);\n    }\n    for (i = 0; i < 'height'.length; i++) {\n      heightBytes[i] = 'height'.charCodeAt(i);\n    }\n    for (i = 0; i < 'videocodecid'.length; i++) {\n      videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);\n    }\n\n    FlvTag.widthBytes = widthBytes;\n    FlvTag.heightBytes = heightBytes;\n    FlvTag.videocodecidBytes = videocodecidBytes;\n  }\n\n  this.keyFrame = false; // :Boolean\n\n  switch (type) {\n  case FlvTag.VIDEO_TAG:\n    this.length = 16;\n    // Start the buffer at 256k\n    bufferStartSize *= 6;\n    break;\n  case FlvTag.AUDIO_TAG:\n    this.length = 13;\n    this.keyFrame = true;\n    break;\n  case FlvTag.METADATA_TAG:\n    this.length = 29;\n    this.keyFrame = true;\n    break;\n  default:\n    throw new Error('Unknown FLV tag type');\n  }\n\n  this.bytes = new Uint8Array(bufferStartSize);\n  this.view = new DataView(this.bytes.buffer);\n  this.bytes[0] = type;\n  this.position = this.length;\n  this.keyFrame = extraData; // Defaults to false\n\n  // presentation timestamp\n  this.pts = 0;\n  // decoder timestamp\n  this.dts = 0;\n\n  // ByteArray#writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0)\n  this.writeBytes = function(bytes, offset, length) {\n    var\n      start = offset || 0,\n      end;\n    length = length || bytes.byteLength;\n    end = start + length;\n\n    prepareWrite(this, length);\n    this.bytes.set(bytes.subarray(start, end), this.position);\n\n    this.position += length;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeByte(value:int):void\n  this.writeByte = function(byte) {\n    prepareWrite(this, 1);\n    this.bytes[this.position] = byte;\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeShort(value:int):void\n  this.writeShort = function(short) {\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, short);\n    this.position += 2;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // Negative index into array\n  // (pos:uint):int\n  this.negIndex = function(pos) {\n    return this.bytes[this.length - pos];\n  };\n\n  // The functions below ONLY work when this[0] == VIDEO_TAG.\n  // We are not going to check for that because we dont want the overhead\n  // (nal:ByteArray = null):int\n  this.nalUnitSize = function() {\n    if (adHoc === 0) {\n      return 0;\n    }\n\n    return this.length - (adHoc + 4);\n  };\n\n  this.startNalUnit = function() {\n    // remember position and add 4 bytes\n    if (adHoc > 0) {\n      throw new Error('Attempted to create new NAL wihout closing the old one');\n    }\n\n    // reserve 4 bytes for nal unit size\n    adHoc = this.length;\n    this.length += 4;\n    this.position = this.length;\n  };\n\n  // (nal:ByteArray = null):void\n  this.endNalUnit = function(nalContainer) {\n    var\n      nalStart, // :uint\n      nalLength; // :uint\n\n    // Rewind to the marker and write the size\n    if (this.length === adHoc + 4) {\n      // we started a nal unit, but didnt write one, so roll back the 4 byte size value\n      this.length -= 4;\n    } else if (adHoc > 0) {\n      nalStart = adHoc + 4;\n      nalLength = this.length - nalStart;\n\n      this.position = adHoc;\n      this.view.setUint32(this.position, nalLength);\n      this.position = this.length;\n\n      if (nalContainer) {\n        // Add the tag to the NAL unit\n        nalContainer.push(this.bytes.subarray(nalStart, nalStart + nalLength));\n      }\n    }\n\n    adHoc = 0;\n  };\n\n  /**\n   * Write out a 64-bit floating point valued metadata property. This method is\n   * called frequently during a typical parse and needs to be fast.\n   */\n  // (key:String, val:Number):void\n  this.writeMetaDataDouble = function(key, val) {\n    var i;\n    prepareWrite(this, 2 + key.length + 9);\n\n    // write size of property name\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n\n    // this next part looks terrible but it improves parser throughput by\n    // 10kB/s in my testing\n\n    // write property name\n    if (key === 'width') {\n      this.bytes.set(widthBytes, this.position);\n      this.position += 5;\n    } else if (key === 'height') {\n      this.bytes.set(heightBytes, this.position);\n      this.position += 6;\n    } else if (key === 'videocodecid') {\n      this.bytes.set(videocodecidBytes, this.position);\n      this.position += 12;\n    } else {\n      for (i = 0; i < key.length; i++) {\n        this.bytes[this.position] = key.charCodeAt(i);\n        this.position++;\n      }\n    }\n\n    // skip null byte\n    this.position++;\n\n    // write property value\n    this.view.setFloat64(this.position, val);\n    this.position += 8;\n\n    // update flv tag length\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // (key:String, val:Boolean):void\n  this.writeMetaDataBoolean = function(key, val) {\n    var i;\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n    for (i = 0; i < key.length; i++) {\n      // if key.charCodeAt(i) >= 255, handle error\n      prepareWrite(this, 1);\n      this.bytes[this.position] = key.charCodeAt(i);\n      this.position++;\n    }\n    prepareWrite(this, 2);\n    this.view.setUint8(this.position, 0x01);\n    this.position++;\n    this.view.setUint8(this.position, val ? 0x01 : 0x00);\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // ():ByteArray\n  this.finalize = function() {\n    var\n      dtsDelta, // :int\n      len; // :int\n\n    switch (this.bytes[0]) {\n      // Video Data\n    case FlvTag.VIDEO_TAG:\n       // We only support AVC, 1 = key frame (for AVC, a seekable\n       // frame), 2 = inter frame (for AVC, a non-seekable frame)\n      this.bytes[11] = ((this.keyFrame || extraData) ? 0x10 : 0x20) | 0x07;\n      this.bytes[12] = extraData ?  0x00 : 0x01;\n\n      dtsDelta = this.pts - this.dts;\n      this.bytes[13] = (dtsDelta & 0x00FF0000) >>> 16;\n      this.bytes[14] = (dtsDelta & 0x0000FF00) >>>  8;\n      this.bytes[15] = (dtsDelta & 0x000000FF) >>>  0;\n      break;\n\n    case FlvTag.AUDIO_TAG:\n      this.bytes[11] = 0xAF; // 44 kHz, 16-bit stereo\n      this.bytes[12] = extraData ? 0x00 : 0x01;\n      break;\n\n    case FlvTag.METADATA_TAG:\n      this.position = 11;\n      this.view.setUint8(this.position, 0x02); // String type\n      this.position++;\n      this.view.setUint16(this.position, 0x0A); // 10 Bytes\n      this.position += 2;\n      // set \"onMetaData\"\n      this.bytes.set([0x6f, 0x6e, 0x4d, 0x65,\n                      0x74, 0x61, 0x44, 0x61,\n                      0x74, 0x61], this.position);\n      this.position += 10;\n      this.bytes[this.position] = 0x08; // Array type\n      this.position++;\n      this.view.setUint32(this.position, adHoc);\n      this.position = this.length;\n      this.bytes.set([0, 0, 9], this.position);\n      this.position += 3; // End Data Tag\n      this.length = this.position;\n      break;\n    }\n\n    len = this.length - 11;\n\n    // write the DataSize field\n    this.bytes[ 1] = (len & 0x00FF0000) >>> 16;\n    this.bytes[ 2] = (len & 0x0000FF00) >>>  8;\n    this.bytes[ 3] = (len & 0x000000FF) >>>  0;\n    // write the Timestamp\n    this.bytes[ 4] = (this.dts & 0x00FF0000) >>> 16;\n    this.bytes[ 5] = (this.dts & 0x0000FF00) >>>  8;\n    this.bytes[ 6] = (this.dts & 0x000000FF) >>>  0;\n    this.bytes[ 7] = (this.dts & 0xFF000000) >>> 24;\n    // write the StreamID\n    this.bytes[ 8] = 0;\n    this.bytes[ 9] = 0;\n    this.bytes[10] = 0;\n\n    // Sometimes we're at the end of the view and have one slot to write a\n    // uint32, so, prepareWrite of count 4, since, view is uint8\n    prepareWrite(this, 4);\n    this.view.setUint32(this.length, this.length);\n    this.length += 4;\n    this.position += 4;\n\n    // trim down the byte buffer to what is actually being used\n    this.bytes = this.bytes.subarray(0, this.length);\n    this.frameTime = FlvTag.frameTime(this.bytes);\n    // if bytes.bytelength isn't equal to this.length, handle error\n    return this;\n  };\n};\n\nFlvTag.AUDIO_TAG = 0x08; // == 8, :uint\nFlvTag.VIDEO_TAG = 0x09; // == 9, :uint\nFlvTag.METADATA_TAG = 0x12; // == 18, :uint\n\n// (tag:ByteArray):Boolean {\nFlvTag.isAudioFrame = function(tag) {\n  return FlvTag.AUDIO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isVideoFrame = function(tag) {\n  return FlvTag.VIDEO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isMetaData = function(tag) {\n  return FlvTag.METADATA_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isKeyFrame = function(tag) {\n  if (FlvTag.isVideoFrame(tag)) {\n    return tag[11] === 0x17;\n  }\n\n  if (FlvTag.isAudioFrame(tag)) {\n    return true;\n  }\n\n  if (FlvTag.isMetaData(tag)) {\n    return true;\n  }\n\n  return false;\n};\n\n// (tag:ByteArray):uint {\nFlvTag.frameTime = function(tag) {\n  var pts = tag[ 4] << 16; // :uint\n  pts |= tag[ 5] <<  8;\n  pts |= tag[ 6] <<  0;\n  pts |= tag[ 7] << 24;\n  return pts;\n};\n\nmodule.exports = FlvTag;\n\n},{}],45:[function(require,module,exports){\nmodule.exports = {\n  tag: require('./flv-tag'),\n  Transmuxer: require('./transmuxer'),\n  getFlvHeader: require('./flv-header')\n};\n\n},{\"./flv-header\":43,\"./flv-tag\":44,\"./transmuxer\":47}],46:[function(require,module,exports){\n'use strict';\n\nvar TagList = function() {\n  var self = this;\n\n  this.list = [];\n\n  this.push = function(tag) {\n    this.list.push({\n      bytes: tag.bytes,\n      dts: tag.dts,\n      pts: tag.pts,\n      keyFrame: tag.keyFrame,\n      metaDataTag: tag.metaDataTag\n    });\n  };\n\n  Object.defineProperty(this, 'length', {\n    get: function() {\n      return self.list.length;\n    }\n  });\n};\n\nmodule.exports = TagList;\n\n},{}],47:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar FlvTag = require('./flv-tag.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar CoalesceStream = require('./coalesce-stream.js');\nvar TagList = require('./tag-list.js');\n\nvar\n  Transmuxer,\n  VideoSegmentStream,\n  AudioSegmentStream,\n  collectTimelineInfo,\n  metaDataTag,\n  extraDataTag;\n\n/**\n * Store information about the start and end of the tracka and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectTimelineInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    } else {\n      track.timelineStartInfo.pts =\n        Math.min(track.timelineStartInfo.pts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    } else {\n      track.timelineStartInfo.dts =\n        Math.min(track.timelineStartInfo.dts, data.dts);\n    }\n  }\n};\n\nmetaDataTag = function(track, pts) {\n  var\n    tag = new FlvTag(FlvTag.METADATA_TAG); // :FlvTag\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeMetaDataDouble('videocodecid', 7);\n  tag.writeMetaDataDouble('width', track.width);\n  tag.writeMetaDataDouble('height', track.height);\n\n  return tag;\n};\n\nextraDataTag = function(track, pts) {\n  var\n    i,\n    tag = new FlvTag(FlvTag.VIDEO_TAG, true);\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeByte(0x01);// version\n  tag.writeByte(track.profileIdc);// profile\n  tag.writeByte(track.profileCompatibility);// compatibility\n  tag.writeByte(track.levelIdc);// level\n  tag.writeByte(0xFC | 0x03); // reserved (6 bits), NULA length size - 1 (2 bits)\n  tag.writeByte(0xE0 | 0x01); // reserved (3 bits), num of SPS (5 bits)\n  tag.writeShort(track.sps[0].length); // data of SPS\n  tag.writeBytes(track.sps[0]); // SPS\n\n  tag.writeByte(track.pps.length); // num of PPS (will there ever be more that 1 PPS?)\n  for (i = 0; i < track.pps.length; ++i) {\n    tag.writeShort(track.pps[i].length); // 2 bytes for length of PPS\n    tag.writeBytes(track.pps[i]); // data of PPS\n  }\n\n  return tag;\n};\n\n/**\n * Constructs a single-track, media segment from AAC data\n * events. The output of this stream can be fed to flash.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    oldExtraData;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    if (track && track.channelcount === undefined) {\n      track.audioobjecttype = data.audioobjecttype;\n      track.channelcount = data.channelcount;\n      track.samplerate = data.samplerate;\n      track.samplingfrequencyindex = data.samplingfrequencyindex;\n      track.samplesize = data.samplesize;\n      track.extraData = (track.audioobjecttype << 11) |\n                        (track.samplingfrequencyindex << 7) |\n                        (track.channelcount << 3);\n    }\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.flush = function() {\n    var currentFrame, adtsFrame, lastMetaPts, tags = new TagList();\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    lastMetaPts = -Infinity;\n\n    while (adtsFrames.length) {\n      currentFrame = adtsFrames.shift();\n\n      // write out metadata tags every 1 second so that the decoder\n      // is re-initialized quickly after seeking into a different\n      // audio configuration\n      if (track.extraData !== oldExtraData || currentFrame.pts - lastMetaPts >= 1000) {\n       adtsFrame = new FlvTag(FlvTag.METADATA_TAG);\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        // AAC is always 10\n        adtsFrame.writeMetaDataDouble('audiocodecid', 10);\n        adtsFrame.writeMetaDataBoolean('stereo', track.channelcount === 2);\n        adtsFrame.writeMetaDataDouble('audiosamplerate', track.samplerate);\n        // Is AAC always 16 bit?\n        adtsFrame.writeMetaDataDouble('audiosamplesize', 16);\n\n        tags.push(adtsFrame.finalize());\n\n        oldExtraData = track.extraData;\n\n        adtsFrame = new FlvTag(FlvTag.AUDIO_TAG, true);\n        // For audio, DTS is always the same as PTS. We want to set the DTS\n        // however so we can compare with video DTS to determine approximate\n        // packet order\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        adtsFrame.view.setUint16(adtsFrame.position, track.extraData);\n        adtsFrame.position += 2;\n        adtsFrame.length = Math.max(adtsFrame.length, adtsFrame.position);\n\n        tags.push(adtsFrame.finalize());\n\n        lastMetaPts = currentFrame.pts;\n      }\n      adtsFrame = new FlvTag(FlvTag.AUDIO_TAG);\n      adtsFrame.pts = currentFrame.pts;\n      adtsFrame.dts = currentFrame.dts;\n\n      adtsFrame.writeBytes(currentFrame.data);\n\n      tags.push(adtsFrame.finalize());\n    }\n\n    oldExtraData = null;\n    this.trigger('data', {track: track, tags: tags.list});\n\n    this.trigger('done', 'AudioSegmentStream');\n  };\n};\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Store FlvTags for the h264 stream\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    nalUnits = [],\n    config,\n    h264Frame;\n  VideoSegmentStream.prototype.init.call(this);\n\n  this.finishFrame = function(tags, frame) {\n    if (!frame) {\n      return;\n    }\n    // Check if keyframe and the length of tags.\n    // This makes sure we write metadata on the first frame of a segment.\n    if (config && track && track.newMetadata &&\n        (frame.keyFrame || tags.length === 0)) {\n      // Push extra data on every IDR frame in case we did a stream change + seek\n      var metaTag = metaDataTag(config, frame.dts).finalize();\n      var extraTag = extraDataTag(track, frame.dts).finalize();\n\n      metaTag.metaDataTag = extraTag.metaDataTag = true;\n\n      tags.push(metaTag);\n      tags.push(extraTag);\n      track.newMetadata = false;\n    }\n\n    frame.endNalUnit();\n    tags.push(frame.finalize());\n    h264Frame = null;\n  };\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer video until flush() is called\n    nalUnits.push(data);\n  };\n\n  this.flush = function() {\n    var\n      currentNal,\n      tags = new TagList();\n\n    // Throw away nalUnits at the start of the byte stream until we find\n    // the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    while (nalUnits.length) {\n      currentNal = nalUnits.shift();\n\n      // record the track config\n      if (currentNal.nalUnitType === 'seq_parameter_set_rbsp') {\n        track.newMetadata = true;\n        config = currentNal.config;\n        track.width = config.width;\n        track.height = config.height;\n        track.sps = [currentNal.data];\n        track.profileIdc = config.profileIdc;\n        track.levelIdc = config.levelIdc;\n        track.profileCompatibility = config.profileCompatibility;\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'pic_parameter_set_rbsp') {\n        track.newMetadata = true;\n        track.pps = [currentNal.data];\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        if (h264Frame) {\n          this.finishFrame(tags, h264Frame);\n        }\n        h264Frame = new FlvTag(FlvTag.VIDEO_TAG);\n        h264Frame.pts = currentNal.pts;\n        h264Frame.dts = currentNal.dts;\n      } else {\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          // the current sample is a key frame\n          h264Frame.keyFrame = true;\n        }\n        h264Frame.endNalUnit();\n      }\n      h264Frame.startNalUnit();\n      h264Frame.writeBytes(currentNal.data);\n    }\n    if (h264Frame) {\n      this.finishFrame(tags, h264Frame);\n    }\n\n    this.trigger('data', {track: track, tags: tags.list});\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * An object that incrementally transmuxes MPEG2 Trasport Stream\n * chunks into an FLV.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n\n    packetStream, parseStream, elementaryStream,\n    videoTimestampRolloverStream, audioTimestampRolloverStream,\n    timedMetadataTimestampRolloverStream,\n    adtsStream, h264Stream,\n    videoSegmentStream, audioSegmentStream, captionStream,\n    coalesceStream;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n\n  // expose the metadata stream\n  this.metadataStream = new m2ts.MetadataStream();\n\n  options.metadataStream = this.metadataStream;\n\n  // set up the parsing pipeline\n  packetStream = new m2ts.TransportPacketStream();\n  parseStream = new m2ts.TransportParseStream();\n  elementaryStream = new m2ts.ElementaryStream();\n  videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n  audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n  timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n\n  adtsStream = new AdtsStream();\n  h264Stream = new H264Stream();\n  coalesceStream = new CoalesceStream(options);\n\n  // disassemble MPEG2-TS packets into elementary streams\n  packetStream\n    .pipe(parseStream)\n    .pipe(elementaryStream);\n\n  // !!THIS ORDER IS IMPORTANT!!\n  // demux the streams\n  elementaryStream\n    .pipe(videoTimestampRolloverStream)\n    .pipe(h264Stream);\n  elementaryStream\n    .pipe(audioTimestampRolloverStream)\n    .pipe(adtsStream);\n\n  elementaryStream\n    .pipe(timedMetadataTimestampRolloverStream)\n    .pipe(this.metadataStream)\n    .pipe(coalesceStream);\n  // if CEA-708 parsing is available, hook up a caption stream\n  captionStream = new m2ts.CaptionStream();\n  h264Stream.pipe(captionStream)\n    .pipe(coalesceStream);\n\n  // hook up the segment streams once track metadata is delivered\n  elementaryStream.on('data', function(data) {\n    var i, videoTrack, audioTrack;\n\n    if (data.type === 'metadata') {\n      i = data.tracks.length;\n\n      // scan the tracks listed in the metadata\n      while (i--) {\n        if (data.tracks[i].type === 'video') {\n          videoTrack = data.tracks[i];\n        } else if (data.tracks[i].type === 'audio') {\n          audioTrack = data.tracks[i];\n        }\n      }\n\n      // hook up the video segment stream to the first track with h264 data\n      if (videoTrack && !videoSegmentStream) {\n        coalesceStream.numberOfTracks++;\n        videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n        // Set up the final part of the video pipeline\n        h264Stream\n          .pipe(videoSegmentStream)\n          .pipe(coalesceStream);\n      }\n\n      if (audioTrack && !audioSegmentStream) {\n        // hook up the audio segment stream to the first track with aac data\n        coalesceStream.numberOfTracks++;\n        audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n        // Set up the final part of the audio pipeline\n        adtsStream\n          .pipe(audioSegmentStream)\n          .pipe(coalesceStream);\n      }\n    }\n  });\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    packetStream.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n    // Start at the top of the pipeline and flush all pending work\n    packetStream.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    captionStream.reset();\n  };\n\n  // Re-emit any data coming from the coalesce stream to the outside world\n  coalesceStream.on('data', function(event) {\n    self.trigger('data', event);\n  });\n\n  // Let the consumer know we have finished flushing the entire pipeline\n  coalesceStream.on('done', function() {\n    self.trigger('done');\n  });\n};\nTransmuxer.prototype = new Stream();\n\n// forward compatibility\nmodule.exports = Transmuxer;\n\n},{\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../m2ts/m2ts.js\":49,\"../utils/stream.js\":61,\"./coalesce-stream.js\":42,\"./flv-tag.js\":44,\"./tag-list.js\":46}],48:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128,\n    Stream = require('../utils/stream');\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar packetDropper = {\n  push: function() {}\n};\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across 2 packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the second\n  // dts packet we receive that has dts === this.latestDts_. And thus, the\n  // ignoreNextEqualDts_ flag was born.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    // We've received the last duplicate packet, time to start processing again\n    this.ignoreNextEqualDts_ = false;\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  this.captionPackets_ = this.captionPackets_.concat(parseCaptionPackets(event.pts, userData));\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.activeCea608Channel_ = null;\n  // Since we don't know which channel is active until we get a control\n  // code that sets it, we start off with CEA608 handlers that just drop\n  // all the packets.\n  this.activeCea608Streams_ = [\n    packetDropper,\n    packetDropper\n  ];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  if (this.setsChannel1Active(packet) && this.activeCea608Channel_ !== 1) {\n    this.activeCea608Channel_ = 1;\n    this.activeCea608Streams_ = [this.ccStreams_[0], this.ccStreams_[2]]; // CC1, CC3\n  } else if (this.setsChannel2Active(packet) && this.activeCea608Channel_ !== 2) {\n    this.activeCea608Channel_ = 2;\n    this.activeCea608Streams_ = [this.ccStreams_[1], this.ccStreams_[3]]; // CC2, CC4\n  }\n  // If we haven't set the active streams yet, this next call just returns\n  // immediately.\n  this.activeCea608Streams_[packet.type].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 1;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 2;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 3;\n      this.mode_ = 'rollUp';\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[BOTTOM_ROW] = this.nonDisplayed_[BOTTOM_ROW].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      this.mode_ = 'paintOn';\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode (not supported)\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[BOTTOM_ROW];\n\n  baseRow += text;\n  this.displayed_[BOTTOM_ROW] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < BOTTOM_ROW; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[BOTTOM_ROW] = '';\n};\n\n// paintOn mode is not implemented\nCea608Stream.prototype.paintOn = function() {};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n\n},{\"../utils/stream\":61}],49:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {};\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      // add an entry that maps the elementary_pid to the stream_type\n      self.programMapTable[(payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]] = payload[offset];\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n\n    // if there are any packets waiting for a PMT to be found, process them now\n    while (self.packetsWaitingForPmt.length) {\n      self.processPes_.apply(self, self.packetsWaitingForPmt.shift());\n    }\n  };\n\n  /**\n   * Deliver a new MP2T packet to the stream.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    result.streamType = this.programMapTable[result.pid];\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that they match before we do a flush\n      packetFlushable = type === 'video' || event.packetLength === stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable,\n          k,\n          track;\n\n        // translate streams to tracks\n        for (k in programMapTable) {\n          if (programMapTable.hasOwnProperty(k)) {\n            track = {\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              }\n            };\n            track.id = +k;\n            if (programMapTable[k] === m2tsStreamTypes.H264_STREAM_TYPE) {\n              track.codec = 'avc';\n              track.type = 'video';\n            } else if (programMapTable[k] === m2tsStreamTypes.ADTS_STREAM_TYPE) {\n              track.codec = 'adts';\n              track.type = 'audio';\n            }\n            event.tracks.push(track);\n          }\n        }\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n\n},{\"../utils/stream.js\":61,\"./caption-stream\":48,\"./metadata-stream\":50,\"./stream-types\":52,\"./stream-types.js\":52,\"./timestamp-rollover-stream\":53}],50:[function(require,module,exports){\n/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n\n},{\"../utils/stream\":61,\"./stream-types\":52}],51:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n\n},{\"./stream-types.js\":52}],52:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n\n},{}],53:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n\n},{\"../utils/stream\":61}],54:[function(require,module,exports){\nmodule.exports = {\n  generator: require('./mp4-generator'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream\n};\n\n},{\"./mp4-generator\":55,\"./transmuxer\":57}],55:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n\n},{}],56:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar findBox, parseType, timescale, startTime;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = data[i]     << 24;\n    size |= data[i + 1] << 16;\n    size |= data[i + 2] << 8;\n    size |= data[i + 3];\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = tkhd[index]     << 24 |\n         tkhd[index + 1] << 16 |\n         tkhd[index + 2] <<  8 |\n         tkhd[index + 3];\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = mdhd[index]     << 24 |\n                 mdhd[index + 1] << 16 |\n                 mdhd[index + 2] <<  8 |\n                 mdhd[index + 3];\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = tfhd[4] << 24 |\n           tfhd[5] << 16 |\n           tfhd[6] << 8 |\n           tfhd[7];\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = tfdt[4] << 24 |\n                 tfdt[5] << 16 |\n                 tfdt[6] <<  8 |\n                 tfdt[7];\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += tfdt[8]  << 24 |\n                    tfdt[9]  << 16 |\n                    tfdt[10] <<  8 |\n                    tfdt[11];\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\nmodule.exports = {\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime\n};\n\n},{}],57:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  createDefaultSample,\n  isLikelyAacData,\n  collectDtsInfo,\n  clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime,\n  arrayEquals,\n  sumFrameByteLengths;\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\ncreateDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0\n    }\n  };\n};\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    config,\n    pps;\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  this.push = function(nalUnit) {\n    collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = this.groupNalsIntoFrames_(nalUnits);\n    gops = this.groupFramesIntoGops_(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyrame-pulling\n        gops = this.extendFirstKeyFrame_(gops);\n      }\n    }\n    collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = this.generateSampleTable_(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(this.concatenateNalData_(gops));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  this.extendFirstKeyFrame_ = function(gops) {\n    var currentGop;\n\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n\n      gops.byteLength -=  currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount;\n\n      // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n\n    return gops;\n  };\n\n  // Convert an array of nal units into an array of frames with each frame being\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n  this.groupNalsIntoFrames_ = function(nalUnits) {\n    var\n      i,\n      currentNal,\n      currentFrame = [],\n      frames = [];\n\n    currentFrame.byteLength = 0;\n\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i];\n\n      // Split on 'aud'-type nal units\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          frames.push(currentFrame);\n        }\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    }\n\n    // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n    if (frames.length &&\n        (!currentFrame.duration ||\n         currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    }\n\n    // Push the final frame\n    frames.push(currentFrame);\n    return frames;\n  };\n\n  // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n  this.groupFramesIntoGops_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      currentGop = [],\n      gops = [];\n\n    // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts;\n\n    // store some metadata about all the Gops\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration;\n\n    // push the final Gop\n    gops.push(currentGop);\n    return gops;\n  };\n\n  // generate the track's sample table from an array of gops\n  this.generateSampleTable_ = function(gops, baseDataOffset) {\n    var\n      h, i,\n      sample,\n      currentGop,\n      currentFrame,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        sample = createDefaultSample();\n\n        sample.dataOffset = dataOffset;\n        sample.compositionTimeOffset = currentFrame.pts - currentFrame.dts;\n        sample.duration = currentFrame.duration;\n        sample.size = 4 * currentFrame.length; // Space for nal unit size\n        sample.size += currentFrame.byteLength;\n\n        if (currentFrame.keyFrame) {\n          sample.flags.dependsOn = 2;\n        }\n\n        dataOffset += sample.size;\n\n        samples.push(sample);\n      }\n    }\n    return samples;\n  };\n\n  // generate the track's raw mdat data from an array of gops\n  this.concatenateNalData_ = function(gops) {\n    var\n      h, i, j,\n      currentGop,\n      currentFrame,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = gops.byteLength,\n      numberOfNals = gops.nalCount,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer);\n\n    // For each Gop..\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      // For each Frame..\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        // For each NAL..\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n    return data;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nclearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n */\ncalculateTrackBaseMediaDecodeTime = function(track) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    // Calculate the distance, in time, that this segment starts from the start\n    // of the timeline (earliest time seen since the transmuxer initialized)\n    timeSinceStartOfTimeline = track.minSegmentDts - track.timelineStartInfo.dts;\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += timeSinceStartOfTimeline;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n\n},{\"../aac\":37,\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../data/silence\":41,\"../m2ts/m2ts.js\":49,\"../utils/clock\":59,\"../utils/stream.js\":61,\"./mp4-generator.js\":55}],58:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n\n},{\"../aac/probe.js\":38,\"../m2ts/probe.js\":51,\"../m2ts/stream-types.js\":52,\"../m2ts/timestamp-rollover-stream.js\":53}],59:[function(require,module,exports){\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n\n},{}],60:[function(require,module,exports){\n'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n\n},{}],61:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n\n},{}],62:[function(require,module,exports){\n/* jshint ignore:start */\r\n(function(root) { \r\n/* jshint ignore:end */\r\n  var URLToolkit = {\r\n    // build an absolute URL from a relative one using the provided baseURL\r\n    // if relativeURL is an absolute URL it will be returned as is.\r\n    buildAbsoluteURL: function(baseURL, relativeURL) {\r\n      // remove any remaining space and CRLF\r\n      relativeURL = relativeURL.trim();\r\n      if (/^[a-z]+:/i.test(relativeURL)) {\r\n        // complete url, not relative\r\n        return relativeURL;\r\n      }\r\n\r\n      var relativeURLQuery = null;\r\n      var relativeURLHash = null;\r\n\r\n      var relativeURLHashSplit = /^([^#]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLHashSplit) {\r\n        relativeURLHash = relativeURLHashSplit[2];\r\n        relativeURL = relativeURLHashSplit[1];\r\n      }\r\n      var relativeURLQuerySplit = /^([^\\?]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLQuerySplit) {\r\n        relativeURLQuery = relativeURLQuerySplit[2];\r\n        relativeURL = relativeURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLHashSplit = /^([^#]*)(.*)$/.exec(baseURL);\r\n      if (baseURLHashSplit) {\r\n        baseURL = baseURLHashSplit[1];\r\n      }\r\n      var baseURLQuerySplit = /^([^\\?]*)(.*)$/.exec(baseURL);\r\n      if (baseURLQuerySplit) {\r\n        baseURL = baseURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLDomainSplit = /^(([a-z]+:)?\\/\\/[^:\\/]+(:[0-9]+)?)?(\\/?.*)$/i.exec(baseURL);\r\n      if (!baseURLDomainSplit) {\r\n        throw new Error('Error trying to parse base URL.');\r\n      }\r\n      \r\n      // e.g. 'http:', 'https:', ''\r\n      var baseURLProtocol = baseURLDomainSplit[2] || '';\r\n      // e.g. 'http://example.com', '//example.com', ''\r\n      var baseURLProtocolDomain = baseURLDomainSplit[1] || '';\r\n      // e.g. '/a/b/c/playlist.m3u8', 'a/b/c/playlist.m3u8'\r\n      var baseURLPath = baseURLDomainSplit[4];\r\n      if (baseURLPath.indexOf('/') !== 0 && baseURLProtocolDomain !== '') {\r\n        // this handles a base url of http://example.com (missing last slash)\r\n        baseURLPath = '/'+baseURLPath;\r\n      }\r\n\r\n      var builtURL = null;\r\n      if (/^\\/\\//.test(relativeURL)) {\r\n        // relative url starts wth '//' so copy protocol (which may be '' if baseUrl didn't provide one)\r\n        builtURL = baseURLProtocol+'//'+URLToolkit.buildAbsolutePath('', relativeURL.substring(2));\r\n      }\r\n      else if (/^\\//.test(relativeURL)) {\r\n        // relative url starts with '/' so start from root of domain\r\n        builtURL = baseURLProtocolDomain+'/'+URLToolkit.buildAbsolutePath('', relativeURL.substring(1));\r\n      }\r\n      else {\r\n        builtURL = URLToolkit.buildAbsolutePath(baseURLProtocolDomain+baseURLPath, relativeURL);\r\n      }\r\n\r\n      // put the query and hash parts back\r\n      if (relativeURLQuery) {\r\n        builtURL += relativeURLQuery;\r\n      }\r\n      if (relativeURLHash) {\r\n        builtURL += relativeURLHash;\r\n      }\r\n      return builtURL;\r\n    },\r\n\r\n    // build an absolute path using the provided basePath\r\n    // adapted from https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#Using_relative_URLs_in_the_path_parameter\r\n    // this does not handle the case where relativePath is \"/\" or \"//\". These cases should be handled outside this.\r\n    buildAbsolutePath: function(basePath, relativePath) {\r\n      var sRelPath = relativePath;\r\n      var nUpLn, sDir = '', sPath = basePath.replace(/[^\\/]*$/, sRelPath.replace(/(\\/|^)(?:\\.?\\/+)+/g, '$1'));\r\n      for (var nEnd, nStart = 0; nEnd = sPath.indexOf('/../', nStart), nEnd > -1; nStart = nEnd + nUpLn) {\r\n        nUpLn = /^\\/(?:\\.\\.\\/)*/.exec(sPath.slice(nEnd))[0].length;\r\n        sDir = (sDir + sPath.substring(nStart, nEnd)).replace(new RegExp('(?:\\\\\\/+[^\\\\\\/]*){0,' + ((nUpLn - 1) / 3) + '}$'), '/');\r\n      }\r\n      return sDir + sPath.substr(nStart);\r\n    }\r\n  };\r\n\r\n/* jshint ignore:start */\r\n  if(typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = URLToolkit;\r\n  else if(typeof define === 'function' && define.amd)\r\n    define([], function() { return URLToolkit; });\r\n  else if(typeof exports === 'object')\r\n    exports[\"URLToolkit\"] = URLToolkit;\r\n  else\r\n    root[\"URLToolkit\"] = URLToolkit;\r\n})(this);\r\n/* jshint ignore:end */\r\n\n},{}],63:[function(require,module,exports){\n(function (global){\n/**\n * @file add-text-track-data.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = undefined;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the flash or virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    (function () {\n      var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n      metadataArray.forEach(function (metadata) {\n        var time = metadata.cueTime + this.timestampOffset;\n\n        metadata.frames.forEach(function (frame) {\n          var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n          cue.frame = frame;\n          cue.value = frame;\n          deprecateOldCue(cue);\n\n          this.metadataTrack_.addCue(cue);\n        }, this);\n      }, sourceHandler);\n\n      // Updating the metadeta cues so that\n      // the endTime of each cue is the startTime of the next cue\n      // the endTime of last cue is the duration of the video\n      if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n        (function () {\n          var cues = sourceHandler.metadataTrack_.cues;\n          var cuesArray = [];\n\n          // Create a copy of the TextTrackCueList...\n          // ...disregarding cues with a falsey value\n          for (var i = 0; i < cues.length; i++) {\n            if (cues[i]) {\n              cuesArray.push(cues[i]);\n            }\n          }\n\n          // Group cues by their startTime value\n          var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n            var timeSlot = obj[cue.startTime] || [];\n\n            timeSlot.push(cue);\n            obj[cue.startTime] = timeSlot;\n\n            return obj;\n          }, {});\n\n          // Sort startTimes by ascending order\n          var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n            return Number(a) - Number(b);\n          });\n\n          // Map each cue group's endTime to the next group's startTime\n          sortedStartTimes.forEach(function (startTime, idx) {\n            var cueGroup = cuesGroupedByStartTime[startTime];\n            var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n            // Map each cue's endTime the next group's startTime\n            cueGroup.forEach(function (cue) {\n              cue.endTime = nextTime;\n            });\n          });\n        })();\n      }\n    })();\n  }\n};\n\nexports['default'] = {\n  addTextTrackData: addTextTrackData,\n  durationOfVideo: durationOfVideo\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],64:[function(require,module,exports){\n/**\n * Remove the text track from the player if one with matching kind and\n * label properties already exists on the player\n *\n * @param {Object} player the video.js player object\n * @param {String} kind to be considered the text track's `kind` must match\n * @param {String} label to be considered the text track's `label` must match\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar removeExistingTrack = function removeExistingTrack(player, kind, label) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = 0; i < tracks.length; i++) {\n    var track = tracks[i];\n\n    if (track.kind === kind && track.label === label) {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n};\n\nexports.removeExistingTrack = removeExistingTrack;\n/**\n * Cleaup text tracks on video.js if they exist\n *\n * @param {Object} player the video.js player object\n * @private\n */\nvar cleanupTextTracks = function cleanupTextTracks(player) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = tracks.length - 1; i >= 0; i--) {\n    var track = tracks[i];\n\n    if (track.kind === 'captions') {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n\n  removeExistingTrack(player, 'metadata', 'Timed Metadata');\n};\nexports.cleanupTextTracks = cleanupTextTracks;\n},{}],65:[function(require,module,exports){\n/**\n * @file codec-utils.js\n */\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var _name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[_name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\nexports['default'] = {\n  isAudioCodec: isAudioCodec,\n  parseContentType: parseContentType,\n  isVideoCodec: isVideoCodec,\n  translateLegacyCodecs: translateLegacyCodecs\n};\nmodule.exports = exports['default'];\n},{}],66:[function(require,module,exports){\n/**\n * @file create-text-tracks-if-necessary.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML or Flash media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    (0, _cleanupTextTracks.removeExistingTrack)(player, 'metadata', 'Timed Metadata', true);\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\nexports['default'] = createTextTracksIfNecessary;\nmodule.exports = exports['default'];\n},{\"./cleanup-text-tracks\":64}],67:[function(require,module,exports){\n/**\n * @file flash-constants.js\n */\n/**\n * The maximum size in bytes for append operations to the video.js\n * SWF. Calling through to Flash blocks and can be expensive so\n * we chunk data and pass through 4KB at a time, yielding to the\n * browser between chunks. This gives a theoretical maximum rate of\n * 1MB/s into Flash. Any higher and we begin to drop frames and UI\n * responsiveness suffers.\n *\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar flashConstants = {\n  // times in milliseconds\n  TIME_BETWEEN_CHUNKS: 1,\n  BYTES_PER_CHUNK: 1024 * 32\n};\n\nexports[\"default\"] = flashConstants;\nmodule.exports = exports[\"default\"];\n},{}],68:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _flashSourceBuffer = require('./flash-source-buffer');\n\nvar _flashSourceBuffer2 = _interopRequireDefault(_flashSourceBuffer);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * A flash implmentation of HTML MediaSources and a polyfill\n * for browsers that don't support native or HTML MediaSources..\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class FlashMediaSource\n * @extends videojs.EventTarget\n */\n\nvar FlashMediaSource = (function (_videojs$EventTarget) {\n  _inherits(FlashMediaSource, _videojs$EventTarget);\n\n  function FlashMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, FlashMediaSource);\n\n    _get(Object.getPrototypeOf(FlashMediaSource.prototype), 'constructor', this).call(this);\n    this.sourceBuffers = [];\n    this.readyState = 'closed';\n\n    this.on(['sourceopen', 'webkitsourceopen'], function (event) {\n      // find the swf where we will push media data\n      _this.swfObj = _globalDocument2['default'].getElementById(event.swfId);\n      _this.player_ = (0, _videoJs2['default'])(_this.swfObj.parentNode);\n      _this.tech_ = _this.swfObj.tech;\n      _this.readyState = 'open';\n\n      _this.tech_.on('seeking', function () {\n        var i = _this.sourceBuffers.length;\n\n        while (i--) {\n          _this.sourceBuffers[i].abort();\n        }\n      });\n\n      if (_this.tech_.hls) {\n        _this.tech_.hls.on('dispose', function () {\n          (0, _cleanupTextTracks.cleanupTextTracks)(_this.player_);\n        });\n      }\n\n      // trigger load events\n      if (_this.swfObj) {\n        _this.swfObj.vjs_load();\n      }\n    });\n  }\n\n  /**\n    * Set or return the presentation duration.\n    *\n    * @param {Double} value the duration of the media in seconds\n    * @param {Double} the current presentation duration\n    * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n    */\n\n  /**\n   * We have this function so that the html and flash interfaces\n   * are the same.\n   *\n   * @private\n   */\n\n  _createClass(FlashMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_() {}\n    // intentional no-op\n\n    /**\n     * Create a new flash source buffer and add it to our flash media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the source\n     * @return {Object} the flash source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n      var sourceBuffer = undefined;\n\n      // if this is an FLV type, we'll push data to flash\n      if (parsedType.type === 'video/mp2t' || parsedType.type === 'audio/mp2t') {\n        // Flash source buffers\n        sourceBuffer = new _flashSourceBuffer2['default'](this);\n      } else {\n        throw new Error('NotSupportedError (Video.js)');\n      }\n\n      this.sourceBuffers.push(sourceBuffer);\n      return sourceBuffer;\n    }\n\n    /**\n     * Signals the end of the stream.\n     *\n     * @link https://w3c.github.io/media-source/#widl-MediaSource-endOfStream-void-EndOfStreamError-error\n     * @param {String=} error Signals that a playback error\n     * has occurred. If specified, it must be either \"network\" or\n     * \"decode\".\n     */\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream(error) {\n      if (error === 'network') {\n        // MEDIA_ERR_NETWORK\n        this.tech_.error(2);\n      } else if (error === 'decode') {\n        // MEDIA_ERR_DECODE\n        this.tech_.error(3);\n      }\n      if (this.readyState !== 'ended') {\n        this.readyState = 'ended';\n        this.swfObj.vjs_endOfStream();\n      }\n    }\n  }]);\n\n  return FlashMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashMediaSource;\ntry {\n  Object.defineProperty(FlashMediaSource.prototype, 'duration', {\n    /**\n     * Return the presentation duration.\n     *\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    get: function get() {\n      if (!this.swfObj) {\n        return NaN;\n      }\n      // get the current duration from the SWF\n      return this.swfObj.vjs_getProperty('duration');\n    },\n    /**\n     * Set the presentation duration.\n     *\n     * @param {Double} value the duration of the media in seconds\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    set: function set(value) {\n      var i = undefined;\n      var oldDuration = this.swfObj.vjs_getProperty('duration');\n\n      this.swfObj.vjs_setProperty('duration', value);\n\n      if (value < oldDuration) {\n        // In MSE, this triggers the range removal algorithm which causes\n        // an update to occur\n        for (i = 0; i < this.sourceBuffers.length; i++) {\n          this.sourceBuffers[i].remove(value, oldDuration);\n        }\n      }\n\n      return value;\n    }\n  });\n} catch (e) {\n  // IE8 throws if defineProperty is called on a non-DOM node. We\n  // don't support IE8 but we shouldn't throw an error if loaded\n  // there.\n  FlashMediaSource.prototype.duration = NaN;\n}\n\nfor (var property in _flashConstants2['default']) {\n  FlashMediaSource[property] = _flashConstants2['default'][property];\n}\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./flash-constants\":67,\"./flash-source-buffer\":69,\"global/document\":30}],69:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _flashTransmuxerWorker = require('./flash-transmuxer-worker');\n\nvar _flashTransmuxerWorker2 = _interopRequireDefault(_flashTransmuxerWorker);\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\n/**\n * A wrapper around the setTimeout function that uses\n * the flash constant time between ticks value.\n *\n * @param {Function} func the function callback to run\n * @private\n */\nvar scheduleTick = function scheduleTick(func) {\n  // Chrome doesn't invoke requestAnimationFrame callbacks\n  // in background tabs, so use setTimeout.\n  _globalWindow2['default'].setTimeout(func, _flashConstants2['default'].TIME_BETWEEN_CHUNKS);\n};\n\n/**\n * Generates a random string of max length 6\n *\n * @return {String} the randomly generated string\n * @function generateRandomString\n * @private\n */\nvar generateRandomString = function generateRandomString() {\n  return Math.random().toString(36).slice(2, 8);\n};\n\n/**\n * Round a number to a specified number of places much like\n * toFixed but return a number instead of a string representation.\n *\n * @param {Number} num A number\n * @param {Number} places The number of decimal places which to\n * round\n * @private\n */\nvar toDecimalPlaces = function toDecimalPlaces(num, places) {\n  if (typeof places !== 'number' || places < 0) {\n    places = 0;\n  }\n\n  var scale = Math.pow(10, places);\n\n  return Math.round(num * scale) / scale;\n};\n\n/**\n * A SourceBuffer implementation for Flash rather than HTML.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @param {Object} mediaSource the flash media source\n * @class FlashSourceBuffer\n * @extends videojs.EventTarget\n */\n\nvar FlashSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(FlashSourceBuffer, _videojs$EventTarget);\n\n  function FlashSourceBuffer(mediaSource) {\n    var _this = this;\n\n    _classCallCheck(this, FlashSourceBuffer);\n\n    _get(Object.getPrototypeOf(FlashSourceBuffer.prototype), 'constructor', this).call(this);\n    var encodedHeader = undefined;\n\n    // Start off using the globally defined value but refine\n    // as we append data into flash\n    this.chunkSize_ = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n    // byte arrays queued to be appended\n    this.buffer_ = [];\n\n    // the total number of queued bytes\n    this.bufferSize_ = 0;\n\n    // to be able to determine the correct position to seek to, we\n    // need to retain information about the mapping between the\n    // media timeline and PTS values\n    this.basePtsOffset_ = NaN;\n\n    this.mediaSource_ = mediaSource;\n\n    this.audioBufferEnd_ = NaN;\n    this.videoBufferEnd_ = NaN;\n\n    // indicates whether the asynchronous continuation of an operation\n    // is still being processed\n    // see https://w3c.github.io/media-source/#widl-SourceBuffer-updating\n    this.updating = false;\n    this.timestampOffset_ = 0;\n\n    encodedHeader = _globalWindow2['default'].btoa(String.fromCharCode.apply(null, Array.prototype.slice.call(_muxJsLibFlv2['default'].getFlvHeader())));\n\n    // create function names with added randomness for the global callbacks flash will use\n    // to get data from javascript into the swf. Random strings are added as a safety\n    // measure for pages with multiple players since these functions will be global\n    // instead of per instance. When making a call to the swf, the browser generates a\n    // try catch code snippet, but just takes the function name and writes out an unquoted\n    // call to that function. If the player id has any special characters, this will result\n    // in an error, so safePlayerId replaces all special characters to '_'\n    var safePlayerId = this.mediaSource_.player_.id().replace(/[^a-zA-Z0-9]/g, '_');\n\n    this.flashEncodedHeaderName_ = 'vjs_flashEncodedHeader_' + safePlayerId + generateRandomString();\n    this.flashEncodedDataName_ = 'vjs_flashEncodedData_' + safePlayerId + generateRandomString();\n\n    _globalWindow2['default'][this.flashEncodedHeaderName_] = function () {\n      delete _globalWindow2['default'][_this.flashEncodedHeaderName_];\n      return encodedHeader;\n    };\n\n    this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedHeaderName_);\n\n    this.transmuxer_ = (0, _webworkify2['default'])(_flashTransmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: {} });\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        _this.receiveBuffer_(event.data.segment);\n      }\n    };\n\n    this.one('updateend', function () {\n      _this.mediaSource_.tech_.trigger('loadedmetadata');\n    });\n\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          // We have to tell flash to expect a discontinuity\n          this.mediaSource_.swfObj.vjs_discontinuity();\n          // the media <-> PTS mapping must be re-established after\n          // the discontinuity\n          this.basePtsOffset_ = NaN;\n          this.audioBufferEnd_ = NaN;\n          this.videoBufferEnd_ = NaN;\n\n          this.transmuxer_.postMessage({ action: 'reset' });\n        }\n      }\n    });\n\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        if (!this.mediaSource_ || !this.mediaSource_.swfObj || !('vjs_getProperty' in this.mediaSource_.swfObj)) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        var buffered = this.mediaSource_.swfObj.vjs_getProperty('buffered');\n\n        if (buffered && buffered.length) {\n          buffered[0][0] = toDecimalPlaces(buffered[0][0], 3);\n          buffered[0][1] = toDecimalPlaces(buffered[0][1], 3);\n        }\n        return _videoJs2['default'].createTimeRanges(buffered);\n      }\n    });\n\n    // On a seek we remove all text track data since flash has no concept\n    // of a buffered-range and everything else is reset on seek\n    this.mediaSource_.player_.on('seeked', function () {\n      (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.metadataTrack_);\n      if (_this.inbandTextTracks_) {\n        for (var track in _this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.inbandTextTracks_[track]);\n        }\n      }\n    });\n\n    var onHlsReset = this.onHlsReset_.bind(this);\n\n    this.mediaSource_.player_.tech_.on('hls-reset', onHlsReset);\n\n    this.mediaSource_.player_.tech_.hls.on('dispose', function () {\n      _this.transmuxer_.terminate();\n      _this.mediaSource_.player_.tech_.off('hls-reset', onHlsReset);\n    });\n  }\n\n  /**\n   * Append bytes to the sourcebuffers buffer, in this case we\n   * have to append it to swf object.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n   * @param {Array} bytes\n   */\n\n  _createClass(FlashSourceBuffer, [{\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes) {\n      var error = undefined;\n\n      if (this.updating) {\n        error = new Error('SourceBuffer.append() cannot be called ' + 'while an update is in progress');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n      this.updating = true;\n      this.mediaSource_.readyState = 'open';\n      this.trigger({ type: 'update' });\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        data: bytes.buffer,\n        byteOffset: bytes.byteOffset,\n        byteLength: bytes.byteLength\n      }, [bytes.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Reset the parser and remove any data queued to be sent to the SWF.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      this.buffer_ = [];\n      this.bufferSize_ = 0;\n      this.mediaSource_.swfObj.vjs_abort();\n\n      // report any outstanding updates have ended\n      if (this.updating) {\n        this.updating = false;\n        this.trigger({ type: 'updateend' });\n      }\n    }\n\n    /**\n     * Flash cannot remove ranges already buffered in the NetStream\n     * but seeking clears the buffer entirely. For most purposes,\n     * having this operation act as a no-op is acceptable.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start start of the section to remove\n     * @param {Double} end end of the section to remove\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n      this.trigger({ type: 'update' });\n      this.trigger({ type: 'updateend' });\n    }\n\n    /**\n     * Receive a buffer from the flv.\n     *\n     * @param {Object} segment\n     * @private\n     */\n  }, {\n    key: 'receiveBuffer_',\n    value: function receiveBuffer_(segment) {\n      var _this2 = this;\n\n      // create an in-band caption track if one is present in the segment\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n      (0, _addTextTrackData.addTextTrackData)(this, segment.captions, segment.metadata);\n\n      // Do this asynchronously since convertTagsToData_ can be time consuming\n      scheduleTick(function () {\n        var flvBytes = _this2.convertTagsToData_(segment);\n\n        if (_this2.buffer_.length === 0) {\n          scheduleTick(_this2.processBuffer_.bind(_this2));\n        }\n\n        if (flvBytes) {\n          _this2.buffer_.push(flvBytes);\n          _this2.bufferSize_ += flvBytes.byteLength;\n        }\n      });\n    }\n\n    /**\n     * Append a portion of the current buffer to the SWF.\n     *\n     * @private\n     */\n  }, {\n    key: 'processBuffer_',\n    value: function processBuffer_() {\n      var _this3 = this;\n\n      var chunkSize = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n      if (!this.buffer_.length) {\n        if (this.updating !== false) {\n          this.updating = false;\n          this.trigger({ type: 'updateend' });\n        }\n        // do nothing if the buffer is empty\n        return;\n      }\n\n      // concatenate appends up to the max append size\n      var chunk = this.buffer_[0].subarray(0, chunkSize);\n\n      // requeue any bytes that won't make it this round\n      if (chunk.byteLength < chunkSize || this.buffer_[0].byteLength === chunkSize) {\n        this.buffer_.shift();\n      } else {\n        this.buffer_[0] = this.buffer_[0].subarray(chunkSize);\n      }\n\n      this.bufferSize_ -= chunk.byteLength;\n\n      // base64 encode the bytes\n      var binary = [];\n      var length = chunk.byteLength;\n\n      for (var i = 0; i < length; i++) {\n        binary.push(String.fromCharCode(chunk[i]));\n      }\n      var b64str = _globalWindow2['default'].btoa(binary.join(''));\n\n      _globalWindow2['default'][this.flashEncodedDataName_] = function () {\n        // schedule another processBuffer to process any left over data or to\n        // trigger updateend\n        scheduleTick(_this3.processBuffer_.bind(_this3));\n        delete _globalWindow2['default'][_this3.flashEncodedDataName_];\n        return b64str;\n      };\n\n      // Notify the swf that segment data is ready to be appended\n      this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedDataName_);\n    }\n\n    /**\n     * Turns an array of flv tags into a Uint8Array representing the\n     * flv data. Also removes any tags that are before the current\n     * time so that playback begins at or slightly after the right\n     * place on a seek\n     *\n     * @private\n     * @param {Object} segmentData object of segment data\n     */\n  }, {\n    key: 'convertTagsToData_',\n    value: function convertTagsToData_(segmentData) {\n      var segmentByteLength = 0;\n      var tech = this.mediaSource_.tech_;\n      var videoTargetPts = 0;\n      var segment = undefined;\n      var videoTags = segmentData.tags.videoTags;\n      var audioTags = segmentData.tags.audioTags;\n\n      // Establish the media timeline to PTS translation if we don't\n      // have one already\n      if (isNaN(this.basePtsOffset_) && (videoTags.length || audioTags.length)) {\n        // We know there is at least one video or audio tag, but since we may not have both,\n        // we use pts: Infinity for the missing tag. The will force the following Math.min\n        // call will to use the proper pts value since it will always be less than Infinity\n        var firstVideoTag = videoTags[0] || { pts: Infinity };\n        var firstAudioTag = audioTags[0] || { pts: Infinity };\n\n        this.basePtsOffset_ = Math.min(firstAudioTag.pts, firstVideoTag.pts);\n      }\n\n      if (tech.seeking()) {\n        // Do not use previously saved buffer end values while seeking since buffer\n        // is cleared on all seeks\n        this.videoBufferEnd_ = NaN;\n        this.audioBufferEnd_ = NaN;\n      }\n\n      if (isNaN(this.videoBufferEnd_)) {\n        if (tech.buffered().length) {\n          videoTargetPts = tech.buffered().end(0) - this.timestampOffset;\n        }\n\n        // Trim to currentTime if seeking\n        if (tech.seeking()) {\n          videoTargetPts = Math.max(videoTargetPts, tech.currentTime() - this.timestampOffset);\n        }\n\n        // PTS values are represented in milliseconds\n        videoTargetPts *= 1e3;\n        videoTargetPts += this.basePtsOffset_;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        videoTargetPts = this.videoBufferEnd_ + 0.1;\n      }\n\n      // filter complete GOPs with a presentation time less than the seek target/end of buffer\n      var currentIndex = videoTags.length;\n\n      // if the last tag is beyond videoTargetPts, then do not search the list for a GOP\n      // since our videoTargetPts lies in a future segment\n      if (currentIndex && videoTags[currentIndex - 1].pts >= videoTargetPts) {\n        // Start by walking backwards from the end of the list until we reach a tag that\n        // is equal to or less than videoTargetPts\n        while (--currentIndex) {\n          var currentTag = videoTags[currentIndex];\n\n          if (currentTag.pts > videoTargetPts) {\n            continue;\n          }\n\n          // if we see a keyFrame or metadata tag once we've gone below videoTargetPts,\n          // exit the loop as this is the start of the GOP that we want to append\n          if (currentTag.keyFrame || currentTag.metaDataTag) {\n            break;\n          }\n        }\n\n        // We need to check if there are any metadata tags that come before currentIndex\n        // as those will be metadata tags associated with the GOP we are appending\n        // There could be 0 to 2 metadata tags that come before the currentIndex depending\n        // on what videoTargetPts is and whether the transmuxer prepended metadata tags to this\n        // key frame\n        while (currentIndex) {\n          var nextTag = videoTags[currentIndex - 1];\n\n          if (!nextTag.metaDataTag) {\n            break;\n          }\n\n          currentIndex--;\n        }\n      }\n\n      var filteredVideoTags = videoTags.slice(currentIndex);\n\n      var audioTargetPts = undefined;\n\n      if (isNaN(this.audioBufferEnd_)) {\n        audioTargetPts = videoTargetPts;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        audioTargetPts = this.audioBufferEnd_ + 0.1;\n      }\n\n      if (filteredVideoTags.length) {\n        // If targetPts intersects a GOP and we appended the tags for the GOP that came\n        // before targetPts, we want to make sure to trim audio tags at the pts\n        // of the first video tag to avoid brief moments of silence\n        audioTargetPts = Math.min(audioTargetPts, filteredVideoTags[0].pts);\n      }\n\n      // skip tags with a presentation time less than the seek target/end of buffer\n      currentIndex = 0;\n\n      while (currentIndex < audioTags.length) {\n        if (audioTags[currentIndex].pts >= audioTargetPts) {\n          break;\n        }\n\n        currentIndex++;\n      }\n\n      var filteredAudioTags = audioTags.slice(currentIndex);\n\n      // update the audio and video buffer ends\n      if (filteredAudioTags.length) {\n        this.audioBufferEnd_ = filteredAudioTags[filteredAudioTags.length - 1].pts;\n      }\n      if (filteredVideoTags.length) {\n        this.videoBufferEnd_ = filteredVideoTags[filteredVideoTags.length - 1].pts;\n      }\n\n      var tags = this.getOrderedTags_(filteredVideoTags, filteredAudioTags);\n\n      if (tags.length === 0) {\n        return;\n      }\n\n      // If we are appending data that comes before our target pts, we want to tell\n      // the swf to adjust its notion of current time to account for the extra tags\n      // we are appending to complete the GOP that intersects with targetPts\n      if (tags[0].pts < videoTargetPts && tech.seeking()) {\n        var fudgeFactor = 1 / 30;\n        var currentTime = tech.currentTime();\n        var diff = (videoTargetPts - tags[0].pts) / 1e3;\n        var adjustedTime = currentTime - diff;\n\n        if (adjustedTime < fudgeFactor) {\n          adjustedTime = 0;\n        }\n\n        try {\n          this.mediaSource_.swfObj.vjs_adjustCurrentTime(adjustedTime);\n        } catch (e) {\n          // no-op for backwards compatability of swf. If adjustCurrentTime fails,\n          // the swf may incorrectly report currentTime and buffered ranges\n          // but should not affect playback over than the time displayed on the\n          // progress bar is inaccurate\n        }\n      }\n\n      // concatenate the bytes into a single segment\n      for (var i = 0; i < tags.length; i++) {\n        segmentByteLength += tags[i].bytes.byteLength;\n      }\n      segment = new Uint8Array(segmentByteLength);\n      for (var i = 0, j = 0; i < tags.length; i++) {\n        segment.set(tags[i].bytes, j);\n        j += tags[i].bytes.byteLength;\n      }\n\n      return segment;\n    }\n\n    /**\n     * Assemble the FLV tags in decoder order.\n     *\n     * @private\n     * @param {Array} videoTags list of video tags\n     * @param {Array} audioTags list of audio tags\n     */\n  }, {\n    key: 'getOrderedTags_',\n    value: function getOrderedTags_(videoTags, audioTags) {\n      var tag = undefined;\n      var tags = [];\n\n      while (videoTags.length || audioTags.length) {\n        if (!videoTags.length) {\n          // only audio tags remain\n          tag = audioTags.shift();\n        } else if (!audioTags.length) {\n          // only video tags remain\n          tag = videoTags.shift();\n        } else if (audioTags[0].dts < videoTags[0].dts) {\n          // audio should be decoded next\n          tag = audioTags.shift();\n        } else {\n          // video should be decoded next\n          tag = videoTags.shift();\n        }\n\n        tags.push(tag);\n      }\n\n      return tags;\n    }\n  }, {\n    key: 'onHlsReset_',\n    value: function onHlsReset_() {\n      this.transmuxer_.postMessage({ action: 'resetCaptions' });\n    }\n  }]);\n\n  return FlashSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./create-text-tracks-if-necessary\":66,\"./flash-constants\":67,\"./flash-transmuxer-worker\":70,\"./remove-cues-from-track\":72,\"global/window\":31,\"mux.js/lib/flv\":45,\"webworkify\":76}],70:[function(require,module,exports){\n/**\n * @file flash-transmuxer-worker.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment\n    });\n  });\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. The scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibFlv2['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit its\n     * results.\n     */\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar FlashTransmuxerWorker = function FlashTransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new FlashTransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/flv\":45}],71:[function(require,module,exports){\n(function (global){\n/**\n * @file html-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _virtualSourceBuffer = require('./virtual-source-buffer');\n\nvar _virtualSourceBuffer2 = _interopRequireDefault(_virtualSourceBuffer);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = (function (_videojs$EventTarget) {\n  _inherits(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, HtmlMediaSource);\n\n    _get(Object.getPrototypeOf(HtmlMediaSource.prototype), 'constructor', this).call(this);\n    var property = undefined;\n\n    this.nativeMediaSource_ = new _globalWindow2['default'].MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof this.nativeMediaSource_[property] === 'function') {\n        this[property] = this.nativeMediaSource_[property].bind(this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    this.duration_ = NaN;\n    Object.defineProperty(this, 'duration', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(this, 'seekable', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return _videoJs2['default'].createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(this, 'readyState', {\n      get: function get() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(this, 'activeSourceBuffers', {\n      get: function get() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    this.sourceBuffers = [];\n\n    this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          sourceBuffer.audioDisabled_ = disableAudioOnly;\n          if (disableAudioOnly) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = _globalDocument2['default'].querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = (0, _videoJs2['default'])(video.parentNode);\n\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    this.on('sourceended', function (event) {\n      var duration = (0, _addTextTrackData.durationOfVideo)(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      (0, _cleanupTextTracks.cleanupTextTracks)(this.player_);\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n      }\n    });\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  _createClass(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = undefined;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = undefined;\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = (0, _codecUtils.translateLegacyCodecs)(codecs);\n          codecs = codecs.filter(function (codec) {\n            return (0, _codecUtils.isAudioCodec)(codec) || (0, _codecUtils.isVideoCodec)(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new _virtualSourceBuffer2['default'](this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n\n  return HtmlMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = HtmlMediaSource;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./virtual-source-buffer\":75,\"global/document\":30,\"global/window\":31}],72:[function(require,module,exports){\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = undefined;\n  var cue = undefined;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\nexports[\"default\"] = removeCuesFromTrack;\nmodule.exports = exports[\"default\"];\n},{}],73:[function(require,module,exports){\n/**\n * @file transmuxer-worker.js\n */\n\n/**\n * videojs-contrib-media-sources\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Handles communication between the browser-world and the mux.js\n * transmuxer running inside of a WebWorker by exposing a simple\n * message-based interface to a Transmuxer object.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibMp4 = require('mux.js/lib/mp4');\n\nvar _muxJsLibMp42 = _interopRequireDefault(_muxJsLibMp4);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    // transfer ownership of the underlying ArrayBuffer\n    // instead of doing a copy to save memory\n    // ArrayBuffers are transferable but generic TypedArrays are not\n    // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n    var initArray = segment.initSegment;\n\n    segment.initSegment = {\n      data: initArray.buffer,\n      byteOffset: initArray.byteOffset,\n      byteLength: initArray.byteLength\n    };\n\n    var typedArray = segment.data;\n\n    segment.data = typedArray.buffer;\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment,\n      byteOffset: typedArray.byteOffset,\n      byteLength: typedArray.byteLength\n    }, [segment.data]);\n  });\n\n  if (transmuxer.captionStream) {\n    transmuxer.captionStream.on('data', function (caption) {\n      _globalWindow2['default'].postMessage({\n        action: 'caption',\n        data: caption\n      });\n    });\n  }\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibMp42['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n  }, {\n    key: 'setTimestampOffset',\n    value: function setTimestampOffset(data) {\n      var timestampOffset = data.timestampOffset || 0;\n\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n    }\n  }, {\n    key: 'setAudioAppendStart',\n    value: function setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n  }, {\n    key: 'flush',\n    value: function flush(data) {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar TransmuxerWorker = function TransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new TransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/mp4\":54}],74:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-media-sources.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _flashMediaSource = require('./flash-media-source');\n\nvar _flashMediaSource2 = _interopRequireDefault(_flashMediaSource);\n\nvar _htmlMediaSource = require('./html-media-source');\n\nvar _htmlMediaSource2 = _interopRequireDefault(_htmlMediaSource);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\nvar defaults = {\n  // how to determine the MediaSource implementation to use. There\n  // are three available modes:\n  // - auto: use native MediaSources where available and Flash\n  //   everywhere else\n  // - html5: always use native MediaSources\n  // - flash: always use the Flash MediaSource polyfill\n  mode: 'auto'\n};\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n_videoJs2['default'].mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = _videoJs2['default'].mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!_globalWindow2['default'].MediaSource && !!_globalWindow2['default'].MediaSource.isTypeSupported && _globalWindow2['default'].MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality such as flash and\n * video/mp2t videos. returns an instance of HtmlMediaSource or\n * FlashMediaSource depending on what is supported and what options\n * are passed in.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n * @param {Object} options options to use during setup.\n */\nvar MediaSource = function MediaSource(options) {\n  var settings = _videoJs2['default'].mergeOptions(defaults, options);\n\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  // determine whether HTML MediaSources should be used\n  if (settings.mode === 'html5' || settings.mode === 'auto' && supportsNativeMediaSources()) {\n    return new _htmlMediaSource2['default']();\n  } else if (_videoJs2['default'].getTech('Flash')) {\n    return new _flashMediaSource2['default']();\n  }\n\n  throw new Error('Cannot use Flash or Html5 to create a MediaSource for this video');\n};\n\nexports.MediaSource = MediaSource;\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = undefined;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof _htmlMediaSource2['default']) {\n      url = _globalWindow2['default'].URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof _flashMediaSource2['default'])) {\n      url = _globalWindow2['default'].URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    _videoJs2['default'].mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nexports.URL = URL;\n_videoJs2['default'].MediaSource = MediaSource;\n_videoJs2['default'].URL = URL;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./flash-media-source\":68,\"./html-media-source\":71,\"global/window\":31}],75:[function(require,module,exports){\n(function (global){\n/**\n * @file virtual-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _transmuxerWorker = require('./transmuxer-worker');\n\nvar _transmuxerWorker2 = _interopRequireDefault(_transmuxerWorker);\n\nvar _codecUtils = require('./codec-utils');\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function (key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get() {\n          return sourceBuffer[key];\n        },\n        set: function set(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    var _this = this;\n\n    _classCallCheck(this, VirtualSourceBuffer);\n\n    _get(Object.getPrototypeOf(VirtualSourceBuffer.prototype), 'constructor', this).call(this, _videoJs2['default'].EventTarget);\n    this.timestampOffset_ = 0;\n    this.pendingBuffers_ = [];\n    this.bufferUpdating_ = false;\n\n    this.mediaSource_ = mediaSource;\n    this.codecs_ = codecs;\n    this.audioCodec_ = null;\n    this.videoCodec_ = null;\n    this.audioDisabled_ = false;\n    this.appendAudioInitSegment_ = true;\n\n    var options = {\n      remux: false\n    };\n\n    this.codecs_.forEach(function (codec) {\n      if ((0, _codecUtils.isAudioCodec)(codec)) {\n        _this.audioCodec_ = codec;\n      } else if ((0, _codecUtils.isVideoCodec)(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    this.transmuxer_ = (0, _webworkify2['default'])(_transmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(this, 'appendWindowStart', {\n      get: function get() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(this, 'updating', {\n      get: function get() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        var start = null;\n        var end = null;\n        var arity = 0;\n        var extents = [];\n        var ranges = [];\n\n        // neither buffer has been created yet\n        if (!this.videoBuffer_ && !this.audioBuffer_) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // only one buffer is configured\n        if (!this.videoBuffer_) {\n          return this.audioBuffer_.buffered;\n        }\n        if (!this.audioBuffer_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are configured\n        if (this.audioDisabled_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are empty\n        if (this.videoBuffer_.buffered.length === 0 && this.audioBuffer_.buffered.length === 0) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // Handle the case where we have both buffers and create an\n        // intersection of the two\n        var videoBuffered = this.videoBuffer_.buffered;\n        var audioBuffered = this.audioBuffer_.buffered;\n        var count = videoBuffered.length;\n\n        // A) Gather up all start and end times\n        while (count--) {\n          extents.push({ time: videoBuffered.start(count), type: 'start' });\n          extents.push({ time: videoBuffered.end(count), type: 'end' });\n        }\n        count = audioBuffered.length;\n        while (count--) {\n          extents.push({ time: audioBuffered.start(count), type: 'start' });\n          extents.push({ time: audioBuffered.end(count), type: 'end' });\n        }\n        // B) Sort them by time\n        extents.sort(function (a, b) {\n          return a.time - b.time;\n        });\n\n        // C) Go along one by one incrementing arity for start and decrementing\n        //    arity for ends\n        for (count = 0; count < extents.length; count++) {\n          if (extents[count].type === 'start') {\n            arity++;\n\n            // D) If arity is ever incremented to 2 we are entering an\n            //    overlapping range\n            if (arity === 2) {\n              start = extents[count].time;\n            }\n          } else if (extents[count].type === 'end') {\n            arity--;\n\n            // E) If arity is ever decremented to 1 we leaving an\n            //    overlapping range\n            if (arity === 1) {\n              end = extents[count].time;\n            }\n          }\n\n          // F) Record overlapping ranges\n          if (start !== null && end !== null) {\n            ranges.push([start, end]);\n            start = null;\n            end = null;\n          }\n        }\n\n        return _videoJs2['default'].createTimeRanges(ranges);\n      }\n    });\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  _createClass(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        (0, _addTextTrackData.addTextTrackData)(this, sortedSegments.captions, sortedSegments.metadata);\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = undefined;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n\n  return VirtualSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = VirtualSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./codec-utils\":65,\"./create-text-tracks-if-necessary\":66,\"./remove-cues-from-track\":72,\"./transmuxer-worker\":73,\"webworkify\":76}],76:[function(require,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn) {\n    var keys = [];\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n    \n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        if (cache[key].exports === fn) {\n            wkey = key;\n            break;\n        }\n    }\n    \n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            Function(['require','module','exports'], '(' + fn + ')(self)'),\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n    \n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        Function(['require'],'require(' + stringify(wkey) + ')(self)'),\n        scache\n    ];\n    \n    var src = '(' + bundleFn + ')({'\n        + Object.keys(sources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n    \n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n    \n    return new Worker(URL.createObjectURL(\n        new Blob([src], { type: 'text/javascript' })\n    ));\n};\n\n},{}],77:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-hls.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-contrib-hls/blob/master/LICENSE\n */\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _xhr = require('./xhr');\n\nvar _xhr2 = _interopRequireDefault(_xhr);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\nvar _binUtils2 = _interopRequireDefault(_binUtils);\n\nvar _videojsContribMediaSources = require('videojs-contrib-media-sources');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _masterPlaylistController = require('./master-playlist-controller');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _renditionMixin = require('./rendition-mixin');\n\nvar _renditionMixin2 = _interopRequireDefault(_renditionMixin);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _playbackWatcher = require('./playback-watcher');\n\nvar _playbackWatcher2 = _interopRequireDefault(_playbackWatcher);\n\nvar _reloadSourceOnError = require('./reload-source-on-error');\n\nvar _reloadSourceOnError2 = _interopRequireDefault(_reloadSourceOnError);\n\nvar _playlistSelectorsJs = require('./playlist-selectors.js');\n\nvar Hls = {\n  PlaylistLoader: _playlistLoader2['default'],\n  Playlist: _playlist2['default'],\n  Decrypter: _aesDecrypter.Decrypter,\n  AsyncStream: _aesDecrypter.AsyncStream,\n  decrypt: _aesDecrypter.decrypt,\n  utils: _binUtils2['default'],\n\n  STANDARD_PLAYLIST_SELECTOR: _playlistSelectorsJs.lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: _playlistSelectorsJs.lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: _playlistSelectorsJs.comparePlaylistBandwidth,\n  comparePlaylistResolution: _playlistSelectorsJs.comparePlaylistResolution,\n\n  xhr: (0, _xhr2['default'])()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls, prop, {\n    get: function get() {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return _config2['default'][prop];\n    },\n    set: function set(value) {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        _videoJs2['default'].log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      _config2['default'][prop] = value;\n    }\n  });\n});\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls.canPlaySource = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls.supportsNativeHls = (function () {\n  var video = _globalDocument2['default'].createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!_videoJs2['default'].getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n})();\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls.isSupported = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar USER_AGENT = _globalWindow2['default'].navigator && _globalWindow2['default'].navigator.userAgent || '';\n\n/**\n * Determines whether the browser supports a change in the audio configuration\n * during playback. Currently only Firefox 48 and below do not support this.\n * window.isSecureContext is a propterty that was added to window in firefox 49,\n * so we can use it to detect Firefox 49+.\n *\n * @return {Boolean} Whether the browser supports audio config change during playback\n */\nHls.supportsAudioInfoChange_ = function () {\n  if (_videoJs2['default'].browser.IS_FIREFOX) {\n    var firefoxVersionMap = /Firefox\\/([\\d.]+)/i.exec(USER_AGENT);\n    var version = parseInt(firefoxVersionMap[1], 10);\n\n    return version >= 49;\n  }\n  return true;\n};\n\nvar Component = _videoJs2['default'].getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = (function (_Component) {\n  _inherits(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    var _this = this;\n\n    _classCallCheck(this, HlsHandler);\n\n    _get(Object.getPrototypeOf(HlsHandler.prototype), 'constructor', this).call(this, tech, options.hls);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = (0, _videoJs2['default'])(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get() {\n            _videoJs2['default'].log.warn('player.hls is deprecated. Use player.tech_.hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n    }\n\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n\n    // overriding native HLS only works if audio tracks have been emulated\n    // error early if we're misconfigured:\n    if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    this.on(_globalDocument2['default'], ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = _globalDocument2['default'].fullscreenElement || _globalDocument2['default'].webkitFullscreenElement || _globalDocument2['default'].mozFullScreenElement || _globalDocument2['default'].msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.fastQualityChange_();\n      }\n    });\n\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    this.audioTrackChange_ = function () {\n      _this.masterPlaylistController_.setupAudio();\n      _this.tech_.trigger({ type: 'usage', name: 'hls-audio-change' });\n    };\n\n    this.textTrackChange_ = function () {\n      _this.masterPlaylistController_.setupSubtitles();\n    };\n\n    this.on(this.tech_, 'play', this.play);\n  }\n\n  /**\n   * The Source Handler object, which informs video.js what additional\n   * MIME types are supported and sets up playback. It is registered\n   * automatically to the appropriate tech based on the capabilities of\n   * the browser it is running in. It is not necessary to use or modify\n   * this object in normal usage.\n   */\n\n  _createClass(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n  }, {\n    key: 'src',\n    value: function src(_src) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls;\n\n      this.masterPlaylistController_ = new _masterPlaylistController.MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new _playbackWatcher2['default'](_videoJs2['default'].mergeOptions(this.options_, {\n        seekable: function seekable() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = _videoJs2['default'].players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = undefined;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set() {\n            _videoJs2['default'].log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('sourceopen', function () {\n        _this3.tech_.audioTracks().addEventListener('change', _this3.audioTrackChange_);\n        _this3.tech_.remoteTextTracks().addEventListener('change', _this3.textTrackChange_);\n      });\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        (0, _renditionMixin2['default'])(_this3);\n      });\n\n      this.masterPlaylistController_.on('audioupdate', function () {\n        // clear current audioTracks\n        _this3.tech_.clearTracks('audio');\n        _this3.masterPlaylistController_.activeAudioGroup().forEach(function (audioTrack) {\n          _this3.tech_.audioTracks().addTrack(audioTrack);\n        });\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      // In the live case, we need to ignore the very first `seeking` event since\n      // that will be the result of the seek-to-live behavior\n      this.on(this.masterPlaylistController_, 'firstplay', function () {\n        this.ignoreNextSeekingEvent_ = true;\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(_videoJs2['default'].URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = _videoJs2['default'].players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * a helper for grabbing the active audio group from MasterPlaylistController\n     *\n     * @private\n     */\n  }, {\n    key: 'activeAudioGroup_',\n    value: function activeAudioGroup_() {\n      return this.masterPlaylistController_.activeAudioGroup();\n    }\n\n    /**\n     * Begin playing the video.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n    * Abort all outstanding work and cleanup.\n    */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      this.tech_.audioTracks().removeEventListener('change', this.audioTrackChange_);\n      this.tech_.remoteTextTracks().removeEventListener('change', this.textTrackChange_);\n      _get(Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n\n  return HlsHandler;\n})(Component);\n\nvar HlsSourceHandler = function HlsSourceHandler(mode) {\n  return {\n    canHandleSource: function canHandleSource(srcObj) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      // this forces video.js to skip this tech/mode if its not the one we have been\n      // overriden to use, by returing that we cannot handle the source.\n      if (localOptions.hls && localOptions.hls.mode && localOptions.hls.mode !== mode) {\n        return false;\n      }\n      return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n    },\n    handleSource: function handleSource(source, tech) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options, { hls: { mode: mode } });\n\n      if (mode === 'flash') {\n        // We need to trigger this asynchronously to give others the chance\n        // to bind to the event when a source is set at player creation\n        tech.setTimeout(function () {\n          tech.trigger('loadstart');\n        }, 1);\n      }\n\n      tech.hls = new HlsHandler(source, tech, localOptions);\n      tech.hls.xhr = (0, _xhr2['default'])();\n\n      tech.hls.src(source.src);\n      return tech.hls;\n    },\n    canPlayType: function canPlayType(type) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      if (HlsSourceHandler.canPlayType(type, localOptions)) {\n        return 'maybe';\n      }\n      return '';\n    }\n  };\n};\n\nHlsSourceHandler.canPlayType = function (type, options) {\n  // No support for IE 10 or below\n  if (_videoJs2['default'].browser.IE_VERSION && _videoJs2['default'].browser.IE_VERSION <= 10) {\n    return false;\n  }\n\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  // favor native HLS support if it's available\n  if (!options.hls.overrideNative && Hls.supportsNativeHls) {\n    return false;\n  }\n  return mpegurlRE.test(type);\n};\n\nif (typeof _videoJs2['default'].MediaSource === 'undefined' || typeof _videoJs2['default'].URL === 'undefined') {\n  _videoJs2['default'].MediaSource = _videojsContribMediaSources.MediaSource;\n  _videoJs2['default'].URL = _videojsContribMediaSources.URL;\n}\n\nvar flashTech = _videoJs2['default'].getTech('Flash');\n\n// register source handlers with the appropriate techs\nif (_videojsContribMediaSources.MediaSource.supportsNativeMediaSources()) {\n  _videoJs2['default'].getTech('Html5').registerSourceHandler(HlsSourceHandler('html5'), 0);\n}\nif (_globalWindow2['default'].Uint8Array && flashTech) {\n  flashTech.registerSourceHandler(HlsSourceHandler('flash'));\n}\n\n_videoJs2['default'].HlsHandler = HlsHandler;\n_videoJs2['default'].HlsSourceHandler = HlsSourceHandler;\n_videoJs2['default'].Hls = Hls;\nif (!_videoJs2['default'].use) {\n  _videoJs2['default'].registerComponent('Hls', Hls);\n}\n_videoJs2['default'].m3u8 = _m3u8Parser2['default'];\n_videoJs2['default'].options.hls = _videoJs2['default'].options.hls || {};\n\nif (_videoJs2['default'].registerPlugin) {\n  _videoJs2['default'].registerPlugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n} else {\n  _videoJs2['default'].plugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n}\n\nmodule.exports = {\n  Hls: Hls,\n  HlsHandler: HlsHandler,\n  HlsSourceHandler: HlsSourceHandler\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./master-playlist-controller\":5,\"./playback-watcher\":7,\"./playlist\":10,\"./playlist-loader\":8,\"./playlist-selectors.js\":9,\"./reload-source-on-error\":12,\"./rendition-mixin\":13,\"./xhr\":20,\"aes-decrypter\":24,\"global/document\":30,\"global/window\":31,\"m3u8-parser\":32,\"videojs-contrib-media-sources\":74}]},{},[77])(77)\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 161:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('mu-appbar', {\n    staticClass: \"fixed\",\n    attrs: {\n      \"title\": \"主播\"\n    }\n  }, [_c('mu-icon-button', {\n    attrs: {\n      \"icon\": \"arrow_back\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.goback()\n      }\n    },\n    slot: \"left\"\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"padding-top\": \"66px\"\n    }\n  }, [_c('mu-card', [_c('mu-card-media', [_c('div', {\n    staticClass: \"player\",\n    attrs: {\n      \"id\": \"player\"\n    }\n  }, [_c('video-player', {\n    ref: \"videoPlayer\",\n    staticClass: \"vjs-custom-skin\",\n    attrs: {\n      \"options\": _vm.playerOptions,\n      \"playsinline\": true\n    }\n  })], 1)])], 1), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"right\": \"0\"\n    },\n    attrs: {\n      \"id\": \"chatview\"\n    }\n  }, [_c('iframe', {\n    attrs: {\n      \"src\": _vm.chaturl,\n      \"width\": \"100%\",\n      \"height\": \"100%\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('mu-dialog', {\n    attrs: {\n      \"open\": _vm.dialog,\n      \"title\": \"广告\"\n    }\n  }, [_c('h3', [_vm._v(\"因用户网络环境的不同，以及当前用户数量，看片时有时候会出现缓冲加载时间较长，您可以直接点击播放减少缓冲时间，如果感觉不是很流畅，可以先尝试去看其他片子，稍后再试！\")]), _vm._v(\" \"), _c('mu-flat-button', {\n    attrs: {\n      \"label\": \"关闭\",\n      \"primary\": \"\"\n    },\n    on: {\n      \"click\": function () {\n        _vm.dialog = false\n      }\n    },\n    slot: \"actions\"\n  })], 1)], 1)\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.c8b46d2ef869a9188b19.js","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-4da5a97e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./LiveView.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./LiveView.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4da5a97e\\\"}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./LiveView.vue\"),\n  /* scopeId */\n  \"data-v-4da5a97e\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/LiveView.vue\n// module id = 107\n// module chunks = 0","<template>\n<div >\n   <mu-appbar class=\"fixed\" title=\"主播\">\n     <mu-icon-button icon=\"arrow_back\" slot=\"left\" @click=\"goback()\" />\n   </mu-appbar>\n<div style=\"padding-top:66px;\">\n <mu-card>\n   <mu-card-media >\n    <div id=\"player\" class=\"player\">\n          <video-player  class=\"vjs-custom-skin\"\n                         ref=\"videoPlayer\"\n                         :options=\"playerOptions\"\n                         :playsinline=\"true\">\n                       \n          </video-player>\n    </div>\n   \n  \n  </mu-card-media>\n </mu-card>\n <div id=\"chatview\" style=\"position:absolute;top:0;bottom:0;left:0;right:0;\">\n      <iframe :src=\"chaturl\" width=\"100%\" height=\"100%\"></iframe>\n  </div>\n</div>\n<mu-dialog :open=\"dialog\" title=\"广告\">\n    <h3>因用户网络环境的不同，以及当前用户数量，看片时有时候会出现缓冲加载时间较长，您可以直接点击播放减少缓冲时间，如果感觉不是很流畅，可以先尝试去看其他片子，稍后再试！</h3>\n    <mu-flat-button  label=\"关闭\" slot=\"actions\" primary @click=\"()=>{dialog=false}\"/>\n  </mu-dialog>\n</div>\n</template>\n<script >\n  require('videojs-contrib-hls/dist/videojs-contrib-hls')\n\n\texport default {\n\t\tname:'livevideo',\n\n    mounted(){\n\n        this.setplayer();\n    },\n\t\t\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tcurrentTab:'tab1',\n        dialog:false,\n        videoplayerurl:'',\n       \n        playerOptions:null\n\t\t\t}\n\t\t},\n   \n    beforeRouteEnter(to,from,next)\n    {\n      next(vm=>{\n        vm.setplayer()\n      })\n    },\n\n    beforeRouteLeave(to,from,next)\n    {\n       this.playerOptions=null;\n       next(true)\n     \n\n    },\n\t\tcomputed:{\n       videoObject() {\n        return this.$store.state.liveobj\n       },\n        chaturl(){\n        if(this.$store.state.loginedUser){\n          return \"http://104.201.54.66:8000?role=user&username=\"+this.$store.state.loginedUser.username\n        }\n        \n        return \"http://104.201.54.66:8000?role=guest&username=游客\"+Math.floor(Math.random()*100000)\n      }\n    },\n\t\tmethods: {\n     \n      setplayer(){\n           this.$http.get(this.$store.state.serverUrl+\"/live/?name=\"+this.videoObject.alt).then(response=>{\n            \n            var slist=[]\n            slist.push({type:\"application/x-mpegURL\",src:response.body,withCredentials: false})\n           \n            this.playerOptions={\n              aspectRatio:'16:9',\n              sources:slist,\n              controlBar: {\n              timeDivider: false,\n              durationDisplay: false\n          },       \n            }\n            //alert(slist[0].src)\n        document.getElementById(\"chatview\").style.top=66+document.getElementById(\"player\").offsetWidth*9/16+\"px\"\n\n           \n          },response=>{\n        \n          })\n\n      },\n     \n\t\t\tfetchData () {\n\t\t\t\talert('hello')\n\t\t\t},\n      handleTabChange (val) {\n        this.currentTab = val\n      },\n      goback()\n      {\n        this.$router.go(-1)\n      }\n     \n\n    } \n  }\n</script>\n<style scoped>\n  \n   .flex{\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n   }\n   \n   .desc-container{\n    height:100%;\n    overflow-y: scroll;\n   }\n   img {\n    width: 100%;\n   }\n   .fixed {\n    position:fixed;\n    top: 0;\n   }\n \n</style>\n\n\n// WEBPACK FOOTER //\n// LiveView.vue?47973540","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".flex[data-v-4da5a97e]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.desc-container[data-v-4da5a97e]{height:100%;overflow-y:scroll}img[data-v-4da5a97e]{width:100%}.fixed[data-v-4da5a97e]{position:fixed;top:0}\", \"\", {\"version\":3,\"sources\":[\"/Users/apple/mywebs/caitianxia/src/components/LiveView.vue\"],\"names\":[],\"mappings\":\"AACA,uBACC,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,4BAA6B,AAC7B,6BAA8B,AAC1B,0BAA2B,AACvB,sBAAuB,AAC/B,qBAAsB,AAClB,iBAAkB,AACtB,uBAAwB,AACpB,oBAAqB,AACjB,0BAA4B,CACpC,AACD,iCACC,YAAY,AACZ,iBAAmB,CACnB,AACD,qBACC,UAAY,CACZ,AACD,wBACC,eAAe,AACf,KAAO,CACP\",\"file\":\"LiveView.vue\",\"sourcesContent\":[\"\\n.flex[data-v-4da5a97e]{\\n display: -webkit-box;\\n display: -ms-flexbox;\\n display: flex;\\n -webkit-box-orient: vertical;\\n -webkit-box-direction: normal;\\n     -ms-flex-direction: column;\\n         flex-direction: column;\\n -ms-flex-wrap: nowrap;\\n     flex-wrap: nowrap;\\n -webkit-box-pack: start;\\n     -ms-flex-pack: start;\\n         justify-content: flex-start;\\n}\\n.desc-container[data-v-4da5a97e]{\\n height:100%;\\n overflow-y: scroll;\\n}\\nimg[data-v-4da5a97e] {\\n width: 100%;\\n}\\n.fixed[data-v-4da5a97e] {\\n position:fixed;\\n top: 0;\\n}\\n\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-4da5a97e\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/LiveView.vue\n// module id = 134\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-4da5a97e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./LiveView.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"df3203aa\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-4da5a97e\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/LiveView.vue\n// module id = 147\n// module chunks = 0","/**\n * videojs-contrib-hls\n * @version 5.10.0\n * @copyright 2017 Brightcove, Inc\n * @license Apache-2.0\n */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.videojsContribHls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file ad-cue-tags.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = undefined;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = undefined;\n        var adTotal = undefined;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$split$map = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$split$map2 = _slicedToArray(_segment$cueOutCont$split$map, 2);\n\n        adOffset = _segment$cueOutCont$split$map2[0];\n        adTotal = _segment$cueOutCont$split$map2[1];\n\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\nexports['default'] = {\n  updateAdCues: updateAdCues,\n  findAdCue: findAdCue\n};\nmodule.exports = exports['default'];\n},{\"global/window\":31}],2:[function(require,module,exports){\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar utils = {\n  hexDump: function hexDump(data) {\n    var bytes = Array.prototype.slice.call(data);\n    var step = 16;\n    var result = '';\n    var hex = undefined;\n    var ascii = undefined;\n\n    for (var j = 0; j < bytes.length / step; j++) {\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n      result += hex + ' ' + ascii + '\\n';\n    }\n    return result;\n  },\n  tagDump: function tagDump(tag) {\n    return utils.hexDump(tag.bytes);\n  },\n  textRanges: function textRanges(ranges) {\n    var result = '';\n    var i = undefined;\n\n    for (i = 0; i < ranges.length; i++) {\n      result += textRange(ranges, i) + ' ';\n    }\n    return result;\n  },\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId\n};\n\nexports['default'] = utils;\nmodule.exports = exports['default'];\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\nmodule.exports = exports[\"default\"];\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\n/**\n * Our web worker interface so that things can talk to aes-decrypter\n * that will be running in a web worker. the scope is passed to this by\n * webworkify.\n *\n * @param {Object} self\n *        the scope for the web worker\n */\nvar DecrypterWorker = function DecrypterWorker(self) {\n  self.onmessage = function (event) {\n    var data = event.data;\n    var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n    /* eslint-disable no-new, handle-callback-err */\n    new _aesDecrypter.Decrypter(encrypted, key, iv, function (err, bytes) {\n      _globalWindow2['default'].postMessage((0, _binUtils.createTransferableMessage)({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n};\n\nexports['default'] = function (self) {\n  return new DecrypterWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"./bin-utils\":2,\"aes-decrypter\":24,\"global/window\":31}],5:[function(require,module,exports){\n(function (global){\n/**\n * @file master-playlist-controller.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _vttSegmentLoader = require('./vtt-segment-loader');\n\nvar _vttSegmentLoader2 = _interopRequireDefault(_vttSegmentLoader);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _adCueTags = require('./ad-cue-tags');\n\nvar _adCueTags2 = _interopRequireDefault(_adCueTags);\n\nvar _syncController = require('./sync-controller');\n\nvar _syncController2 = _interopRequireDefault(_syncController);\n\nvar _videojsContribMediaSourcesEs5CodecUtils = require('videojs-contrib-media-sources/es5/codec-utils');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _decrypterWorker = require('./decrypter-worker');\n\nvar _decrypterWorker2 = _interopRequireDefault(_decrypterWorker);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = undefined;\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\n/**\n * determine if an object a is differnt from\n * and object b. both only having one dimensional\n * properties\n *\n * @param {Object} a object one\n * @param {Object} b object two\n * @return {Boolean} if the object has changed or not\n */\nvar objectChanged = function objectChanged(a, b) {\n  if (typeof a !== typeof b) {\n    return true;\n  }\n  // if we have a different number of elements\n  // something has changed\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return true;\n  }\n\n  for (var prop in a) {\n    if (a[prop] !== b[prop]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs_ = function mapLegacyAvcCodecs_(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return (0, _videojsContribMediaSourcesEs5CodecUtils.translateLegacyCodecs)([match])[0];\n  });\n};\n\nexports.mapLegacyAvcCodecs_ = mapLegacyAvcCodecs_;\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return (0, _utilCodecsJs.parseCodecs)(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist_ = function mimeTypesForPlaylist_(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        if (!audioGroup[groupId].uri) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    _videoJs2['default'].log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n    codecInfo.audioProfile = defaultCodecs.audioProfile;\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is ano video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\nexports.mimeTypesForPlaylist_ = mimeTypesForPlaylist_;\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\n\nvar MasterPlaylistController = (function (_videojs$EventTarget) {\n  _inherits(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    var _this = this;\n\n    _classCallCheck(this, MasterPlaylistController);\n\n    _get(Object.getPrototypeOf(MasterPlaylistController.prototype), 'constructor', this).call(this);\n\n    var url = options.url;\n    var withCredentials = options.withCredentials;\n    var mode = options.mode;\n    var tech = options.tech;\n    var bandwidth = options.bandwidth;\n    var externHls = options.externHls;\n    var useCueTags = options.useCueTags;\n    var blacklistDuration = options.blacklistDuration;\n    var enableLowInitialPlaylist = options.enableLowInitialPlaylist;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.hls_ = tech.hls;\n    this.mode_ = mode;\n    this.useCueTags_ = useCueTags;\n    this.blacklistDuration = blacklistDuration;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    this.requestOptions_ = {\n      withCredentials: this.withCredentials,\n      timeout: null\n    };\n\n    this.audioGroups_ = {};\n    this.subtitleGroups_ = { groups: {}, tracks: {} };\n    this.closedCaptionGroups_ = { groups: {}, tracks: {} };\n\n    this.mediaSource = new _videoJs2['default'].MediaSource({ mode: mode });\n    this.audioinfo_ = null;\n    this.mediaSource.on('audioinfo', this.handleAudioinfoUpdate_.bind(this));\n\n    // load the media source into the player\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_.bind(this));\n\n    this.seekable_ = _videoJs2['default'].createTimeRanges();\n    this.hasPlayed_ = function () {\n      return false;\n    };\n\n    this.syncController_ = new _syncController2['default'](options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    this.decrypter_ = (0, _webworkify2['default'])(_decrypterWorker2['default']);\n\n    var segmentLoaderSettings = {\n      hls: this.hls_,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: function seekable() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_\n    };\n\n    // setup playlist loaders\n    this.masterPlaylistLoader_ = new _playlistLoader2['default'](url, this.hls_, this.withCredentials);\n    this.setupMasterPlaylistLoaderListeners_();\n    this.audioPlaylistLoader_ = null;\n    this.subtitlePlaylistLoader_ = null;\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    this.mainSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    this.audioSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    this.subtitleSegmentLoader_ = new _vttSegmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    this.masterPlaylistLoader_.load();\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  _createClass(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        _this2.fillAudioTracks_();\n        _this2.setupAudio();\n\n        _this2.fillSubtitleTracks_();\n        _this2.setupSubtitles();\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n        _this2.fillClosedCaptionTracks_();\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          _videoJs2['default'].log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('audioupdate');\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          var selectedMedia = undefined;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n        }\n\n        if (!updatedPlaylist.endList) {\n          (function () {\n            var addSeekableRange = function addSeekableRange() {\n              var seekable = _this2.seekable();\n\n              if (seekable.length !== 0) {\n                _this2.mediaSource.addSeekableRange_(seekable.start(0), seekable.end(0));\n              }\n            };\n\n            if (_this2.duration() !== Infinity) {\n              (function () {\n                var onDurationchange = function onDurationchange() {\n                  if (_this2.duration() === Infinity) {\n                    addSeekableRange();\n                  } else {\n                    _this2.tech_.one('durationchange', onDurationchange);\n                  }\n                };\n\n                _this2.tech_.one('durationchange', onDurationchange);\n              })();\n            } else {\n              addSeekableRange();\n            }\n          })();\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n        var activeAudioGroup = undefined;\n        var activeTrack = undefined;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n        _this2.mainSegmentLoader_.load();\n\n        // if the audio group has changed, a new audio track has to be\n        // enabled\n        activeAudioGroup = _this2.activeAudioGroup();\n        activeTrack = activeAudioGroup.filter(function (track) {\n          return track.enabled;\n        })[0];\n        if (!activeTrack) {\n          _this2.mediaGroupChanged();\n          _this2.trigger('audioupdate');\n        }\n        _this2.setupSubtitles();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < _config2['default'].MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.audioSegmentLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered with the current alternate audio track' + '. Switching back to default.');\n        _this3.audioSegmentLoader_.abort();\n        _this3.audioPlaylistLoader_ = null;\n        _this3.setupAudio();\n      });\n\n      this.subtitleSegmentLoader_.on('error', this.handleSubtitleError_.bind(this));\n    }\n  }, {\n    key: 'handleAudioinfoUpdate_',\n    value: function handleAudioinfoUpdate_(event) {\n      if (Hls.supportsAudioInfoChange_() || !this.audioInfo_ || !objectChanged(this.audioInfo_, event.info)) {\n        this.audioInfo_ = event.info;\n        return;\n      }\n\n      var error = 'had different audio properties (channels, sample rate, etc.) ' + 'or changed in some other way.  This behavior is currently ' + 'unsupported in Firefox 48 and below due to an issue: \\n\\n' + 'https://bugzilla.mozilla.org/show_bug.cgi?id=1247138\\n\\n';\n\n      var enabledIndex = this.activeAudioGroup().map(function (track) {\n        return track.enabled;\n      }).indexOf(true);\n      var enabledTrack = this.activeAudioGroup()[enabledIndex];\n      var defaultTrack = this.activeAudioGroup().filter(function (track) {\n        return track.properties_ && track.properties_['default'];\n      })[0];\n\n      // they did not switch audiotracks\n      // blacklist the current playlist\n      if (!this.audioPlaylistLoader_) {\n        error = 'The rendition that we tried to switch to ' + error + 'Unfortunately that means we will have to blacklist ' + 'the current playlist and switch to another. Sorry!';\n        this.blacklistCurrentPlaylist();\n      } else {\n        error = 'The audio track \\'' + enabledTrack.label + '\\' that we tried to ' + ('switch to ' + error + ' Unfortunately this means we will have to ') + ('return you to the main track \\'' + defaultTrack.label + '\\'. Sorry!');\n        defaultTrack.enabled = true;\n        this.activeAudioGroup().splice(enabledIndex, 1);\n        this.trigger('audioupdate');\n      }\n\n      _videoJs2['default'].log.warn(error);\n      this.setupAudio();\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * fill our internal list of HlsAudioTracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillAudioTracks_',\n    value: function fillAudioTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      // force a default if we have none or we are not\n      // in html5 mode (the only mode to support more than one\n      // audio track)\n      if (!mediaGroups || !mediaGroups.AUDIO || Object.keys(mediaGroups.AUDIO).length === 0 || this.mode_ !== 'html5') {\n        // \"main\" audio group, track name \"default\"\n        mediaGroups.AUDIO = { main: { 'default': { 'default': true } } };\n      }\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        if (!this.audioGroups_[mediaGroup]) {\n          this.audioGroups_[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n          var track = new _videoJs2['default'].AudioTrack({\n            id: label,\n            kind: this.audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            label: label\n          });\n\n          track.properties_ = properties;\n          this.audioGroups_[mediaGroup].push(track);\n        }\n      }\n\n      // enable the default active track\n      (this.activeAudioGroup().filter(function (audioTrack) {\n        return audioTrack.properties_['default'];\n      })[0] || this.activeAudioGroup()[0]).enabled = true;\n    }\n\n    /**\n     * Convert the properties of an HLS track into an audioTrackKind.\n     *\n     * @private\n     */\n  }, {\n    key: 'audioTrackKind_',\n    value: function audioTrackKind_(properties) {\n      var kind = properties['default'] ? 'main' : 'alternative';\n\n      if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n        kind = 'main-desc';\n      }\n\n      return kind;\n    }\n\n    /**\n     * fill our internal list of Subtitle Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillSubtitleTracks_',\n    value: function fillSubtitleTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups.SUBTITLES) {\n        if (!this.subtitleGroups_.groups[mediaGroup]) {\n          this.subtitleGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.SUBTITLES[mediaGroup]) {\n          var properties = mediaGroups.SUBTITLES[mediaGroup][label];\n\n          if (!properties.forced) {\n            this.subtitleGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n            if (typeof this.subtitleGroups_.tracks[label] === 'undefined') {\n              var track = this.tech_.addRemoteTextTrack({\n                id: label,\n                kind: 'subtitles',\n                enabled: false,\n                language: properties.language,\n                label: label\n              }, false).track;\n\n              this.subtitleGroups_.tracks[label] = track;\n            }\n          }\n        }\n      }\n\n      // Do not enable a default subtitle track. Wait for user interaction instead.\n    }\n\n    /**\n     * fill our internal list of Captions Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillClosedCaptionTracks_',\n    value: function fillClosedCaptionTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups['CLOSED-CAPTIONS']) {\n        if (!this.closedCaptionGroups_.groups[mediaGroup]) {\n          this.closedCaptionGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups['CLOSED-CAPTIONS'][mediaGroup]) {\n          var properties = mediaGroups['CLOSED-CAPTIONS'][mediaGroup][label];\n\n          // We only support CEA608 captions for now, so ignore anything that\n          // doesn't use a CCx INSTREAM-ID\n          if (!properties.instreamId.match(/CC\\d/)) {\n            continue;\n          }\n\n          this.closedCaptionGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n          if (typeof this.closedCaptionGroups_.tracks[label] === 'undefined') {\n            var track = this.tech_.addRemoteTextTrack({\n              id: properties.instreamId,\n              kind: 'captions',\n              enabled: false,\n              language: properties.language,\n              label: label\n            }, false).track;\n\n            this.closedCaptionGroups_.tracks[label] = track;\n          }\n        }\n      }\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Returns the audio group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeAudioGroup',\n    value: function activeAudioGroup() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (videoPlaylist.attributes.AUDIO) {\n        result = this.audioGroups_[videoPlaylist.attributes.AUDIO];\n      }\n\n      return result || this.audioGroups_.main;\n    }\n\n    /**\n     * Returns the subtitle group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeSubtitleGroup_',\n    value: function activeSubtitleGroup_() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (!videoPlaylist) {\n        return null;\n      }\n\n      if (videoPlaylist.attributes.SUBTITLES) {\n        result = this.subtitleGroups_.groups[videoPlaylist.attributes.SUBTITLES];\n      }\n\n      return result || this.subtitleGroups_.groups.main;\n    }\n  }, {\n    key: 'activeSubtitleTrack_',\n    value: function activeSubtitleTrack_() {\n      for (var trackName in this.subtitleGroups_.tracks) {\n        if (this.subtitleGroups_.tracks[trackName].mode === 'showing') {\n          return this.subtitleGroups_.tracks[trackName];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: 'handleSubtitleError_',\n    value: function handleSubtitleError_() {\n      _videoJs2['default'].log.warn('Problem encountered loading the subtitle track' + '. Switching back to default.');\n\n      this.subtitleSegmentLoader_.abort();\n\n      var track = this.activeSubtitleTrack_();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      this.setupSubtitles();\n    }\n\n    /**\n     * Determine the correct audio renditions based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is only called when the media-group changes\n     * and performs non-destructive 'resync' of the SegmentLoader(s) since\n     * the playlist has likely changed\n     */\n  }, {\n    key: 'mediaGroupChanged',\n    value: function mediaGroupChanged() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resyncAudioLoaders_(track);\n    }\n\n    /**\n     * Determine the correct audio rendition based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default audio track and should be\n     * invoked again if the track is changed. Performs destructive 'reset'\n     * on the SegmentLoaders(s) to ensure we start loading audio as\n     * close to currentTime as possible\n     */\n  }, {\n    key: 'setupAudio',\n    value: function setupAudio() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resetAudioLoaders_(track);\n    }\n\n    /**\n     * Returns the currently active track or the default track if none\n     * are active\n     */\n  }, {\n    key: 'getActiveAudioTrack_',\n    value: function getActiveAudioTrack_() {\n      // determine whether seperate loaders are required for the audio\n      // rendition\n      var audioGroup = this.activeAudioGroup();\n      var track = audioGroup.filter(function (audioTrack) {\n        return audioTrack.enabled;\n      })[0];\n\n      if (!track) {\n        track = audioGroup.filter(function (audioTrack) {\n          return audioTrack.properties_['default'];\n        })[0] || audioGroup[0];\n        track.enabled = true;\n      }\n\n      return track;\n    }\n\n    /**\n     * Destroy the PlaylistLoader and pause the SegmentLoader specifically\n     * for audio when switching audio tracks\n     */\n  }, {\n    key: 'stopAudioLoaders_',\n    value: function stopAudioLoaders_() {\n      // stop playlist and segment loading for audio\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n        this.audioPlaylistLoader_ = null;\n      }\n      this.audioSegmentLoader_.pause();\n    }\n\n    /**\n     * Destructive reset of the mainSegmentLoader (when audio is muxed)\n     * or audioSegmentLoader (when audio is demuxed) to prepare them\n     * to start loading new data right at currentTime\n     */\n  }, {\n    key: 'resetAudioLoaders_',\n    value: function resetAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        this.mainSegmentLoader_.resetEverything();\n        return;\n      }\n\n      this.audioSegmentLoader_.resetEverything();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Non-destructive resync of the audioSegmentLoader (when audio\n     * is demuxed) to prepare to continue appending new audio data\n     * at the end of the current buffered region\n     */\n  }, {\n    key: 'resyncAudioLoaders_',\n    value: function resyncAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        return;\n      }\n\n      this.audioSegmentLoader_.resyncLoader();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Setup a new audioPlaylistLoader and start the audioSegmentLoader\n     * to begin loading demuxed audio\n     */\n  }, {\n    key: 'setupAudioPlaylistLoader_',\n    value: function setupAudioPlaylistLoader_(track) {\n      var _this4 = this;\n\n      // startup playlist and segment loaders for the enabled audio\n      // track\n      this.audioPlaylistLoader_ = new _playlistLoader2['default'](track.properties_.resolvedUri, this.hls_, this.withCredentials);\n      this.audioPlaylistLoader_.load();\n\n      this.audioPlaylistLoader_.on('loadedmetadata', function () {\n        var audioPlaylist = _this4.audioPlaylistLoader_.media();\n\n        _this4.audioSegmentLoader_.playlist(audioPlaylist, _this4.requestOptions_);\n\n        // if the video is already playing, or if this isn't a live video and preload\n        // permits, start downloading segments\n        if (!_this4.tech_.paused() || audioPlaylist.endList && _this4.tech_.preload() !== 'none') {\n          _this4.audioSegmentLoader_.load();\n        }\n\n        if (!audioPlaylist.endList) {\n          _this4.audioPlaylistLoader_.trigger('firstplay');\n        }\n      });\n\n      this.audioPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = undefined;\n\n        if (_this4.audioPlaylistLoader_) {\n          updatedPlaylist = _this4.audioPlaylistLoader_.media();\n        }\n\n        if (!updatedPlaylist) {\n          // only one playlist to select\n          _this4.audioPlaylistLoader_.media(_this4.audioPlaylistLoader_.playlists.master.playlists[0]);\n          return;\n        }\n\n        _this4.audioSegmentLoader_.playlist(updatedPlaylist, _this4.requestOptions_);\n      });\n\n      this.audioPlaylistLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered loading the alternate audio track' + '. Switching back to default.');\n        _this4.audioSegmentLoader_.abort();\n        _this4.setupAudio();\n      });\n    }\n\n    /**\n     * Determine the correct subtitle playlist based on the active\n     * SubtitleTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default subtitle track and should be\n     * invoked again if the track is changed.\n     */\n  }, {\n    key: 'setupSubtitles',\n    value: function setupSubtitles() {\n      var _this5 = this;\n\n      var subtitleGroup = this.activeSubtitleGroup_();\n      var track = this.activeSubtitleTrack_();\n\n      this.subtitleSegmentLoader_.pause();\n\n      if (!track) {\n        // stop playlist and segment loading for subtitles\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n          this.subtitlePlaylistLoader_ = null;\n        }\n        return;\n      }\n\n      var properties = subtitleGroup.filter(function (subtitleProperties) {\n        return subtitleProperties.id === track.id;\n      })[0];\n\n      // startup playlist and segment loaders for the enabled subtitle track\n      if (!this.subtitlePlaylistLoader_ ||\n      // if the media hasn't loaded yet, we don't have the URI to check, so it is\n      // easiest to simply recreate the playlist loader\n      !this.subtitlePlaylistLoader_.media() || this.subtitlePlaylistLoader_.media().resolvedUri !== properties.resolvedUri) {\n\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n        }\n\n        // reset the segment loader only when the subtitle playlist is changed instead of\n        // every time setupSubtitles is called since switching subtitle tracks fires\n        // multiple `change` events on the TextTrackList\n        this.subtitleSegmentLoader_.resetEverything();\n\n        // can't reuse playlistloader because we're only using single renditions and not a\n        // proper master\n        this.subtitlePlaylistLoader_ = new _playlistLoader2['default'](properties.resolvedUri, this.hls_, this.withCredentials);\n\n        this.subtitlePlaylistLoader_.on('loadedmetadata', function () {\n          var subtitlePlaylist = _this5.subtitlePlaylistLoader_.media();\n\n          _this5.subtitleSegmentLoader_.playlist(subtitlePlaylist, _this5.requestOptions_);\n          _this5.subtitleSegmentLoader_.track(_this5.activeSubtitleTrack_());\n\n          // if the video is already playing, or if this isn't a live video and preload\n          // permits, start downloading segments\n          if (!_this5.tech_.paused() || subtitlePlaylist.endList && _this5.tech_.preload() !== 'none') {\n            _this5.subtitleSegmentLoader_.load();\n          }\n        });\n\n        this.subtitlePlaylistLoader_.on('loadedplaylist', function () {\n          var updatedPlaylist = undefined;\n\n          if (_this5.subtitlePlaylistLoader_) {\n            updatedPlaylist = _this5.subtitlePlaylistLoader_.media();\n          }\n\n          if (!updatedPlaylist) {\n            return;\n          }\n\n          _this5.subtitleSegmentLoader_.playlist(updatedPlaylist, _this5.requestOptions_);\n        });\n\n        this.subtitlePlaylistLoader_.on('error', this.handleSubtitleError_.bind(this));\n      }\n\n      if (this.subtitlePlaylistLoader_.media() && this.subtitlePlaylistLoader_.media().resolvedUri === properties.resolvedUri) {\n        this.subtitleSegmentLoader_.load();\n      } else {\n        this.subtitlePlaylistLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method may perform destructive actions, like\n     * removing already buffered content, to readjust the currently\n     * active playlist quickly.\n     *\n     * @private\n     */\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Begin playback.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.tech_.setCurrentTime(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable.start(0)) {\n          return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var seekable = undefined;\n      var media = this.masterPlaylistLoader_.media();\n\n      // check that everything is ready to begin buffering in the live\n      // scenario\n      // 1) the active media playlist is available\n      if (media &&\n      // 2) the player is not paused\n      !this.tech_.paused() &&\n      // 3) the player has not started playing\n      !this.hasPlayed_()) {\n\n        // when the video is a live stream\n        if (!media.endList) {\n          this.trigger('firstplay');\n\n          // seek to the latest media position for live videos\n          seekable = this.seekable();\n          if (seekable.length) {\n            this.tech_.setCurrentTime(seekable.end(0));\n          }\n        }\n        this.hasPlayed_ = function () {\n          return true;\n        };\n        // now that we are ready, load the segment\n        this.load();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        _videoJs2['default'].log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        this.tech_.play();\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.audioPlaylistLoader_) {\n        // if the audio playlist loader exists, then alternate audio is active, so we need\n        // to wait for both the main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable = this.seekable();\n\n      if (!seekable.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and\n      // buffer has reached absolute end of playlist\n      return bufferedEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR && absolutePlaylistEnd - bufferedEnd <= _ranges2['default'].TIME_FUDGE_FACTOR;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist(error, blacklistDuration) {\n      if (error === undefined) error = {};\n\n      var currentPlaylist = undefined;\n      var nextPlaylist = undefined;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.isFinalRendition_();\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        _videoJs2['default'].log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + (blacklistDuration ? blacklistDuration : this.blacklistDuration) * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      _videoJs2['default'].log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = _ranges2['default'].findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks\n      var isFlash = this.mode_ === 'flash' || this.mode_ === 'auto' && !_videoJs2['default'].MediaSource.supportsNativeMediaSources();\n\n      // if the seek location is already buffered, continue buffering as\n      // usual\n      if (buffered && buffered.length && !isFlash) {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = undefined;\n      var audioSeekable = undefined;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.audioPlaylistLoader_) {\n        media = this.audioPlaylistLoader_.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = _videoJs2['default'].createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this6.mediaSource.duration = newDuration;\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitlePlaylistLoader_.dispose();\n      }\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = undefined;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist_(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n      this.mainSegmentLoader_.mimeType(mimeTypes[0]);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1]);\n      }\n\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var master = this.masterPlaylistLoader_.master;\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = undefined;\n\n      if (media.attributes.CODECS) {\n        codecs = (0, _utilCodecsJs.parseCodecs)(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n      master.playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          var codecString = variant.attributes.CODECS;\n\n          variantCodecs = (0, _utilCodecsJs.parseCodecs)(codecString);\n\n          if (window.MediaSource && window.MediaSource.isTypeSupported && !window.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs_(codecString) + '\"')) {\n            variant.excludeUntil = Infinity;\n          }\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable = this.seekable();\n\n      if (seekable.length) {\n        offset = seekable.start(0);\n      }\n\n      _adCueTags2['default'].updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].GOAL_BUFFER_LENGTH;\n      var rate = _config2['default'].GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].BUFFER_LOW_WATER_LINE;\n      var rate = _config2['default'].BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n\n  return MasterPlaylistController;\n})(_videoJs2['default'].EventTarget);\n\nexports.MasterPlaylistController = MasterPlaylistController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ad-cue-tags\":1,\"./config\":3,\"./decrypter-worker\":4,\"./playlist-loader\":8,\"./ranges\":11,\"./segment-loader\":15,\"./sync-controller\":17,\"./util/codecs.js\":18,\"./vtt-segment-loader\":19,\"videojs-contrib-media-sources/es5/codec-utils\":65,\"webworkify\":76}],6:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\nexports.REQUEST_ERRORS = REQUEST_ERRORS;\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = undefined;\n  var byterangeEnd = undefined;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr) {\n    xhr.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage((0, _binUtils.createTransferableMessage)({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = _videoJs2['default'].mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr, xhrOptions, decryptionWorker, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, finishProcessingFn);\n    var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, finishProcessingFn);\n  var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\nexports.mediaSegmentRequest = mediaSegmentRequest;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2}],7:[function(require,module,exports){\n(function (global){\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = (function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    _classCallCheck(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'playback-watcher ->');\n    }\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  _createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = _globalWindow2['default'].setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + 0.1 >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies (e.g. The Flash tech does not fire a `waiting` event when the end\n        // of the buffer is reached and has fallen off the live window). Calling\n        // `techWaiting_` here allows us to simulate responding to a native `waiting` event\n        // when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.outsideOfSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + _ranges2['default'].printableRange(seekable) + '. Seeking to ') + (seekableEnd + '.'));\n        this.tech_.setCurrentTime(seekableEnd);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = _ranges2['default'].findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.fellOutOfLiveWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'outsideOfSeekableWindow_',\n    value: function outsideOfSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n      if (currentTime < seekable.start(0) - 0.1 || currentTime > seekable.end(seekable.length - 1) + 0.1) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'fellOutOfLiveWindow_',\n    value: function fellOutOfLiveWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.tech_.setCurrentTime(nextRange.start(0) + _ranges2['default'].TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = _ranges2['default'].findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return PlaybackWatcher;\n})();\n\nexports['default'] = PlaybackWatcher;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ranges\":11,\"global/window\":31}],8:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _resolveUrl = require('./resolve-url');\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _playlistJs = require('./playlist.js');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n  var length = undefined;\n  var i = undefined;\n\n  offset = offset || 0;\n  length = Math.min(original.length, update.length + offset);\n\n  for (i = offset; i < length; i++) {\n    result[i - offset] = (0, _videoJs.mergeOptions)(original[i], result[i - offset]);\n  }\n  return result;\n};\n\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var changed = false;\n  var result = (0, _videoJs.mergeOptions)(master, {});\n  var i = master.playlists.length;\n  var playlist = undefined;\n  var segment = undefined;\n  var j = undefined;\n\n  while (i--) {\n    playlist = result.playlists[i];\n    if (playlist.uri === media.uri) {\n      // consider the playlist unchanged if the number of segments\n      // are equal and the media sequence number is unchanged\n      if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n        continue;\n      }\n\n      result.playlists[i] = (0, _videoJs.mergeOptions)(playlist, media);\n      result.playlists[media.uri] = result.playlists[i];\n\n      // if the update could overlap existing segment information,\n      // merge the two lists\n      if (playlist.segments) {\n        result.playlists[i].segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n      }\n      // resolve any missing segment and key URIs\n      j = 0;\n      if (result.playlists[i].segments) {\n        j = result.playlists[i].segments.length;\n      }\n      while (j--) {\n        segment = result.playlists[i].segments[j];\n        if (!segment.resolvedUri) {\n          segment.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.uri);\n        }\n        if (segment.key && !segment.key.resolvedUri) {\n          segment.key.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.key.uri);\n        }\n        if (segment.map && !segment.map.resolvedUri) {\n          segment.map.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.map.uri);\n        }\n      }\n      changed = true;\n    }\n  }\n  return changed ? result : null;\n};\n\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\nvar PlaylistLoader = function PlaylistLoader(srcUrl, hls, withCredentials) {\n  var _this = this;\n\n  /* eslint-disable consistent-this */\n  var loader = this;\n  /* eslint-enable consistent-this */\n  var mediaUpdateTimeout = undefined;\n  var request = undefined;\n  var playlistRequestError = undefined;\n  var haveMetadata = undefined;\n\n  PlaylistLoader.prototype.constructor.call(this);\n\n  this.hls_ = hls;\n\n  if (!srcUrl) {\n    throw new Error('A non-empty playlist URL is required');\n  }\n\n  playlistRequestError = function (xhr, url, startingState) {\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    if (startingState) {\n      loader.state = startingState;\n    }\n\n    loader.error = {\n      playlist: loader.master.playlists[url],\n      status: xhr.status,\n      message: 'HLS playlist request error at URL: ' + url,\n      responseText: xhr.responseText,\n      code: xhr.status >= 500 ? 4 : 2\n    };\n\n    loader.trigger('error');\n  };\n\n  // update the playlist loader's state in response to a new or\n  // updated playlist.\n  haveMetadata = function (xhr, url) {\n    var parser = undefined;\n    var refreshDelay = undefined;\n    var update = undefined;\n\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    loader.state = 'HAVE_METADATA';\n\n    parser = new _m3u8Parser2['default'].Parser();\n    parser.push(xhr.responseText);\n    parser.end();\n    parser.manifest.uri = url;\n    // m3u8-parser does not attach an attributes property to media playlists so make\n    // sure that the property is attached to avoid undefined reference errors\n    parser.manifest.attributes = parser.manifest.attributes || {};\n\n    // merge this playlist into the master\n    update = updateMaster(loader.master, parser.manifest);\n    refreshDelay = (parser.manifest.targetDuration || 10) * 1000;\n    loader.targetDuration = parser.manifest.targetDuration;\n    if (update) {\n      loader.master = update;\n      loader.media_ = loader.master.playlists[parser.manifest.uri];\n    } else {\n      // if the playlist is unchanged since the last reload,\n      // try again after half the target duration\n      refreshDelay /= 2;\n      loader.trigger('playlistunchanged');\n    }\n\n    // refresh live playlists after a target duration passes\n    if (!loader.media().endList) {\n      _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(function () {\n        loader.trigger('mediaupdatetimeout');\n      }, refreshDelay);\n    }\n\n    loader.trigger('loadedplaylist');\n  };\n\n  // initialize the loader state\n  loader.state = 'HAVE_NOTHING';\n\n  /**\n   * Abort any outstanding work and clean up.\n   */\n  loader.dispose = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    loader.off();\n  };\n\n  loader.stopRequest = function () {\n    if (request) {\n      var oldRequest = request;\n\n      request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  };\n\n  /**\n   * Returns the number of enabled playlists on the master playlist object\n   *\n   * @return {Number} number of eneabled playlists\n   */\n  loader.enabledPlaylists_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length;\n  };\n\n  /**\n   * Returns whether the current playlist is the lowest rendition\n   *\n   * @return {Boolean} true if on lowest rendition\n   */\n  loader.isLowestEnabledRendition_ = function () {\n    if (loader.master.playlists.length === 1) {\n      return true;\n    }\n\n    var media = loader.media();\n\n    var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n    return loader.master.playlists.filter(function (playlist) {\n      var enabled = (0, _playlistJs.isEnabled)(playlist);\n\n      if (!enabled) {\n        return false;\n      }\n\n      return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n    }).length === 0;\n  };\n\n  /**\n   * Returns whether the current playlist is the final available rendition\n   *\n   * @return {Boolean} true if on final rendition\n   */\n  loader.isFinalRendition_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length === 1;\n  };\n\n  /**\n   * When called without any arguments, returns the currently\n   * active media playlist. When called with a single argument,\n   * triggers the playlist loader to asynchronously switch to the\n   * specified media playlist. Calling this method while the\n   * loader is in the HAVE_NOTHING causes an error to be emitted\n   * but otherwise has no effect.\n   *\n   * @param {Object=} playlist the parsed media playlist\n   * object to switch to\n   * @return {Playlist} the current loaded media\n   */\n  loader.media = function (playlist) {\n    var startingState = loader.state;\n    var mediaChange = undefined;\n\n    // getter\n    if (!playlist) {\n      return loader.media_;\n    }\n\n    // setter\n    if (loader.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + loader.state);\n    }\n\n    // find the playlist object if the target playlist has been\n    // specified by URI\n    if (typeof playlist === 'string') {\n      if (!loader.master.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = loader.master.playlists[playlist];\n    }\n\n    mediaChange = !loader.media_ || playlist.uri !== loader.media_.uri;\n\n    // switch to fully loaded playlists immediately\n    if (loader.master.playlists[playlist.uri].endList) {\n      // abort outstanding playlist requests\n      if (request) {\n        request.onreadystatechange = null;\n        request.abort();\n        request = null;\n      }\n      loader.state = 'HAVE_METADATA';\n      loader.media_ = playlist;\n\n      // trigger media change if the active media has been updated\n      if (mediaChange) {\n        loader.trigger('mediachanging');\n        loader.trigger('mediachange');\n      }\n      return;\n    }\n\n    // switching to the active playlist is a no-op\n    if (!mediaChange) {\n      return;\n    }\n\n    loader.state = 'SWITCHING_MEDIA';\n\n    // there is already an outstanding playlist request\n    if (request) {\n      if ((0, _resolveUrl2['default'])(loader.master.uri, playlist.uri) === request.url) {\n        // requesting to switch to the same playlist multiple times\n        // has no effect after the first\n        return;\n      }\n      request.onreadystatechange = null;\n      request.abort();\n      request = null;\n    }\n\n    // request the new playlist\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, playlist.uri, startingState);\n      }\n\n      haveMetadata(req, playlist.uri);\n\n      // fire loadedmetadata the first time a media playlist is loaded\n      if (startingState === 'HAVE_MASTER') {\n        loader.trigger('loadedmetadata');\n      } else {\n        loader.trigger('mediachange');\n      }\n    });\n  };\n\n  /**\n   * set the bandwidth on an xhr to the bandwidth on the playlist\n   */\n  loader.setBandwidth = function (xhr) {\n    loader.bandwidth = xhr.bandwidth;\n  };\n\n  // live playlist staleness timeout\n  loader.on('mediaupdatetimeout', function () {\n    if (loader.state !== 'HAVE_METADATA') {\n      // only refresh the media playlist if no other activity is going on\n      return;\n    }\n\n    loader.state = 'HAVE_CURRENT_METADATA';\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, loader.media().uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, loader.media().uri, 'HAVE_METADATA');\n      }\n      haveMetadata(request, loader.media().uri);\n    });\n  });\n\n  // setup initial sync info\n  loader.on('firstplay', function () {\n    var playlist = loader.media();\n\n    if (playlist) {\n      playlist.syncInfo = {\n        mediaSequence: playlist.mediaSequence,\n        time: 0\n      };\n    }\n  });\n\n  /**\n   * pause loading of the playlist\n   */\n  loader.pause = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    if (loader.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      loader.started = false;\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.load = function (isFinalRendition) {\n    var media = loader.media();\n\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n\n    if (isFinalRendition) {\n      var refreshDelay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(loader.load.bind(null, false), refreshDelay);\n      return;\n    }\n\n    if (!loader.started) {\n      loader.start();\n      return;\n    }\n\n    if (media && !media.endList) {\n      loader.trigger('mediaupdatetimeout');\n    } else {\n      loader.trigger('loadedplaylist');\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.start = function () {\n    loader.started = true;\n\n    // request the specified URL\n    request = _this.hls_.xhr({\n      uri: srcUrl,\n      withCredentials: withCredentials\n    }, function (error, req) {\n      var parser = undefined;\n      var playlist = undefined;\n      var i = undefined;\n\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      // clear the loader's request reference\n      request = null;\n\n      if (error) {\n        loader.error = {\n          status: req.status,\n          message: 'HLS playlist request error at URL: ' + srcUrl,\n          responseText: req.responseText,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        };\n        if (loader.state === 'HAVE_NOTHING') {\n          loader.started = false;\n        }\n        return loader.trigger('error');\n      }\n\n      parser = new _m3u8Parser2['default'].Parser();\n      parser.push(req.responseText);\n      parser.end();\n\n      loader.state = 'HAVE_MASTER';\n\n      parser.manifest.uri = srcUrl;\n\n      // loaded a master playlist\n      if (parser.manifest.playlists) {\n        loader.master = parser.manifest;\n\n        // setup by-URI lookups and resolve media playlist URIs\n        i = loader.master.playlists.length;\n        while (i--) {\n          playlist = loader.master.playlists[i];\n          loader.master.playlists[playlist.uri] = playlist;\n          playlist.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri);\n\n          if (!playlist.attributes) {\n            // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n            // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n            // formatted master playlist may not have an attribute list. An attributes\n            // property is added here to prevent undefined references when we encounter\n            // this scenario.\n            playlist.attributes = {};\n\n            _videoJs.log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n          }\n        }\n\n        // resolve any media group URIs\n        ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n          for (var groupKey in loader.master.mediaGroups[mediaType]) {\n            for (var labelKey in loader.master.mediaGroups[mediaType][groupKey]) {\n              var mediaProperties = loader.master.mediaGroups[mediaType][groupKey][labelKey];\n\n              if (mediaProperties.uri) {\n                mediaProperties.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, mediaProperties.uri);\n              }\n            }\n          }\n        });\n\n        loader.trigger('loadedplaylist');\n        if (!request) {\n          // no media playlist was specifically selected so start\n          // from the first listed one\n          loader.media(parser.manifest.playlists[0]);\n        }\n        return;\n      }\n\n      // loaded a media playlist\n      // infer a master playlist if none was previously requested\n      loader.master = {\n        mediaGroups: {\n          'AUDIO': {},\n          'VIDEO': {},\n          'CLOSED-CAPTIONS': {},\n          'SUBTITLES': {}\n        },\n        uri: _globalWindow2['default'].location.href,\n        playlists: [{\n          uri: srcUrl\n        }]\n      };\n      loader.master.playlists[srcUrl] = loader.master.playlists[0];\n      loader.master.playlists[0].resolvedUri = srcUrl;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      loader.master.playlists[0].attributes = loader.master.playlists[0].attributes || {};\n      haveMetadata(req, srcUrl);\n      return loader.trigger('loadedmetadata');\n    });\n  };\n};\n\nPlaylistLoader.prototype = new _videoJs.EventTarget();\n\nexports['default'] = PlaylistLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist.js\":10,\"./resolve-url\":14,\"global/window\":31,\"m3u8-parser\":32}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = undefined;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = undefined;\n  var rightBandwidth = undefined;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\nexports.comparePlaylistBandwidth = comparePlaylistBandwidth;\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = undefined;\n  var rightWidth = undefined;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\nexports.comparePlaylistResolution = comparePlaylistResolution;\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = undefined;\n    var height = undefined;\n    var bandwidth = undefined;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return _playlist2['default'].isEnabled(rep.playlist);\n  });\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * _config2['default'].BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = undefined;\n  var resolutionPlusOneSmallest = undefined;\n  var resolutionPlusOneRep = undefined;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  return (resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || sortedPlaylistReps[0]).playlist;\n};\n\nexports.simpleSelector = simpleSelector;\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\nexports.lastBandwidthSelector = lastBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @param {Number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\nvar movingAverageBandwidthSelector = function movingAverageBandwidthSelector(decay) {\n  var average = -1;\n\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n\n  return function () {\n    if (average < 0) {\n      average = this.systemBandwidth;\n    }\n\n    average = decay * this.systemBandwidth + (1 - decay) * average;\n    return simpleSelector(this.playlists.master, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n  };\n};\n\nexports.movingAverageBandwidthSelector = movingAverageBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master;\n  var currentTime = settings.currentTime;\n  var bandwidth = settings.bandwidth;\n  var duration = settings.duration;\n  var segmentDuration = settings.segmentDuration;\n  var timeUntilRebuffer = settings.timeUntilRebuffer;\n  var currentTimeline = settings.currentTimeline;\n  var syncController = settings.syncController;\n\n  var bandwidthPlaylists = master.playlists.filter(function (playlist) {\n    return _playlist2['default'].isEnabled(playlist) && _playlist2['default'].hasAttribute('BANDWIDTH', playlist);\n  });\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\nexports.minRebufferMaxBandwidthSelector = minRebufferMaxBandwidthSelector;\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(_playlist2['default'].isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return (0, _utilCodecsJs.parseCodecs)(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\nexports.lowestBitrateCompatibleVariantSelector = lowestBitrateCompatibleVariantSelector;\n},{\"./config\":3,\"./playlist\":10,\"./util/codecs.js\":18}],10:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar Playlist = {\n  /**\n   * The number of segments that are unsafe to start playback at in\n   * a live stream. Changing this value can cause playback stalls.\n   * See HTTP Live Streaming, \"Playing the Media Playlist File\"\n   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-18#section-6.3.3\n   */\n  UNSAFE_LIVE_SEGMENTS: 3\n};\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = undefined;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = undefined;\n  var forward = undefined;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return _globalWindow2['default'].Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\nexports.duration = duration;\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var i = startIndex; i < endIndex; i++) {\n    durations += playlist.segments[i].duration;\n  }\n\n  return durations;\n};\n\nexports.sumDurations = sumDurations;\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? Math.max(0, playlist.segments.length - Playlist.UNSAFE_LIVE_SEGMENTS) : Math.max(0, playlist.segments.length);\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\nexports.playlistEnd = playlistEnd;\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return (0, _videoJs.createTimeRange)();\n  }\n  return (0, _videoJs.createTimeRange)(seekableStart, seekableEnd);\n};\n\nexports.seekable = seekable;\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = undefined;\n  var segment = undefined;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\nexports.getMediaInfoForTime = getMediaInfoForTime;\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\nexports.isBlacklisted = isBlacklisted;\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\nexports.isEnabled = isEnabled;\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isAes = isAes;\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isFmp4 = isFmp4;\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\nexports.hasAttribute = hasAttribute;\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\nexports.estimateSegmentRequestTime = estimateSegmentRequestTime;\nPlaylist.duration = duration;\nPlaylist.seekable = seekable;\nPlaylist.getMediaInfoForTime = getMediaInfoForTime;\nPlaylist.isEnabled = isEnabled;\nPlaylist.isBlacklisted = isBlacklisted;\nPlaylist.playlistEnd = playlistEnd;\nPlaylist.isAes = isAes;\nPlaylist.isFmp4 = isFmp4;\nPlaylist.hasAttribute = hasAttribute;\nPlaylist.estimateSegmentRequestTime = estimateSegmentRequestTime;\n\n// exports\nexports['default'] = Playlist;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],11:[function(require,module,exports){\n(function (global){\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n\n/**\n * Clamps a value to within a range\n * @param {Number} num - the value to clamp\n * @param {Number} start - the start of the range to clamp within, inclusive\n * @param {Number} end - the end of the range to clamp within, inclusive\n * @return {Number}\n */\nvar clamp = function clamp(num, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var start = _ref2[0];\n  var end = _ref2[1];\n\n  return Math.min(Math.max(start, num), end);\n};\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = undefined;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return _videoJs2['default'].createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Search for a likely end time for the segment that was just appened\n * based on the state of the `buffered` property before and after the\n * append. If we fin only one such uncommon end-point return it.\n * @param {TimeRanges} original - the buffered time ranges before the update\n * @param {TimeRanges} update - the buffered time ranges after the update\n * @returns {Number|null} the end time added between `original` and `update`,\n * or null if one cannot be unambiguously determined.\n */\nvar findSoleUncommonTimeRangesEnd = function findSoleUncommonTimeRangesEnd(original, update) {\n  var i = undefined;\n  var start = undefined;\n  var end = undefined;\n  var result = [];\n  var edges = [];\n\n  // In order to qualify as a possible candidate, the end point must:\n  //  1) Not have already existed in the `original` ranges\n  //  2) Not result from the shrinking of a range that already existed\n  //     in the `original` ranges\n  //  3) Not be contained inside of a range that existed in `original`\n  var overlapsCurrentEnd = function overlapsCurrentEnd(span) {\n    return span[0] <= end && span[1] >= end;\n  };\n\n  if (original) {\n    // Save all the edges in the `original` TimeRanges object\n    for (i = 0; i < original.length; i++) {\n      start = original.start(i);\n      end = original.end(i);\n\n      edges.push([start, end]);\n    }\n  }\n\n  if (update) {\n    // Save any end-points in `update` that are not in the `original`\n    // TimeRanges object\n    for (i = 0; i < update.length; i++) {\n      start = update.start(i);\n      end = update.end(i);\n\n      if (edges.some(overlapsCurrentEnd)) {\n        continue;\n      }\n\n      // at this point it must be a unique non-shrinking end edge\n      result.push(end);\n    }\n  }\n\n  // we err on the side of caution and return null if didn't find\n  // exactly *one* differing end edge in the search above\n  if (result.length !== 1) {\n    return null;\n  }\n\n  return result[0];\n};\n\n/**\n * Calculate the intersection of two TimeRanges\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @returns {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\nvar bufferIntersection = function bufferIntersection(bufferA, bufferB) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return _videoJs2['default'].createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var count = bufferA.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: bufferA.start(count), type: 'start' });\n    extents.push({ time: bufferA.end(count), type: 'end' });\n  }\n  count = bufferB.length;\n  while (count--) {\n    extents.push({ time: bufferB.start(count), type: 'start' });\n    extents.push({ time: bufferB.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Calculates the percentage of `segmentRange` that overlaps the\n * `buffered` time ranges.\n * @param {TimeRanges} segmentRange - the time range that the segment\n * covers adjusted according to currentTime\n * @param {TimeRanges} referenceRange - the original time range that the\n * segment covers\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the currently buffered time ranges\n * @returns {Number} percent of the segment currently buffered\n */\nvar calculateBufferedPercent = function calculateBufferedPercent(adjustedRange, referenceRange, currentTime, buffered) {\n  var referenceDuration = referenceRange.end(0) - referenceRange.start(0);\n  var adjustedDuration = adjustedRange.end(0) - adjustedRange.start(0);\n  var bufferMissingFromAdjusted = referenceDuration - adjustedDuration;\n  var adjustedIntersection = bufferIntersection(adjustedRange, buffered);\n  var referenceIntersection = bufferIntersection(referenceRange, buffered);\n  var adjustedOverlap = 0;\n  var referenceOverlap = 0;\n\n  var count = adjustedIntersection.length;\n\n  while (count--) {\n    adjustedOverlap += adjustedIntersection.end(count) - adjustedIntersection.start(count);\n\n    // If the current overlap segment starts at currentTime, then increase the\n    // overlap duration so that it actually starts at the beginning of referenceRange\n    // by including the difference between the two Range's durations\n    // This is a work around for the way Flash has no buffer before currentTime\n    if (adjustedIntersection.start(count) === currentTime) {\n      adjustedOverlap += bufferMissingFromAdjusted;\n    }\n  }\n\n  count = referenceIntersection.length;\n\n  while (count--) {\n    referenceOverlap += referenceIntersection.end(count) - referenceIntersection.start(count);\n  }\n\n  // Use whichever value is larger for the percentage-buffered since that value\n  // is likely more accurate because the only way\n  return Math.max(adjustedOverlap, referenceOverlap) / referenceDuration * 100;\n};\n\n/**\n * Return the amount of a range specified by the startOfSegment and segmentDuration\n * overlaps the current buffered content.\n *\n * @param {Number} startOfSegment - the time where the segment begins\n * @param {Number} segmentDuration - the duration of the segment in seconds\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the state of the buffer\n * @returns {Number} percentage of the segment's time range that is\n * already in `buffered`\n */\nvar getSegmentBufferedPercent = function getSegmentBufferedPercent(startOfSegment, segmentDuration, currentTime, buffered) {\n  var endOfSegment = startOfSegment + segmentDuration;\n\n  // The entire time range of the segment\n  var originalSegmentRange = _videoJs2['default'].createTimeRanges([[startOfSegment, endOfSegment]]);\n\n  // The adjusted segment time range that is setup such that it starts\n  // no earlier than currentTime\n  // Flash has no notion of a back-buffer so adjustedSegmentRange adjusts\n  // for that and the function will still return 100% if a only half of a\n  // segment is actually in the buffer as long as the currentTime is also\n  // half-way through the segment\n  var adjustedSegmentRange = _videoJs2['default'].createTimeRanges([[clamp(startOfSegment, [currentTime, endOfSegment]), endOfSegment]]);\n\n  // This condition happens when the currentTime is beyond the segment's\n  // end time\n  if (adjustedSegmentRange.start(0) === adjustedSegmentRange.end(0)) {\n    return 0;\n  }\n\n  var percent = calculateBufferedPercent(adjustedSegmentRange, originalSegmentRange, currentTime, buffered);\n\n  // If the segment is reported as having a zero duration, return 0%\n  // since it is likely that we will need to fetch the segment\n  if (isNaN(percent) || percent === Infinity || percent === -Infinity) {\n    return 0;\n  }\n\n  return percent;\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\nexports['default'] = {\n  findRange: findRange,\n  findNextRange: findNextRange,\n  findGaps: findGaps,\n  findSoleUncommonTimeRangesEnd: findSoleUncommonTimeRangesEnd,\n  getSegmentBufferedPercent: getSegmentBufferedPercent,\n  TIME_FUDGE_FACTOR: TIME_FUDGE_FACTOR,\n  printableRange: printableRange,\n  timeUntilRebuffer: timeUntilRebuffer\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],12:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = _videoJs2['default'].mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      _videoJs2['default'].log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nexports['default'] = reloadSourceOnError;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _playlistJs = require('./playlist.js');\n\n/**\n * Enable/disable playlist function. It is intended to have the first two\n * arguments partially-applied in order to create the final per-playlist\n * function.\n *\n * @param {PlaylistLoader} playlist - The rendition or media-playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Boolean} The current enabled-state of the playlist\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn, enable) {\n  var playlist = loader.master.playlists[playlistUri];\n  var blacklisted = (0, _playlistJs.isBlacklisted)(playlist);\n  var currentlyEnabled = (0, _playlistJs.isEnabled)(playlist);\n\n  if (typeof enable === 'undefined') {\n    return currentlyEnabled;\n  }\n\n  if (enable) {\n    delete playlist.disabled;\n  } else {\n    playlist.disabled = true;\n  }\n\n  if (enable !== currentlyEnabled && !blacklisted) {\n    // Ensure the outside world knows about our changes\n    changePlaylistFn();\n    if (enable) {\n      loader.trigger('renditionenabled');\n    } else {\n      loader.trigger('renditiondisabled');\n    }\n  }\n  return enable;\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  _classCallCheck(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction.bind(this, hlsHandler.playlists, playlist.uri, fastChangeFunction);\n}\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n;\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !(0, _playlistJs.isBlacklisted)(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\nexports['default'] = renditionSelectionMixin;\nmodule.exports = exports['default'];\n},{\"./playlist.js\":10}],14:[function(require,module,exports){\n/**\n * @file resolve-url.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _urlToolkit = require('url-toolkit');\n\nvar _urlToolkit2 = _interopRequireDefault(_urlToolkit);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = _urlToolkit2['default'].buildAbsoluteURL(_globalWindow2['default'].location.href, baseURL);\n  }\n\n  return _urlToolkit2['default'].buildAbsoluteURL(baseURL, relativeURL);\n};\n\nexports['default'] = resolveUrl;\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"url-toolkit\":62}],15:[function(require,module,exports){\n(function (global){\n/**\n * @file segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _sourceUpdater = require('./source-updater');\n\nvar _sourceUpdater2 = _interopRequireDefault(_sourceUpdater);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar _mediaSegmentRequest = require('./media-segment-request');\n\nvar _ranges = require('./ranges');\n\nvar _playlistSelectors = require('./playlist-selectors');\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = (function (_videojs$EventTarget) {\n  _inherits(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    var _this = this;\n\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, SegmentLoader);\n\n    _get(Object.getPrototypeOf(SegmentLoader.prototype), 'constructor', this).call(this);\n    // check pre-conditions\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    this.state = 'INIT';\n    this.bandwidth = settings.bandwidth;\n    this.throughput = { rate: 0, count: 0 };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n\n    // private settings\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.hls_ = settings.hls;\n    this.loaderType_ = settings.loaderType;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n\n    // private instance variables\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.pendingSegment_ = null;\n    this.mimeType_ = null;\n    this.sourceUpdater_ = null;\n    this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {};\n\n    this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    this.fetchAtBuffer_ = false;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'segment-loader', this.loaderType_, '->');\n    }\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  _createClass(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new _sourceUpdater2['default'](this.mediaSource_, this.mimeType_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('mediaSequenceDiff', mediaSequenceDiff);\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     */\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     */\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything() {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_());\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end);\n      }\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = undefined;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      this.logger_('checkBuffer_', 'mediaIndex:', mediaIndex, 'hasPlayed:', hasPlayed, 'currentTime:', currentTime, 'syncPoint:', syncPoint, 'fetchAtBuffer:', this.fetchAtBuffer_, 'bufferedTime:', bufferedTime);\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        this.logger_('getSync', 'mediaIndex:', mediaIndex);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        this.logger_('walkForward', 'mediaIndex:', mediaIndex + 1);\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      }\n      this.logger_('getMediaIndexForTime', 'mediaIndex:', mediaIndex, 'startOfSegment:', startOfSegment);\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer = (0, _ranges.timeUntilRebuffer)(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer) {\n        return false;\n      }\n\n      var switchCandidate = (0, _playlistSelectors.minRebufferMaxBandwidthSelector)({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer <= _ranges.TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * _config2['default'].BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = (0, _mediaSegmentRequest.mediaSegmentRequest)(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var seekable = this.seekable_();\n      var currentTime = this.currentTime_();\n      var removeToTime = 0;\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      // If we have a seekable range use that as the limit for what can be removed safely\n      // otherwise remove anything older than 30 seconds before the current play head\n      if (seekable.length && seekable.start(0) > 0 && seekable.start(0) < currentTime) {\n        removeToTime = seekable.start(0);\n      } else {\n        removeToTime = currentTime - 30;\n      }\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      this.syncController_.probeSegmentInfo(segmentInfo);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        (function () {\n          var initId = (0, _binUtils.initSegmentId)(segment.map);\n\n          if (!_this3.activeInitSegmentId_ || _this3.activeInitSegmentId_ !== initId) {\n            var initSegment = _this3.initSegment(segment.map);\n\n            _this3.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n              _this3.activeInitSegmentId_ = initId;\n            });\n          }\n        })();\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      this.logger_('handleUpdateEnd_', 'segmentInfo:', this.pendingSegment_);\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n\n      var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n      var value = {\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n\n  return SegmentLoader;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./media-segment-request\":6,\"./playlist\":10,\"./playlist-selectors\":9,\"./ranges\":11,\"./source-updater\":16,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],16:[function(require,module,exports){\n(function (global){\n/**\n * @file source-updater.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar noop = function noop() {};\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n */\n\nvar SourceUpdater = (function () {\n  function SourceUpdater(mediaSource, mimeType) {\n    var _this = this;\n\n    _classCallCheck(this, SourceUpdater);\n\n    var createSourceBuffer = function createSourceBuffer() {\n      _this.sourceBuffer_ = mediaSource.addSourceBuffer(mimeType);\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      _this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this.pendingCallback_;\n\n        _this.pendingCallback_ = null;\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this.runCallback_();\n      };\n\n      _this.sourceBuffer_.addEventListener('updateend', _this.onUpdateendCallback_);\n\n      _this.runCallback_();\n    };\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', createSourceBuffer);\n    } else {\n      createSourceBuffer();\n    }\n  }\n\n  /**\n   * Aborts the current segment and resets the segment parser.\n   *\n   * @param {Function} done function to call when done\n   * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n   */\n\n  _createClass(SourceUpdater, [{\n    key: 'abort',\n    value: function abort(done) {\n      var _this2 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this2.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this3 = this;\n\n      this.processedAppend_ = true;\n\n      this.queueCallback_(function () {\n        _this3.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this4 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this4.sourceBuffer_.remove(start, end);\n        }, noop);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this5 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this5.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = undefined;\n\n      if (!this.updating() && this.callbacks_.length) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n\n  return SourceUpdater;\n})();\n\nexports['default'] = SourceUpdater;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],17:[function(require,module,exports){\n(function (global){\n/**\n * @file sync-controller.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _muxJsLibMp4Probe = require('mux.js/lib/mp4/probe');\n\nvar _muxJsLibMp4Probe2 = _interopRequireDefault(_muxJsLibMp4Probe);\n\nvar _muxJsLibToolsTsInspectorJs = require('mux.js/lib/tools/ts-inspector.js');\n\nvar _playlist = require('./playlist');\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (duration !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (syncController.datetimeToDisplayTime && playlist.dateTimeObject) {\n      var playlistTime = playlist.dateTimeObject.getTime() / 1000;\n      var playlistStart = playlistTime + syncController.datetimeToDisplayTime;\n      var syncPoint = {\n        time: playlistStart,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nexports.syncPointStrategies = syncPointStrategies;\n\nvar SyncController = (function (_videojs$EventTarget) {\n  _inherits(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, SyncController);\n\n    _get(Object.getPrototypeOf(SyncController.prototype), 'constructor', this).call(this);\n    // Segment Loader state variables...\n    // ...for synching across variants\n    this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    this.timelines = [];\n    this.discontinuities = [];\n    this.datetimeToDisplayTime = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'sync-controller ->');\n    }\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  _createClass(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + (0, _playlist.sumDurations)(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n          this.logger_('syncPoint found via <' + strategy.name + '>:', syncPoint);\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint with strategy <' + bestStrategy + '> chosen: ', bestSyncPoint);\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist sync:', newPlaylist.syncInfo);\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.dateTimeObject) {\n        var playlistTimestamp = playlist.dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timingInfo = undefined;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n        }\n      }\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = _muxJsLibMp4Probe2['default'].timescale(segment.map.bytes);\n      var startTime = _muxJsLibMp4Probe2['default'].startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = (0, _muxJsLibToolsTsInspectorJs.inspect)(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = undefined;\n      var segmentEndTime = undefined;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        this.logger_('tsO:', segmentInfo.timestampOffset);\n\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = undefined;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return SyncController;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SyncController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist\":10,\"mux.js/lib/mp4/probe\":56,\"mux.js/lib/tools/ts-inspector.js\":58}],18:[function(require,module,exports){\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = undefined;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc1)([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\nexports.parseCodecs = parseCodecs;\n},{}],19:[function(require,module,exports){\n(function (global){\n/**\n * @file vtt-segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\nvar uintToString = function uintToString(uintArray) {\n  return String.fromCharCode.apply(null, uintArray);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = (function (_SegmentLoader) {\n  _inherits(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, VTTSegmentLoader);\n\n    _get(Object.getPrototypeOf(VTTSegmentLoader.prototype), 'constructor', this).call(this, settings, options);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    this.mediaSource_ = null;\n\n    this.subtitlesTrack_ = null;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  _createClass(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return _videoJs2['default'].createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack} track\n     *        The text track to add loaded subtitles to\n     */\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this.state = 'READY';\n          if (!_this.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this2 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof _globalWindow2['default'].WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n        var _ret = (function () {\n\n          var loadHandler = function loadHandler() {\n            _this2.handleSegment_();\n          };\n\n          _this2.state = 'WAITING_ON_VTTJS';\n          _this2.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n          _this2.subtitlesTrack_.tech_.one('vttjserror', function () {\n            _this2.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n            _this2.error({\n              message: 'Error loading vtt.js'\n            });\n            _this2.state = 'READY';\n            _this2.pause();\n            _this2.trigger('error');\n          });\n\n          return {\n            v: undefined\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this2.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = undefined;\n      var decodeBytesToString = false;\n\n      if (typeof _globalWindow2['default'].TextDecoder === 'function') {\n        decoder = new _globalWindow2['default'].TextDecoder('utf8');\n      } else {\n        decoder = _globalWindow2['default'].WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        _videoJs2['default'].log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uintToString(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uintToString(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n\n  return VTTSegmentLoader;\n})(_segmentLoader2['default']);\n\nexports['default'] = VTTSegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./segment-loader\":15,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],20:[function(require,module,exports){\n(function (global){\n/**\n * @file xhr.js\n */\n\n/**\n * A wrapper for videojs.xhr that tracks bandwidth.\n *\n * @param {Object} options options for the XHR\n * @param {Function} callback the callback to call when done\n * @return {Request} the xhr request that is going to be made\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar xhrFactory = function xhrFactory() {\n  var xhr = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = (0, _videoJs.mergeOptions)({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || _videoJs2['default'].Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = (0, _videoJs.xhr)(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr;\n};\n\nexports['default'] = xhrFactory;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],21:[function(require,module,exports){\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = undefined;\n  var x = undefined;\n  var xInv = undefined;\n  var d = [];\n  var th = [];\n  var x2 = undefined;\n  var x4 = undefined;\n  var x8 = undefined;\n  var s = undefined;\n  var tEnc = undefined;\n  var tDec = undefined;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = (function () {\n  function AES(key) {\n    _classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = undefined;\n    var j = undefined;\n    var tmp = undefined;\n    var encKey = undefined;\n    var decKey = undefined;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n  _createClass(AES, [{\n    key: 'decrypt',\n    value: function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      var key = this._key[1];\n      // state variables a,b,c,d are loaded with pre-whitened data\n      var a = encrypted0 ^ key[0];\n      var b = encrypted3 ^ key[1];\n      var c = encrypted2 ^ key[2];\n      var d = encrypted1 ^ key[3];\n      var a2 = undefined;\n      var b2 = undefined;\n      var c2 = undefined;\n\n      // key.length === 2 ?\n      var nInnerRounds = key.length / 4 - 2;\n      var i = undefined;\n      var kIndex = 4;\n      var table = this._tables[1];\n\n      // load up the tables\n      var table0 = table[0];\n      var table1 = table[1];\n      var table2 = table[2];\n      var table3 = table[3];\n      var sbox = table[4];\n\n      // Inner rounds. Cribbed from OpenSSL.\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;b = b2;c = c2;\n      }\n\n      // Last round.\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;a = b;b = c;c = d;d = a2;\n      }\n    }\n  }]);\n\n  return AES;\n})();\n\nexports['default'] = AES;\nmodule.exports = exports['default'];\n},{}],22:[function(require,module,exports){\n/**\n * @file async-stream.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = (function (_Stream) {\n  _inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    _classCallCheck(this, AsyncStream);\n\n    _get(Object.getPrototypeOf(AsyncStream.prototype), 'constructor', this).call(this, _stream2['default']);\n    this.jobs = [];\n    this.delay = 1;\n    this.timeout_ = null;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n  _createClass(AsyncStream, [{\n    key: 'processJob_',\n    value: function processJob_() {\n      this.jobs.shift()();\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n  }, {\n    key: 'push',\n    value: function push(job) {\n      this.jobs.push(job);\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n  }]);\n\n  return AsyncStream;\n})(_stream2['default']);\n\nexports['default'] = AsyncStream;\nmodule.exports = exports['default'];\n},{\"./stream\":25}],23:[function(require,module,exports){\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _aes = require('./aes');\n\nvar _aes2 = _interopRequireDefault(_aes);\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nvar _pkcs7 = require('pkcs7');\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new _aes2['default'](Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = undefined;\n  var init1 = undefined;\n  var init2 = undefined;\n  var init3 = undefined;\n  var encrypted0 = undefined;\n  var encrypted1 = undefined;\n  var encrypted2 = undefined;\n  var encrypted3 = undefined;\n\n  // iteration variable\n  var wordIx = undefined;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\nexports.decrypt = decrypt;\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = (function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    _classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new _asyncStream2['default']();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, (0, _pkcs7.unpad)(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n  _createClass(Decrypter, [{\n    key: 'decryptChunk_',\n\n    /**\n     * @private\n     */\n    value: function decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        var bytes = decrypt(encrypted, key, initVector);\n\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }], [{\n    key: 'STEP',\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n})();\n\nexports.Decrypter = Decrypter;\nexports['default'] = {\n  Decrypter: Decrypter,\n  decrypt: decrypt\n};\n},{\"./aes\":21,\"./async-stream\":22,\"pkcs7\":27}],24:[function(require,module,exports){\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _decrypter = require('./decrypter');\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nexports['default'] = {\n  decrypt: _decrypter.decrypt,\n  Decrypter: _decrypter.Decrypter,\n  AsyncStream: _asyncStream2['default']\n};\nmodule.exports = exports['default'];\n},{\"./async-stream\":22,\"./decrypter\":23}],25:[function(require,module,exports){\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Stream = (function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      var index = undefined;\n\n      if (!this.listeners[type]) {\n        return false;\n      }\n      index = this.listeners[type].indexOf(listener);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = undefined;\n      var i = undefined;\n      var length = undefined;\n      var args = undefined;\n\n      callbacks = this.listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n})();\n\nexports['default'] = Stream;\nmodule.exports = exports['default'];\n},{}],26:[function(require,module,exports){\n/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nvar PADDING;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function pad(plaintext) {\n  var padding = PADDING[(plaintext.byteLength % 16) || 0],\n      result = new Uint8Array(plaintext.byteLength + padding.length);\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n  return result;\n};\n\n// pre-define the padding values\nPADDING = [\n  [16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16],\n\n  [15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15],\n\n  [14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14],\n\n  [13, 13, 13, 13,\n   13, 13, 13, 13,\n   13, 13, 13, 13,\n   13],\n\n  [12, 12, 12, 12,\n   12, 12, 12, 12,\n   12, 12, 12, 12],\n\n  [11, 11, 11, 11,\n   11, 11, 11, 11,\n   11, 11, 11],\n\n  [10, 10, 10, 10,\n   10, 10, 10, 10,\n   10, 10],\n\n  [9, 9, 9, 9,\n   9, 9, 9, 9,\n   9],\n\n  [8, 8, 8, 8,\n   8, 8, 8, 8],\n\n  [7, 7, 7, 7,\n   7, 7, 7],\n\n  [6, 6, 6, 6,\n   6, 6],\n\n  [5, 5, 5, 5,\n   5],\n\n  [4, 4, 4, 4],\n\n  [3, 3, 3],\n\n  [2, 2],\n\n  [1]\n];\n\n},{}],27:[function(require,module,exports){\n/*\n * pkcs7\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nexports.pad = require('./pad.js');\nexports.unpad = require('./unpad.js');\n\n},{\"./pad.js\":26,\"./unpad.js\":28}],28:[function(require,module,exports){\n/*\n * pkcs7.unpad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n};\n\n},{}],29:[function(require,module,exports){\n\n},{}],30:[function(require,module,exports){\n(function (global){\nvar topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"min-document\":29}],31:[function(require,module,exports){\n(function (global){\nvar win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],32:[function(require,module,exports){\n'use strict';\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nmodule.exports = {\n  LineStream: _lineStream2['default'],\n  ParseStream: _parseStream2['default'],\n  Parser: _parser2['default']\n}; /**\n    * @file m3u8/index.js\n    *\n    * Utilities for parsing M3U8 files. If the entire manifest is available,\n    * `Parser` will create an object representation with enough detail for managing\n    * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n    * that do not assume the entirety of the manifest is ready and expose a\n    * ReadableStream-like interface.\n    */\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./parser\":35}],33:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/line-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\nvar LineStream = function (_Stream) {\n  _inherits(LineStream, _Stream);\n\n  function LineStream() {\n    _classCallCheck(this, LineStream);\n\n    var _this = _possibleConstructorReturn(this, (LineStream.__proto__ || Object.getPrototypeOf(LineStream)).call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  _createClass(LineStream, [{\n    key: 'push',\n    value: function push(data) {\n      var nextNewline = void 0;\n\n      this.buffer += data;\n      nextNewline = this.buffer.indexOf('\\n');\n\n      for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n        this.trigger('data', this.buffer.substring(0, nextNewline));\n        this.buffer = this.buffer.substring(nextNewline + 1);\n      }\n    }\n  }]);\n\n  return LineStream;\n}(_stream2['default']);\n\nexports['default'] = LineStream;\n},{\"./stream\":36}],34:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parse-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  _inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    _classCallCheck(this, ParseStream);\n\n    return _possibleConstructorReturn(this, (ParseStream.__proto__ || Object.getPrototypeOf(ParseStream)).call(this));\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  _createClass(ParseStream, [{\n    key: 'push',\n    value: function push(line) {\n      var match = void 0;\n      var event = void 0;\n\n      // strip whitespace\n      line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n      if (line.length === 0) {\n        // ignore empty lines\n        return;\n      }\n\n      // URIs\n      if (line[0] !== '#') {\n        this.trigger('data', {\n          type: 'uri',\n          uri: line\n        });\n        return;\n      }\n\n      // Comments\n      if (line.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: line.slice(1)\n        });\n        return;\n      }\n\n      // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n      line = line.replace('\\r', '');\n\n      // Tags\n      match = /^#EXTM3U/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n        if (match[2]) {\n          event.title = match[2];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'totalduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'byterange'\n        };\n        if (match[1]) {\n          event.length = parseInt(match[1], 10);\n        }\n        if (match[2]) {\n          event.offset = parseInt(match[2], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n          if (attributes.BYTERANGE) {\n            var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n                _attributes$BYTERANGE2 = _slicedToArray(_attributes$BYTERANGE, 2),\n                length = _attributes$BYTERANGE2[0],\n                offset = _attributes$BYTERANGE2[1];\n\n            event.byterange = {};\n            if (length) {\n              event.byterange.length = parseInt(length, 10);\n            }\n            if (offset) {\n              event.byterange.offset = parseInt(offset, 10);\n            }\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n            event.attributes.RESOLUTION = resolution;\n          }\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ENDLIST/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          // parse the IV string into a Uint32Array\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n\n      // unknown tag type\n      this.trigger('data', {\n        type: 'tag',\n        data: line.slice(4)\n      });\n    }\n  }]);\n\n  return ParseStream;\n}(_stream2['default']);\n\nexports['default'] = ParseStream;\n},{\"./stream\":36}],35:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parser.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\nvar Parser = function (_Stream) {\n  _inherits(Parser, _Stream);\n\n  function Parser() {\n    _classCallCheck(this, Parser);\n\n    var _this = _possibleConstructorReturn(this, (Parser.__proto__ || Object.getPrototypeOf(Parser)).call(this));\n\n    _this.lineStream = new _lineStream2['default']();\n    _this.parseStream = new _parseStream2['default']();\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              this.manifest.dateTimeString = entry.dateTimeString;\n              this.manifest.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  _createClass(Parser, [{\n    key: 'push',\n    value: function push(chunk) {\n      this.lineStream.push(chunk);\n    }\n\n    /**\n     * Flush any remaining input. This can be handy if the last line of an M3U8\n     * manifest did not contain a trailing newline but the file has been\n     * completely received.\n     */\n\n  }, {\n    key: 'end',\n    value: function end() {\n      // flush any buffered input\n      this.lineStream.push('\\n');\n    }\n  }]);\n\n  return Parser;\n}(_stream2['default']);\n\nexports['default'] = Parser;\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./stream\":36}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n\n      var index = this.listeners[type].indexOf(listener);\n\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = this.listeners[type];\n      var i = void 0;\n      var length = void 0;\n      var args = void 0;\n\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n}();\n\nexports['default'] = Stream;\n},{}],37:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n\n},{\"../utils/stream.js\":61}],38:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n\n},{}],39:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n\n},{\"../utils/stream.js\":61}],40:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n\n},{\"../utils/exp-golomb.js\":60,\"../utils/stream.js\":61}],41:[function(require,module,exports){\nvar highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n\n},{}],42:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\n/**\n * The final stage of the transmuxer that emits the flv tags\n * for audio, video, and metadata. Also tranlates in time and\n * outputs caption data and id3 cues.\n */\nvar CoalesceStream = function(options) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = options.metadataStream;\n\n  this.videoTags = [];\n  this.audioTags = [];\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n      this.videoTags = output.tags;\n      this.pendingTracks++;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n      this.audioTags = output.tags;\n      this.pendingTracks++;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    id3,\n    caption,\n    i,\n    timelineStartPts,\n    event = {\n      tags: {},\n      captions: [],\n      captionStreams: {},\n      metadata: []\n    };\n\n  if (this.pendingTracks < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.pendingTracks === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.processedTracks++;\n\n      if (this.processedTracks < this.numberOfTracks) {\n        return;\n      }\n    }\n  }\n\n  this.processedTracks += this.pendingTracks;\n  this.pendingTracks = 0;\n\n  if (this.processedTracks < this.numberOfTracks) {\n    return;\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n  }\n\n  event.tags.videoTags = this.videoTags;\n  event.tags.audioTags = this.audioTags;\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = caption.startPts - timelineStartPts;\n    caption.startTime /= 90e3;\n    caption.endTime = caption.endPts - timelineStartPts;\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = id3.pts - timelineStartPts;\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.videoTags = [];\n  this.audioTags = [];\n  this.pendingCaptions.length = 0;\n  this.pendingMetadata.length = 0;\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  // Emit the final segment\n  this.trigger('data', event);\n\n  this.trigger('done');\n};\n\nmodule.exports = CoalesceStream;\n\n},{\"../utils/stream.js\":61}],43:[function(require,module,exports){\n'use strict';\n\nvar FlvTag = require('./flv-tag.js');\n\n// For information on the FLV format, see\n// http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf.\n// Technically, this function returns the header and a metadata FLV tag\n// if duration is greater than zero\n// duration in seconds\n// @return {object} the bytes of the FLV header as a Uint8Array\nvar getFlvHeader = function(duration, audio, video) { // :ByteArray {\n  var\n    headBytes = new Uint8Array(3 + 1 + 1 + 4),\n    head = new DataView(headBytes.buffer),\n    metadata,\n    result,\n    metadataLength;\n\n  // default arguments\n  duration = duration || 0;\n  audio = audio === undefined ? true : audio;\n  video = video === undefined ? true : video;\n\n  // signature\n  head.setUint8(0, 0x46); // 'F'\n  head.setUint8(1, 0x4c); // 'L'\n  head.setUint8(2, 0x56); // 'V'\n\n  // version\n  head.setUint8(3, 0x01);\n\n  // flags\n  head.setUint8(4, (audio ? 0x04 : 0x00) | (video ? 0x01 : 0x00));\n\n  // data offset, should be 9 for FLV v1\n  head.setUint32(5, headBytes.byteLength);\n\n  // init the first FLV tag\n  if (duration <= 0) {\n    // no duration available so just write the first field of the first\n    // FLV tag\n    result = new Uint8Array(headBytes.byteLength + 4);\n    result.set(headBytes);\n    result.set([0, 0, 0, 0], headBytes.byteLength);\n    return result;\n  }\n\n  // write out the duration metadata tag\n  metadata = new FlvTag(FlvTag.METADATA_TAG);\n  metadata.pts = metadata.dts = 0;\n  metadata.writeMetaDataDouble('duration', duration);\n  metadataLength = metadata.finalize().length;\n  result = new Uint8Array(headBytes.byteLength + metadataLength);\n  result.set(headBytes);\n  result.set(head.byteLength, metadataLength);\n\n  return result;\n};\n\nmodule.exports = getFlvHeader;\n\n},{\"./flv-tag.js\":44}],44:[function(require,module,exports){\n/**\n * An object that stores the bytes of an FLV tag and methods for\n * querying and manipulating that data.\n * @see http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf\n */\n'use strict';\n\nvar FlvTag;\n\n// (type:uint, extraData:Boolean = false) extends ByteArray\nFlvTag = function(type, extraData) {\n  var\n    // Counter if this is a metadata tag, nal start marker if this is a video\n    // tag. unused if this is an audio tag\n    adHoc = 0, // :uint\n\n    // The default size is 16kb but this is not enough to hold iframe\n    // data and the resizing algorithm costs a bit so we create a larger\n    // starting buffer for video tags\n    bufferStartSize = 16384,\n\n    // checks whether the FLV tag has enough capacity to accept the proposed\n    // write and re-allocates the internal buffers if necessary\n    prepareWrite = function(flv, count) {\n      var\n        bytes,\n        minLength = flv.position + count;\n      if (minLength < flv.bytes.byteLength) {\n        // there's enough capacity so do nothing\n        return;\n      }\n\n      // allocate a new buffer and copy over the data that will not be modified\n      bytes = new Uint8Array(minLength * 2);\n      bytes.set(flv.bytes.subarray(0, flv.position), 0);\n      flv.bytes = bytes;\n      flv.view = new DataView(flv.bytes.buffer);\n    },\n\n    // commonly used metadata properties\n    widthBytes = FlvTag.widthBytes || new Uint8Array('width'.length),\n    heightBytes = FlvTag.heightBytes || new Uint8Array('height'.length),\n    videocodecidBytes = FlvTag.videocodecidBytes || new Uint8Array('videocodecid'.length),\n    i;\n\n  if (!FlvTag.widthBytes) {\n    // calculating the bytes of common metadata names ahead of time makes the\n    // corresponding writes faster because we don't have to loop over the\n    // characters\n    // re-test with test/perf.html if you're planning on changing this\n    for (i = 0; i < 'width'.length; i++) {\n      widthBytes[i] = 'width'.charCodeAt(i);\n    }\n    for (i = 0; i < 'height'.length; i++) {\n      heightBytes[i] = 'height'.charCodeAt(i);\n    }\n    for (i = 0; i < 'videocodecid'.length; i++) {\n      videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);\n    }\n\n    FlvTag.widthBytes = widthBytes;\n    FlvTag.heightBytes = heightBytes;\n    FlvTag.videocodecidBytes = videocodecidBytes;\n  }\n\n  this.keyFrame = false; // :Boolean\n\n  switch (type) {\n  case FlvTag.VIDEO_TAG:\n    this.length = 16;\n    // Start the buffer at 256k\n    bufferStartSize *= 6;\n    break;\n  case FlvTag.AUDIO_TAG:\n    this.length = 13;\n    this.keyFrame = true;\n    break;\n  case FlvTag.METADATA_TAG:\n    this.length = 29;\n    this.keyFrame = true;\n    break;\n  default:\n    throw new Error('Unknown FLV tag type');\n  }\n\n  this.bytes = new Uint8Array(bufferStartSize);\n  this.view = new DataView(this.bytes.buffer);\n  this.bytes[0] = type;\n  this.position = this.length;\n  this.keyFrame = extraData; // Defaults to false\n\n  // presentation timestamp\n  this.pts = 0;\n  // decoder timestamp\n  this.dts = 0;\n\n  // ByteArray#writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0)\n  this.writeBytes = function(bytes, offset, length) {\n    var\n      start = offset || 0,\n      end;\n    length = length || bytes.byteLength;\n    end = start + length;\n\n    prepareWrite(this, length);\n    this.bytes.set(bytes.subarray(start, end), this.position);\n\n    this.position += length;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeByte(value:int):void\n  this.writeByte = function(byte) {\n    prepareWrite(this, 1);\n    this.bytes[this.position] = byte;\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeShort(value:int):void\n  this.writeShort = function(short) {\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, short);\n    this.position += 2;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // Negative index into array\n  // (pos:uint):int\n  this.negIndex = function(pos) {\n    return this.bytes[this.length - pos];\n  };\n\n  // The functions below ONLY work when this[0] == VIDEO_TAG.\n  // We are not going to check for that because we dont want the overhead\n  // (nal:ByteArray = null):int\n  this.nalUnitSize = function() {\n    if (adHoc === 0) {\n      return 0;\n    }\n\n    return this.length - (adHoc + 4);\n  };\n\n  this.startNalUnit = function() {\n    // remember position and add 4 bytes\n    if (adHoc > 0) {\n      throw new Error('Attempted to create new NAL wihout closing the old one');\n    }\n\n    // reserve 4 bytes for nal unit size\n    adHoc = this.length;\n    this.length += 4;\n    this.position = this.length;\n  };\n\n  // (nal:ByteArray = null):void\n  this.endNalUnit = function(nalContainer) {\n    var\n      nalStart, // :uint\n      nalLength; // :uint\n\n    // Rewind to the marker and write the size\n    if (this.length === adHoc + 4) {\n      // we started a nal unit, but didnt write one, so roll back the 4 byte size value\n      this.length -= 4;\n    } else if (adHoc > 0) {\n      nalStart = adHoc + 4;\n      nalLength = this.length - nalStart;\n\n      this.position = adHoc;\n      this.view.setUint32(this.position, nalLength);\n      this.position = this.length;\n\n      if (nalContainer) {\n        // Add the tag to the NAL unit\n        nalContainer.push(this.bytes.subarray(nalStart, nalStart + nalLength));\n      }\n    }\n\n    adHoc = 0;\n  };\n\n  /**\n   * Write out a 64-bit floating point valued metadata property. This method is\n   * called frequently during a typical parse and needs to be fast.\n   */\n  // (key:String, val:Number):void\n  this.writeMetaDataDouble = function(key, val) {\n    var i;\n    prepareWrite(this, 2 + key.length + 9);\n\n    // write size of property name\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n\n    // this next part looks terrible but it improves parser throughput by\n    // 10kB/s in my testing\n\n    // write property name\n    if (key === 'width') {\n      this.bytes.set(widthBytes, this.position);\n      this.position += 5;\n    } else if (key === 'height') {\n      this.bytes.set(heightBytes, this.position);\n      this.position += 6;\n    } else if (key === 'videocodecid') {\n      this.bytes.set(videocodecidBytes, this.position);\n      this.position += 12;\n    } else {\n      for (i = 0; i < key.length; i++) {\n        this.bytes[this.position] = key.charCodeAt(i);\n        this.position++;\n      }\n    }\n\n    // skip null byte\n    this.position++;\n\n    // write property value\n    this.view.setFloat64(this.position, val);\n    this.position += 8;\n\n    // update flv tag length\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // (key:String, val:Boolean):void\n  this.writeMetaDataBoolean = function(key, val) {\n    var i;\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n    for (i = 0; i < key.length; i++) {\n      // if key.charCodeAt(i) >= 255, handle error\n      prepareWrite(this, 1);\n      this.bytes[this.position] = key.charCodeAt(i);\n      this.position++;\n    }\n    prepareWrite(this, 2);\n    this.view.setUint8(this.position, 0x01);\n    this.position++;\n    this.view.setUint8(this.position, val ? 0x01 : 0x00);\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // ():ByteArray\n  this.finalize = function() {\n    var\n      dtsDelta, // :int\n      len; // :int\n\n    switch (this.bytes[0]) {\n      // Video Data\n    case FlvTag.VIDEO_TAG:\n       // We only support AVC, 1 = key frame (for AVC, a seekable\n       // frame), 2 = inter frame (for AVC, a non-seekable frame)\n      this.bytes[11] = ((this.keyFrame || extraData) ? 0x10 : 0x20) | 0x07;\n      this.bytes[12] = extraData ?  0x00 : 0x01;\n\n      dtsDelta = this.pts - this.dts;\n      this.bytes[13] = (dtsDelta & 0x00FF0000) >>> 16;\n      this.bytes[14] = (dtsDelta & 0x0000FF00) >>>  8;\n      this.bytes[15] = (dtsDelta & 0x000000FF) >>>  0;\n      break;\n\n    case FlvTag.AUDIO_TAG:\n      this.bytes[11] = 0xAF; // 44 kHz, 16-bit stereo\n      this.bytes[12] = extraData ? 0x00 : 0x01;\n      break;\n\n    case FlvTag.METADATA_TAG:\n      this.position = 11;\n      this.view.setUint8(this.position, 0x02); // String type\n      this.position++;\n      this.view.setUint16(this.position, 0x0A); // 10 Bytes\n      this.position += 2;\n      // set \"onMetaData\"\n      this.bytes.set([0x6f, 0x6e, 0x4d, 0x65,\n                      0x74, 0x61, 0x44, 0x61,\n                      0x74, 0x61], this.position);\n      this.position += 10;\n      this.bytes[this.position] = 0x08; // Array type\n      this.position++;\n      this.view.setUint32(this.position, adHoc);\n      this.position = this.length;\n      this.bytes.set([0, 0, 9], this.position);\n      this.position += 3; // End Data Tag\n      this.length = this.position;\n      break;\n    }\n\n    len = this.length - 11;\n\n    // write the DataSize field\n    this.bytes[ 1] = (len & 0x00FF0000) >>> 16;\n    this.bytes[ 2] = (len & 0x0000FF00) >>>  8;\n    this.bytes[ 3] = (len & 0x000000FF) >>>  0;\n    // write the Timestamp\n    this.bytes[ 4] = (this.dts & 0x00FF0000) >>> 16;\n    this.bytes[ 5] = (this.dts & 0x0000FF00) >>>  8;\n    this.bytes[ 6] = (this.dts & 0x000000FF) >>>  0;\n    this.bytes[ 7] = (this.dts & 0xFF000000) >>> 24;\n    // write the StreamID\n    this.bytes[ 8] = 0;\n    this.bytes[ 9] = 0;\n    this.bytes[10] = 0;\n\n    // Sometimes we're at the end of the view and have one slot to write a\n    // uint32, so, prepareWrite of count 4, since, view is uint8\n    prepareWrite(this, 4);\n    this.view.setUint32(this.length, this.length);\n    this.length += 4;\n    this.position += 4;\n\n    // trim down the byte buffer to what is actually being used\n    this.bytes = this.bytes.subarray(0, this.length);\n    this.frameTime = FlvTag.frameTime(this.bytes);\n    // if bytes.bytelength isn't equal to this.length, handle error\n    return this;\n  };\n};\n\nFlvTag.AUDIO_TAG = 0x08; // == 8, :uint\nFlvTag.VIDEO_TAG = 0x09; // == 9, :uint\nFlvTag.METADATA_TAG = 0x12; // == 18, :uint\n\n// (tag:ByteArray):Boolean {\nFlvTag.isAudioFrame = function(tag) {\n  return FlvTag.AUDIO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isVideoFrame = function(tag) {\n  return FlvTag.VIDEO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isMetaData = function(tag) {\n  return FlvTag.METADATA_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isKeyFrame = function(tag) {\n  if (FlvTag.isVideoFrame(tag)) {\n    return tag[11] === 0x17;\n  }\n\n  if (FlvTag.isAudioFrame(tag)) {\n    return true;\n  }\n\n  if (FlvTag.isMetaData(tag)) {\n    return true;\n  }\n\n  return false;\n};\n\n// (tag:ByteArray):uint {\nFlvTag.frameTime = function(tag) {\n  var pts = tag[ 4] << 16; // :uint\n  pts |= tag[ 5] <<  8;\n  pts |= tag[ 6] <<  0;\n  pts |= tag[ 7] << 24;\n  return pts;\n};\n\nmodule.exports = FlvTag;\n\n},{}],45:[function(require,module,exports){\nmodule.exports = {\n  tag: require('./flv-tag'),\n  Transmuxer: require('./transmuxer'),\n  getFlvHeader: require('./flv-header')\n};\n\n},{\"./flv-header\":43,\"./flv-tag\":44,\"./transmuxer\":47}],46:[function(require,module,exports){\n'use strict';\n\nvar TagList = function() {\n  var self = this;\n\n  this.list = [];\n\n  this.push = function(tag) {\n    this.list.push({\n      bytes: tag.bytes,\n      dts: tag.dts,\n      pts: tag.pts,\n      keyFrame: tag.keyFrame,\n      metaDataTag: tag.metaDataTag\n    });\n  };\n\n  Object.defineProperty(this, 'length', {\n    get: function() {\n      return self.list.length;\n    }\n  });\n};\n\nmodule.exports = TagList;\n\n},{}],47:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar FlvTag = require('./flv-tag.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar CoalesceStream = require('./coalesce-stream.js');\nvar TagList = require('./tag-list.js');\n\nvar\n  Transmuxer,\n  VideoSegmentStream,\n  AudioSegmentStream,\n  collectTimelineInfo,\n  metaDataTag,\n  extraDataTag;\n\n/**\n * Store information about the start and end of the tracka and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectTimelineInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    } else {\n      track.timelineStartInfo.pts =\n        Math.min(track.timelineStartInfo.pts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    } else {\n      track.timelineStartInfo.dts =\n        Math.min(track.timelineStartInfo.dts, data.dts);\n    }\n  }\n};\n\nmetaDataTag = function(track, pts) {\n  var\n    tag = new FlvTag(FlvTag.METADATA_TAG); // :FlvTag\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeMetaDataDouble('videocodecid', 7);\n  tag.writeMetaDataDouble('width', track.width);\n  tag.writeMetaDataDouble('height', track.height);\n\n  return tag;\n};\n\nextraDataTag = function(track, pts) {\n  var\n    i,\n    tag = new FlvTag(FlvTag.VIDEO_TAG, true);\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeByte(0x01);// version\n  tag.writeByte(track.profileIdc);// profile\n  tag.writeByte(track.profileCompatibility);// compatibility\n  tag.writeByte(track.levelIdc);// level\n  tag.writeByte(0xFC | 0x03); // reserved (6 bits), NULA length size - 1 (2 bits)\n  tag.writeByte(0xE0 | 0x01); // reserved (3 bits), num of SPS (5 bits)\n  tag.writeShort(track.sps[0].length); // data of SPS\n  tag.writeBytes(track.sps[0]); // SPS\n\n  tag.writeByte(track.pps.length); // num of PPS (will there ever be more that 1 PPS?)\n  for (i = 0; i < track.pps.length; ++i) {\n    tag.writeShort(track.pps[i].length); // 2 bytes for length of PPS\n    tag.writeBytes(track.pps[i]); // data of PPS\n  }\n\n  return tag;\n};\n\n/**\n * Constructs a single-track, media segment from AAC data\n * events. The output of this stream can be fed to flash.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    oldExtraData;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    if (track && track.channelcount === undefined) {\n      track.audioobjecttype = data.audioobjecttype;\n      track.channelcount = data.channelcount;\n      track.samplerate = data.samplerate;\n      track.samplingfrequencyindex = data.samplingfrequencyindex;\n      track.samplesize = data.samplesize;\n      track.extraData = (track.audioobjecttype << 11) |\n                        (track.samplingfrequencyindex << 7) |\n                        (track.channelcount << 3);\n    }\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.flush = function() {\n    var currentFrame, adtsFrame, lastMetaPts, tags = new TagList();\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    lastMetaPts = -Infinity;\n\n    while (adtsFrames.length) {\n      currentFrame = adtsFrames.shift();\n\n      // write out metadata tags every 1 second so that the decoder\n      // is re-initialized quickly after seeking into a different\n      // audio configuration\n      if (track.extraData !== oldExtraData || currentFrame.pts - lastMetaPts >= 1000) {\n       adtsFrame = new FlvTag(FlvTag.METADATA_TAG);\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        // AAC is always 10\n        adtsFrame.writeMetaDataDouble('audiocodecid', 10);\n        adtsFrame.writeMetaDataBoolean('stereo', track.channelcount === 2);\n        adtsFrame.writeMetaDataDouble('audiosamplerate', track.samplerate);\n        // Is AAC always 16 bit?\n        adtsFrame.writeMetaDataDouble('audiosamplesize', 16);\n\n        tags.push(adtsFrame.finalize());\n\n        oldExtraData = track.extraData;\n\n        adtsFrame = new FlvTag(FlvTag.AUDIO_TAG, true);\n        // For audio, DTS is always the same as PTS. We want to set the DTS\n        // however so we can compare with video DTS to determine approximate\n        // packet order\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        adtsFrame.view.setUint16(adtsFrame.position, track.extraData);\n        adtsFrame.position += 2;\n        adtsFrame.length = Math.max(adtsFrame.length, adtsFrame.position);\n\n        tags.push(adtsFrame.finalize());\n\n        lastMetaPts = currentFrame.pts;\n      }\n      adtsFrame = new FlvTag(FlvTag.AUDIO_TAG);\n      adtsFrame.pts = currentFrame.pts;\n      adtsFrame.dts = currentFrame.dts;\n\n      adtsFrame.writeBytes(currentFrame.data);\n\n      tags.push(adtsFrame.finalize());\n    }\n\n    oldExtraData = null;\n    this.trigger('data', {track: track, tags: tags.list});\n\n    this.trigger('done', 'AudioSegmentStream');\n  };\n};\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Store FlvTags for the h264 stream\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    nalUnits = [],\n    config,\n    h264Frame;\n  VideoSegmentStream.prototype.init.call(this);\n\n  this.finishFrame = function(tags, frame) {\n    if (!frame) {\n      return;\n    }\n    // Check if keyframe and the length of tags.\n    // This makes sure we write metadata on the first frame of a segment.\n    if (config && track && track.newMetadata &&\n        (frame.keyFrame || tags.length === 0)) {\n      // Push extra data on every IDR frame in case we did a stream change + seek\n      var metaTag = metaDataTag(config, frame.dts).finalize();\n      var extraTag = extraDataTag(track, frame.dts).finalize();\n\n      metaTag.metaDataTag = extraTag.metaDataTag = true;\n\n      tags.push(metaTag);\n      tags.push(extraTag);\n      track.newMetadata = false;\n    }\n\n    frame.endNalUnit();\n    tags.push(frame.finalize());\n    h264Frame = null;\n  };\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer video until flush() is called\n    nalUnits.push(data);\n  };\n\n  this.flush = function() {\n    var\n      currentNal,\n      tags = new TagList();\n\n    // Throw away nalUnits at the start of the byte stream until we find\n    // the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    while (nalUnits.length) {\n      currentNal = nalUnits.shift();\n\n      // record the track config\n      if (currentNal.nalUnitType === 'seq_parameter_set_rbsp') {\n        track.newMetadata = true;\n        config = currentNal.config;\n        track.width = config.width;\n        track.height = config.height;\n        track.sps = [currentNal.data];\n        track.profileIdc = config.profileIdc;\n        track.levelIdc = config.levelIdc;\n        track.profileCompatibility = config.profileCompatibility;\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'pic_parameter_set_rbsp') {\n        track.newMetadata = true;\n        track.pps = [currentNal.data];\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        if (h264Frame) {\n          this.finishFrame(tags, h264Frame);\n        }\n        h264Frame = new FlvTag(FlvTag.VIDEO_TAG);\n        h264Frame.pts = currentNal.pts;\n        h264Frame.dts = currentNal.dts;\n      } else {\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          // the current sample is a key frame\n          h264Frame.keyFrame = true;\n        }\n        h264Frame.endNalUnit();\n      }\n      h264Frame.startNalUnit();\n      h264Frame.writeBytes(currentNal.data);\n    }\n    if (h264Frame) {\n      this.finishFrame(tags, h264Frame);\n    }\n\n    this.trigger('data', {track: track, tags: tags.list});\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * An object that incrementally transmuxes MPEG2 Trasport Stream\n * chunks into an FLV.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n\n    packetStream, parseStream, elementaryStream,\n    videoTimestampRolloverStream, audioTimestampRolloverStream,\n    timedMetadataTimestampRolloverStream,\n    adtsStream, h264Stream,\n    videoSegmentStream, audioSegmentStream, captionStream,\n    coalesceStream;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n\n  // expose the metadata stream\n  this.metadataStream = new m2ts.MetadataStream();\n\n  options.metadataStream = this.metadataStream;\n\n  // set up the parsing pipeline\n  packetStream = new m2ts.TransportPacketStream();\n  parseStream = new m2ts.TransportParseStream();\n  elementaryStream = new m2ts.ElementaryStream();\n  videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n  audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n  timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n\n  adtsStream = new AdtsStream();\n  h264Stream = new H264Stream();\n  coalesceStream = new CoalesceStream(options);\n\n  // disassemble MPEG2-TS packets into elementary streams\n  packetStream\n    .pipe(parseStream)\n    .pipe(elementaryStream);\n\n  // !!THIS ORDER IS IMPORTANT!!\n  // demux the streams\n  elementaryStream\n    .pipe(videoTimestampRolloverStream)\n    .pipe(h264Stream);\n  elementaryStream\n    .pipe(audioTimestampRolloverStream)\n    .pipe(adtsStream);\n\n  elementaryStream\n    .pipe(timedMetadataTimestampRolloverStream)\n    .pipe(this.metadataStream)\n    .pipe(coalesceStream);\n  // if CEA-708 parsing is available, hook up a caption stream\n  captionStream = new m2ts.CaptionStream();\n  h264Stream.pipe(captionStream)\n    .pipe(coalesceStream);\n\n  // hook up the segment streams once track metadata is delivered\n  elementaryStream.on('data', function(data) {\n    var i, videoTrack, audioTrack;\n\n    if (data.type === 'metadata') {\n      i = data.tracks.length;\n\n      // scan the tracks listed in the metadata\n      while (i--) {\n        if (data.tracks[i].type === 'video') {\n          videoTrack = data.tracks[i];\n        } else if (data.tracks[i].type === 'audio') {\n          audioTrack = data.tracks[i];\n        }\n      }\n\n      // hook up the video segment stream to the first track with h264 data\n      if (videoTrack && !videoSegmentStream) {\n        coalesceStream.numberOfTracks++;\n        videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n        // Set up the final part of the video pipeline\n        h264Stream\n          .pipe(videoSegmentStream)\n          .pipe(coalesceStream);\n      }\n\n      if (audioTrack && !audioSegmentStream) {\n        // hook up the audio segment stream to the first track with aac data\n        coalesceStream.numberOfTracks++;\n        audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n        // Set up the final part of the audio pipeline\n        adtsStream\n          .pipe(audioSegmentStream)\n          .pipe(coalesceStream);\n      }\n    }\n  });\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    packetStream.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n    // Start at the top of the pipeline and flush all pending work\n    packetStream.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    captionStream.reset();\n  };\n\n  // Re-emit any data coming from the coalesce stream to the outside world\n  coalesceStream.on('data', function(event) {\n    self.trigger('data', event);\n  });\n\n  // Let the consumer know we have finished flushing the entire pipeline\n  coalesceStream.on('done', function() {\n    self.trigger('done');\n  });\n};\nTransmuxer.prototype = new Stream();\n\n// forward compatibility\nmodule.exports = Transmuxer;\n\n},{\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../m2ts/m2ts.js\":49,\"../utils/stream.js\":61,\"./coalesce-stream.js\":42,\"./flv-tag.js\":44,\"./tag-list.js\":46}],48:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128,\n    Stream = require('../utils/stream');\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar packetDropper = {\n  push: function() {}\n};\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across 2 packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the second\n  // dts packet we receive that has dts === this.latestDts_. And thus, the\n  // ignoreNextEqualDts_ flag was born.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    // We've received the last duplicate packet, time to start processing again\n    this.ignoreNextEqualDts_ = false;\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  this.captionPackets_ = this.captionPackets_.concat(parseCaptionPackets(event.pts, userData));\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.activeCea608Channel_ = null;\n  // Since we don't know which channel is active until we get a control\n  // code that sets it, we start off with CEA608 handlers that just drop\n  // all the packets.\n  this.activeCea608Streams_ = [\n    packetDropper,\n    packetDropper\n  ];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  if (this.setsChannel1Active(packet) && this.activeCea608Channel_ !== 1) {\n    this.activeCea608Channel_ = 1;\n    this.activeCea608Streams_ = [this.ccStreams_[0], this.ccStreams_[2]]; // CC1, CC3\n  } else if (this.setsChannel2Active(packet) && this.activeCea608Channel_ !== 2) {\n    this.activeCea608Channel_ = 2;\n    this.activeCea608Streams_ = [this.ccStreams_[1], this.ccStreams_[3]]; // CC2, CC4\n  }\n  // If we haven't set the active streams yet, this next call just returns\n  // immediately.\n  this.activeCea608Streams_[packet.type].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 1;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 2;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 3;\n      this.mode_ = 'rollUp';\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[BOTTOM_ROW] = this.nonDisplayed_[BOTTOM_ROW].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      this.mode_ = 'paintOn';\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode (not supported)\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[BOTTOM_ROW];\n\n  baseRow += text;\n  this.displayed_[BOTTOM_ROW] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < BOTTOM_ROW; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[BOTTOM_ROW] = '';\n};\n\n// paintOn mode is not implemented\nCea608Stream.prototype.paintOn = function() {};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n\n},{\"../utils/stream\":61}],49:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {};\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      // add an entry that maps the elementary_pid to the stream_type\n      self.programMapTable[(payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]] = payload[offset];\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n\n    // if there are any packets waiting for a PMT to be found, process them now\n    while (self.packetsWaitingForPmt.length) {\n      self.processPes_.apply(self, self.packetsWaitingForPmt.shift());\n    }\n  };\n\n  /**\n   * Deliver a new MP2T packet to the stream.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    result.streamType = this.programMapTable[result.pid];\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that they match before we do a flush\n      packetFlushable = type === 'video' || event.packetLength === stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable,\n          k,\n          track;\n\n        // translate streams to tracks\n        for (k in programMapTable) {\n          if (programMapTable.hasOwnProperty(k)) {\n            track = {\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              }\n            };\n            track.id = +k;\n            if (programMapTable[k] === m2tsStreamTypes.H264_STREAM_TYPE) {\n              track.codec = 'avc';\n              track.type = 'video';\n            } else if (programMapTable[k] === m2tsStreamTypes.ADTS_STREAM_TYPE) {\n              track.codec = 'adts';\n              track.type = 'audio';\n            }\n            event.tracks.push(track);\n          }\n        }\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n\n},{\"../utils/stream.js\":61,\"./caption-stream\":48,\"./metadata-stream\":50,\"./stream-types\":52,\"./stream-types.js\":52,\"./timestamp-rollover-stream\":53}],50:[function(require,module,exports){\n/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n\n},{\"../utils/stream\":61,\"./stream-types\":52}],51:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n\n},{\"./stream-types.js\":52}],52:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n\n},{}],53:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n\n},{\"../utils/stream\":61}],54:[function(require,module,exports){\nmodule.exports = {\n  generator: require('./mp4-generator'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream\n};\n\n},{\"./mp4-generator\":55,\"./transmuxer\":57}],55:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n\n},{}],56:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar findBox, parseType, timescale, startTime;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = data[i]     << 24;\n    size |= data[i + 1] << 16;\n    size |= data[i + 2] << 8;\n    size |= data[i + 3];\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = tkhd[index]     << 24 |\n         tkhd[index + 1] << 16 |\n         tkhd[index + 2] <<  8 |\n         tkhd[index + 3];\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = mdhd[index]     << 24 |\n                 mdhd[index + 1] << 16 |\n                 mdhd[index + 2] <<  8 |\n                 mdhd[index + 3];\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = tfhd[4] << 24 |\n           tfhd[5] << 16 |\n           tfhd[6] << 8 |\n           tfhd[7];\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = tfdt[4] << 24 |\n                 tfdt[5] << 16 |\n                 tfdt[6] <<  8 |\n                 tfdt[7];\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += tfdt[8]  << 24 |\n                    tfdt[9]  << 16 |\n                    tfdt[10] <<  8 |\n                    tfdt[11];\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\nmodule.exports = {\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime\n};\n\n},{}],57:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  createDefaultSample,\n  isLikelyAacData,\n  collectDtsInfo,\n  clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime,\n  arrayEquals,\n  sumFrameByteLengths;\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\ncreateDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0\n    }\n  };\n};\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    config,\n    pps;\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  this.push = function(nalUnit) {\n    collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = this.groupNalsIntoFrames_(nalUnits);\n    gops = this.groupFramesIntoGops_(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyrame-pulling\n        gops = this.extendFirstKeyFrame_(gops);\n      }\n    }\n    collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = this.generateSampleTable_(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(this.concatenateNalData_(gops));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  this.extendFirstKeyFrame_ = function(gops) {\n    var currentGop;\n\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n\n      gops.byteLength -=  currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount;\n\n      // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n\n    return gops;\n  };\n\n  // Convert an array of nal units into an array of frames with each frame being\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n  this.groupNalsIntoFrames_ = function(nalUnits) {\n    var\n      i,\n      currentNal,\n      currentFrame = [],\n      frames = [];\n\n    currentFrame.byteLength = 0;\n\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i];\n\n      // Split on 'aud'-type nal units\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          frames.push(currentFrame);\n        }\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    }\n\n    // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n    if (frames.length &&\n        (!currentFrame.duration ||\n         currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    }\n\n    // Push the final frame\n    frames.push(currentFrame);\n    return frames;\n  };\n\n  // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n  this.groupFramesIntoGops_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      currentGop = [],\n      gops = [];\n\n    // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts;\n\n    // store some metadata about all the Gops\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration;\n\n    // push the final Gop\n    gops.push(currentGop);\n    return gops;\n  };\n\n  // generate the track's sample table from an array of gops\n  this.generateSampleTable_ = function(gops, baseDataOffset) {\n    var\n      h, i,\n      sample,\n      currentGop,\n      currentFrame,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        sample = createDefaultSample();\n\n        sample.dataOffset = dataOffset;\n        sample.compositionTimeOffset = currentFrame.pts - currentFrame.dts;\n        sample.duration = currentFrame.duration;\n        sample.size = 4 * currentFrame.length; // Space for nal unit size\n        sample.size += currentFrame.byteLength;\n\n        if (currentFrame.keyFrame) {\n          sample.flags.dependsOn = 2;\n        }\n\n        dataOffset += sample.size;\n\n        samples.push(sample);\n      }\n    }\n    return samples;\n  };\n\n  // generate the track's raw mdat data from an array of gops\n  this.concatenateNalData_ = function(gops) {\n    var\n      h, i, j,\n      currentGop,\n      currentFrame,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = gops.byteLength,\n      numberOfNals = gops.nalCount,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer);\n\n    // For each Gop..\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      // For each Frame..\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        // For each NAL..\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n    return data;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nclearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n */\ncalculateTrackBaseMediaDecodeTime = function(track) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    // Calculate the distance, in time, that this segment starts from the start\n    // of the timeline (earliest time seen since the transmuxer initialized)\n    timeSinceStartOfTimeline = track.minSegmentDts - track.timelineStartInfo.dts;\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += timeSinceStartOfTimeline;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n\n},{\"../aac\":37,\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../data/silence\":41,\"../m2ts/m2ts.js\":49,\"../utils/clock\":59,\"../utils/stream.js\":61,\"./mp4-generator.js\":55}],58:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n\n},{\"../aac/probe.js\":38,\"../m2ts/probe.js\":51,\"../m2ts/stream-types.js\":52,\"../m2ts/timestamp-rollover-stream.js\":53}],59:[function(require,module,exports){\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n\n},{}],60:[function(require,module,exports){\n'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n\n},{}],61:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n\n},{}],62:[function(require,module,exports){\n/* jshint ignore:start */\r\n(function(root) { \r\n/* jshint ignore:end */\r\n  var URLToolkit = {\r\n    // build an absolute URL from a relative one using the provided baseURL\r\n    // if relativeURL is an absolute URL it will be returned as is.\r\n    buildAbsoluteURL: function(baseURL, relativeURL) {\r\n      // remove any remaining space and CRLF\r\n      relativeURL = relativeURL.trim();\r\n      if (/^[a-z]+:/i.test(relativeURL)) {\r\n        // complete url, not relative\r\n        return relativeURL;\r\n      }\r\n\r\n      var relativeURLQuery = null;\r\n      var relativeURLHash = null;\r\n\r\n      var relativeURLHashSplit = /^([^#]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLHashSplit) {\r\n        relativeURLHash = relativeURLHashSplit[2];\r\n        relativeURL = relativeURLHashSplit[1];\r\n      }\r\n      var relativeURLQuerySplit = /^([^\\?]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLQuerySplit) {\r\n        relativeURLQuery = relativeURLQuerySplit[2];\r\n        relativeURL = relativeURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLHashSplit = /^([^#]*)(.*)$/.exec(baseURL);\r\n      if (baseURLHashSplit) {\r\n        baseURL = baseURLHashSplit[1];\r\n      }\r\n      var baseURLQuerySplit = /^([^\\?]*)(.*)$/.exec(baseURL);\r\n      if (baseURLQuerySplit) {\r\n        baseURL = baseURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLDomainSplit = /^(([a-z]+:)?\\/\\/[^:\\/]+(:[0-9]+)?)?(\\/?.*)$/i.exec(baseURL);\r\n      if (!baseURLDomainSplit) {\r\n        throw new Error('Error trying to parse base URL.');\r\n      }\r\n      \r\n      // e.g. 'http:', 'https:', ''\r\n      var baseURLProtocol = baseURLDomainSplit[2] || '';\r\n      // e.g. 'http://example.com', '//example.com', ''\r\n      var baseURLProtocolDomain = baseURLDomainSplit[1] || '';\r\n      // e.g. '/a/b/c/playlist.m3u8', 'a/b/c/playlist.m3u8'\r\n      var baseURLPath = baseURLDomainSplit[4];\r\n      if (baseURLPath.indexOf('/') !== 0 && baseURLProtocolDomain !== '') {\r\n        // this handles a base url of http://example.com (missing last slash)\r\n        baseURLPath = '/'+baseURLPath;\r\n      }\r\n\r\n      var builtURL = null;\r\n      if (/^\\/\\//.test(relativeURL)) {\r\n        // relative url starts wth '//' so copy protocol (which may be '' if baseUrl didn't provide one)\r\n        builtURL = baseURLProtocol+'//'+URLToolkit.buildAbsolutePath('', relativeURL.substring(2));\r\n      }\r\n      else if (/^\\//.test(relativeURL)) {\r\n        // relative url starts with '/' so start from root of domain\r\n        builtURL = baseURLProtocolDomain+'/'+URLToolkit.buildAbsolutePath('', relativeURL.substring(1));\r\n      }\r\n      else {\r\n        builtURL = URLToolkit.buildAbsolutePath(baseURLProtocolDomain+baseURLPath, relativeURL);\r\n      }\r\n\r\n      // put the query and hash parts back\r\n      if (relativeURLQuery) {\r\n        builtURL += relativeURLQuery;\r\n      }\r\n      if (relativeURLHash) {\r\n        builtURL += relativeURLHash;\r\n      }\r\n      return builtURL;\r\n    },\r\n\r\n    // build an absolute path using the provided basePath\r\n    // adapted from https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#Using_relative_URLs_in_the_path_parameter\r\n    // this does not handle the case where relativePath is \"/\" or \"//\". These cases should be handled outside this.\r\n    buildAbsolutePath: function(basePath, relativePath) {\r\n      var sRelPath = relativePath;\r\n      var nUpLn, sDir = '', sPath = basePath.replace(/[^\\/]*$/, sRelPath.replace(/(\\/|^)(?:\\.?\\/+)+/g, '$1'));\r\n      for (var nEnd, nStart = 0; nEnd = sPath.indexOf('/../', nStart), nEnd > -1; nStart = nEnd + nUpLn) {\r\n        nUpLn = /^\\/(?:\\.\\.\\/)*/.exec(sPath.slice(nEnd))[0].length;\r\n        sDir = (sDir + sPath.substring(nStart, nEnd)).replace(new RegExp('(?:\\\\\\/+[^\\\\\\/]*){0,' + ((nUpLn - 1) / 3) + '}$'), '/');\r\n      }\r\n      return sDir + sPath.substr(nStart);\r\n    }\r\n  };\r\n\r\n/* jshint ignore:start */\r\n  if(typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = URLToolkit;\r\n  else if(typeof define === 'function' && define.amd)\r\n    define([], function() { return URLToolkit; });\r\n  else if(typeof exports === 'object')\r\n    exports[\"URLToolkit\"] = URLToolkit;\r\n  else\r\n    root[\"URLToolkit\"] = URLToolkit;\r\n})(this);\r\n/* jshint ignore:end */\r\n\n},{}],63:[function(require,module,exports){\n(function (global){\n/**\n * @file add-text-track-data.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = undefined;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the flash or virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    (function () {\n      var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n      metadataArray.forEach(function (metadata) {\n        var time = metadata.cueTime + this.timestampOffset;\n\n        metadata.frames.forEach(function (frame) {\n          var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n          cue.frame = frame;\n          cue.value = frame;\n          deprecateOldCue(cue);\n\n          this.metadataTrack_.addCue(cue);\n        }, this);\n      }, sourceHandler);\n\n      // Updating the metadeta cues so that\n      // the endTime of each cue is the startTime of the next cue\n      // the endTime of last cue is the duration of the video\n      if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n        (function () {\n          var cues = sourceHandler.metadataTrack_.cues;\n          var cuesArray = [];\n\n          // Create a copy of the TextTrackCueList...\n          // ...disregarding cues with a falsey value\n          for (var i = 0; i < cues.length; i++) {\n            if (cues[i]) {\n              cuesArray.push(cues[i]);\n            }\n          }\n\n          // Group cues by their startTime value\n          var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n            var timeSlot = obj[cue.startTime] || [];\n\n            timeSlot.push(cue);\n            obj[cue.startTime] = timeSlot;\n\n            return obj;\n          }, {});\n\n          // Sort startTimes by ascending order\n          var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n            return Number(a) - Number(b);\n          });\n\n          // Map each cue group's endTime to the next group's startTime\n          sortedStartTimes.forEach(function (startTime, idx) {\n            var cueGroup = cuesGroupedByStartTime[startTime];\n            var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n            // Map each cue's endTime the next group's startTime\n            cueGroup.forEach(function (cue) {\n              cue.endTime = nextTime;\n            });\n          });\n        })();\n      }\n    })();\n  }\n};\n\nexports['default'] = {\n  addTextTrackData: addTextTrackData,\n  durationOfVideo: durationOfVideo\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],64:[function(require,module,exports){\n/**\n * Remove the text track from the player if one with matching kind and\n * label properties already exists on the player\n *\n * @param {Object} player the video.js player object\n * @param {String} kind to be considered the text track's `kind` must match\n * @param {String} label to be considered the text track's `label` must match\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar removeExistingTrack = function removeExistingTrack(player, kind, label) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = 0; i < tracks.length; i++) {\n    var track = tracks[i];\n\n    if (track.kind === kind && track.label === label) {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n};\n\nexports.removeExistingTrack = removeExistingTrack;\n/**\n * Cleaup text tracks on video.js if they exist\n *\n * @param {Object} player the video.js player object\n * @private\n */\nvar cleanupTextTracks = function cleanupTextTracks(player) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = tracks.length - 1; i >= 0; i--) {\n    var track = tracks[i];\n\n    if (track.kind === 'captions') {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n\n  removeExistingTrack(player, 'metadata', 'Timed Metadata');\n};\nexports.cleanupTextTracks = cleanupTextTracks;\n},{}],65:[function(require,module,exports){\n/**\n * @file codec-utils.js\n */\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var _name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[_name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\nexports['default'] = {\n  isAudioCodec: isAudioCodec,\n  parseContentType: parseContentType,\n  isVideoCodec: isVideoCodec,\n  translateLegacyCodecs: translateLegacyCodecs\n};\nmodule.exports = exports['default'];\n},{}],66:[function(require,module,exports){\n/**\n * @file create-text-tracks-if-necessary.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML or Flash media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    (0, _cleanupTextTracks.removeExistingTrack)(player, 'metadata', 'Timed Metadata', true);\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\nexports['default'] = createTextTracksIfNecessary;\nmodule.exports = exports['default'];\n},{\"./cleanup-text-tracks\":64}],67:[function(require,module,exports){\n/**\n * @file flash-constants.js\n */\n/**\n * The maximum size in bytes for append operations to the video.js\n * SWF. Calling through to Flash blocks and can be expensive so\n * we chunk data and pass through 4KB at a time, yielding to the\n * browser between chunks. This gives a theoretical maximum rate of\n * 1MB/s into Flash. Any higher and we begin to drop frames and UI\n * responsiveness suffers.\n *\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar flashConstants = {\n  // times in milliseconds\n  TIME_BETWEEN_CHUNKS: 1,\n  BYTES_PER_CHUNK: 1024 * 32\n};\n\nexports[\"default\"] = flashConstants;\nmodule.exports = exports[\"default\"];\n},{}],68:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _flashSourceBuffer = require('./flash-source-buffer');\n\nvar _flashSourceBuffer2 = _interopRequireDefault(_flashSourceBuffer);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * A flash implmentation of HTML MediaSources and a polyfill\n * for browsers that don't support native or HTML MediaSources..\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class FlashMediaSource\n * @extends videojs.EventTarget\n */\n\nvar FlashMediaSource = (function (_videojs$EventTarget) {\n  _inherits(FlashMediaSource, _videojs$EventTarget);\n\n  function FlashMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, FlashMediaSource);\n\n    _get(Object.getPrototypeOf(FlashMediaSource.prototype), 'constructor', this).call(this);\n    this.sourceBuffers = [];\n    this.readyState = 'closed';\n\n    this.on(['sourceopen', 'webkitsourceopen'], function (event) {\n      // find the swf where we will push media data\n      _this.swfObj = _globalDocument2['default'].getElementById(event.swfId);\n      _this.player_ = (0, _videoJs2['default'])(_this.swfObj.parentNode);\n      _this.tech_ = _this.swfObj.tech;\n      _this.readyState = 'open';\n\n      _this.tech_.on('seeking', function () {\n        var i = _this.sourceBuffers.length;\n\n        while (i--) {\n          _this.sourceBuffers[i].abort();\n        }\n      });\n\n      if (_this.tech_.hls) {\n        _this.tech_.hls.on('dispose', function () {\n          (0, _cleanupTextTracks.cleanupTextTracks)(_this.player_);\n        });\n      }\n\n      // trigger load events\n      if (_this.swfObj) {\n        _this.swfObj.vjs_load();\n      }\n    });\n  }\n\n  /**\n    * Set or return the presentation duration.\n    *\n    * @param {Double} value the duration of the media in seconds\n    * @param {Double} the current presentation duration\n    * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n    */\n\n  /**\n   * We have this function so that the html and flash interfaces\n   * are the same.\n   *\n   * @private\n   */\n\n  _createClass(FlashMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_() {}\n    // intentional no-op\n\n    /**\n     * Create a new flash source buffer and add it to our flash media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the source\n     * @return {Object} the flash source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n      var sourceBuffer = undefined;\n\n      // if this is an FLV type, we'll push data to flash\n      if (parsedType.type === 'video/mp2t' || parsedType.type === 'audio/mp2t') {\n        // Flash source buffers\n        sourceBuffer = new _flashSourceBuffer2['default'](this);\n      } else {\n        throw new Error('NotSupportedError (Video.js)');\n      }\n\n      this.sourceBuffers.push(sourceBuffer);\n      return sourceBuffer;\n    }\n\n    /**\n     * Signals the end of the stream.\n     *\n     * @link https://w3c.github.io/media-source/#widl-MediaSource-endOfStream-void-EndOfStreamError-error\n     * @param {String=} error Signals that a playback error\n     * has occurred. If specified, it must be either \"network\" or\n     * \"decode\".\n     */\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream(error) {\n      if (error === 'network') {\n        // MEDIA_ERR_NETWORK\n        this.tech_.error(2);\n      } else if (error === 'decode') {\n        // MEDIA_ERR_DECODE\n        this.tech_.error(3);\n      }\n      if (this.readyState !== 'ended') {\n        this.readyState = 'ended';\n        this.swfObj.vjs_endOfStream();\n      }\n    }\n  }]);\n\n  return FlashMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashMediaSource;\ntry {\n  Object.defineProperty(FlashMediaSource.prototype, 'duration', {\n    /**\n     * Return the presentation duration.\n     *\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    get: function get() {\n      if (!this.swfObj) {\n        return NaN;\n      }\n      // get the current duration from the SWF\n      return this.swfObj.vjs_getProperty('duration');\n    },\n    /**\n     * Set the presentation duration.\n     *\n     * @param {Double} value the duration of the media in seconds\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    set: function set(value) {\n      var i = undefined;\n      var oldDuration = this.swfObj.vjs_getProperty('duration');\n\n      this.swfObj.vjs_setProperty('duration', value);\n\n      if (value < oldDuration) {\n        // In MSE, this triggers the range removal algorithm which causes\n        // an update to occur\n        for (i = 0; i < this.sourceBuffers.length; i++) {\n          this.sourceBuffers[i].remove(value, oldDuration);\n        }\n      }\n\n      return value;\n    }\n  });\n} catch (e) {\n  // IE8 throws if defineProperty is called on a non-DOM node. We\n  // don't support IE8 but we shouldn't throw an error if loaded\n  // there.\n  FlashMediaSource.prototype.duration = NaN;\n}\n\nfor (var property in _flashConstants2['default']) {\n  FlashMediaSource[property] = _flashConstants2['default'][property];\n}\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./flash-constants\":67,\"./flash-source-buffer\":69,\"global/document\":30}],69:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _flashTransmuxerWorker = require('./flash-transmuxer-worker');\n\nvar _flashTransmuxerWorker2 = _interopRequireDefault(_flashTransmuxerWorker);\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\n/**\n * A wrapper around the setTimeout function that uses\n * the flash constant time between ticks value.\n *\n * @param {Function} func the function callback to run\n * @private\n */\nvar scheduleTick = function scheduleTick(func) {\n  // Chrome doesn't invoke requestAnimationFrame callbacks\n  // in background tabs, so use setTimeout.\n  _globalWindow2['default'].setTimeout(func, _flashConstants2['default'].TIME_BETWEEN_CHUNKS);\n};\n\n/**\n * Generates a random string of max length 6\n *\n * @return {String} the randomly generated string\n * @function generateRandomString\n * @private\n */\nvar generateRandomString = function generateRandomString() {\n  return Math.random().toString(36).slice(2, 8);\n};\n\n/**\n * Round a number to a specified number of places much like\n * toFixed but return a number instead of a string representation.\n *\n * @param {Number} num A number\n * @param {Number} places The number of decimal places which to\n * round\n * @private\n */\nvar toDecimalPlaces = function toDecimalPlaces(num, places) {\n  if (typeof places !== 'number' || places < 0) {\n    places = 0;\n  }\n\n  var scale = Math.pow(10, places);\n\n  return Math.round(num * scale) / scale;\n};\n\n/**\n * A SourceBuffer implementation for Flash rather than HTML.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @param {Object} mediaSource the flash media source\n * @class FlashSourceBuffer\n * @extends videojs.EventTarget\n */\n\nvar FlashSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(FlashSourceBuffer, _videojs$EventTarget);\n\n  function FlashSourceBuffer(mediaSource) {\n    var _this = this;\n\n    _classCallCheck(this, FlashSourceBuffer);\n\n    _get(Object.getPrototypeOf(FlashSourceBuffer.prototype), 'constructor', this).call(this);\n    var encodedHeader = undefined;\n\n    // Start off using the globally defined value but refine\n    // as we append data into flash\n    this.chunkSize_ = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n    // byte arrays queued to be appended\n    this.buffer_ = [];\n\n    // the total number of queued bytes\n    this.bufferSize_ = 0;\n\n    // to be able to determine the correct position to seek to, we\n    // need to retain information about the mapping between the\n    // media timeline and PTS values\n    this.basePtsOffset_ = NaN;\n\n    this.mediaSource_ = mediaSource;\n\n    this.audioBufferEnd_ = NaN;\n    this.videoBufferEnd_ = NaN;\n\n    // indicates whether the asynchronous continuation of an operation\n    // is still being processed\n    // see https://w3c.github.io/media-source/#widl-SourceBuffer-updating\n    this.updating = false;\n    this.timestampOffset_ = 0;\n\n    encodedHeader = _globalWindow2['default'].btoa(String.fromCharCode.apply(null, Array.prototype.slice.call(_muxJsLibFlv2['default'].getFlvHeader())));\n\n    // create function names with added randomness for the global callbacks flash will use\n    // to get data from javascript into the swf. Random strings are added as a safety\n    // measure for pages with multiple players since these functions will be global\n    // instead of per instance. When making a call to the swf, the browser generates a\n    // try catch code snippet, but just takes the function name and writes out an unquoted\n    // call to that function. If the player id has any special characters, this will result\n    // in an error, so safePlayerId replaces all special characters to '_'\n    var safePlayerId = this.mediaSource_.player_.id().replace(/[^a-zA-Z0-9]/g, '_');\n\n    this.flashEncodedHeaderName_ = 'vjs_flashEncodedHeader_' + safePlayerId + generateRandomString();\n    this.flashEncodedDataName_ = 'vjs_flashEncodedData_' + safePlayerId + generateRandomString();\n\n    _globalWindow2['default'][this.flashEncodedHeaderName_] = function () {\n      delete _globalWindow2['default'][_this.flashEncodedHeaderName_];\n      return encodedHeader;\n    };\n\n    this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedHeaderName_);\n\n    this.transmuxer_ = (0, _webworkify2['default'])(_flashTransmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: {} });\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        _this.receiveBuffer_(event.data.segment);\n      }\n    };\n\n    this.one('updateend', function () {\n      _this.mediaSource_.tech_.trigger('loadedmetadata');\n    });\n\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          // We have to tell flash to expect a discontinuity\n          this.mediaSource_.swfObj.vjs_discontinuity();\n          // the media <-> PTS mapping must be re-established after\n          // the discontinuity\n          this.basePtsOffset_ = NaN;\n          this.audioBufferEnd_ = NaN;\n          this.videoBufferEnd_ = NaN;\n\n          this.transmuxer_.postMessage({ action: 'reset' });\n        }\n      }\n    });\n\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        if (!this.mediaSource_ || !this.mediaSource_.swfObj || !('vjs_getProperty' in this.mediaSource_.swfObj)) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        var buffered = this.mediaSource_.swfObj.vjs_getProperty('buffered');\n\n        if (buffered && buffered.length) {\n          buffered[0][0] = toDecimalPlaces(buffered[0][0], 3);\n          buffered[0][1] = toDecimalPlaces(buffered[0][1], 3);\n        }\n        return _videoJs2['default'].createTimeRanges(buffered);\n      }\n    });\n\n    // On a seek we remove all text track data since flash has no concept\n    // of a buffered-range and everything else is reset on seek\n    this.mediaSource_.player_.on('seeked', function () {\n      (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.metadataTrack_);\n      if (_this.inbandTextTracks_) {\n        for (var track in _this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.inbandTextTracks_[track]);\n        }\n      }\n    });\n\n    var onHlsReset = this.onHlsReset_.bind(this);\n\n    this.mediaSource_.player_.tech_.on('hls-reset', onHlsReset);\n\n    this.mediaSource_.player_.tech_.hls.on('dispose', function () {\n      _this.transmuxer_.terminate();\n      _this.mediaSource_.player_.tech_.off('hls-reset', onHlsReset);\n    });\n  }\n\n  /**\n   * Append bytes to the sourcebuffers buffer, in this case we\n   * have to append it to swf object.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n   * @param {Array} bytes\n   */\n\n  _createClass(FlashSourceBuffer, [{\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes) {\n      var error = undefined;\n\n      if (this.updating) {\n        error = new Error('SourceBuffer.append() cannot be called ' + 'while an update is in progress');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n      this.updating = true;\n      this.mediaSource_.readyState = 'open';\n      this.trigger({ type: 'update' });\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        data: bytes.buffer,\n        byteOffset: bytes.byteOffset,\n        byteLength: bytes.byteLength\n      }, [bytes.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Reset the parser and remove any data queued to be sent to the SWF.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      this.buffer_ = [];\n      this.bufferSize_ = 0;\n      this.mediaSource_.swfObj.vjs_abort();\n\n      // report any outstanding updates have ended\n      if (this.updating) {\n        this.updating = false;\n        this.trigger({ type: 'updateend' });\n      }\n    }\n\n    /**\n     * Flash cannot remove ranges already buffered in the NetStream\n     * but seeking clears the buffer entirely. For most purposes,\n     * having this operation act as a no-op is acceptable.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start start of the section to remove\n     * @param {Double} end end of the section to remove\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n      this.trigger({ type: 'update' });\n      this.trigger({ type: 'updateend' });\n    }\n\n    /**\n     * Receive a buffer from the flv.\n     *\n     * @param {Object} segment\n     * @private\n     */\n  }, {\n    key: 'receiveBuffer_',\n    value: function receiveBuffer_(segment) {\n      var _this2 = this;\n\n      // create an in-band caption track if one is present in the segment\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n      (0, _addTextTrackData.addTextTrackData)(this, segment.captions, segment.metadata);\n\n      // Do this asynchronously since convertTagsToData_ can be time consuming\n      scheduleTick(function () {\n        var flvBytes = _this2.convertTagsToData_(segment);\n\n        if (_this2.buffer_.length === 0) {\n          scheduleTick(_this2.processBuffer_.bind(_this2));\n        }\n\n        if (flvBytes) {\n          _this2.buffer_.push(flvBytes);\n          _this2.bufferSize_ += flvBytes.byteLength;\n        }\n      });\n    }\n\n    /**\n     * Append a portion of the current buffer to the SWF.\n     *\n     * @private\n     */\n  }, {\n    key: 'processBuffer_',\n    value: function processBuffer_() {\n      var _this3 = this;\n\n      var chunkSize = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n      if (!this.buffer_.length) {\n        if (this.updating !== false) {\n          this.updating = false;\n          this.trigger({ type: 'updateend' });\n        }\n        // do nothing if the buffer is empty\n        return;\n      }\n\n      // concatenate appends up to the max append size\n      var chunk = this.buffer_[0].subarray(0, chunkSize);\n\n      // requeue any bytes that won't make it this round\n      if (chunk.byteLength < chunkSize || this.buffer_[0].byteLength === chunkSize) {\n        this.buffer_.shift();\n      } else {\n        this.buffer_[0] = this.buffer_[0].subarray(chunkSize);\n      }\n\n      this.bufferSize_ -= chunk.byteLength;\n\n      // base64 encode the bytes\n      var binary = [];\n      var length = chunk.byteLength;\n\n      for (var i = 0; i < length; i++) {\n        binary.push(String.fromCharCode(chunk[i]));\n      }\n      var b64str = _globalWindow2['default'].btoa(binary.join(''));\n\n      _globalWindow2['default'][this.flashEncodedDataName_] = function () {\n        // schedule another processBuffer to process any left over data or to\n        // trigger updateend\n        scheduleTick(_this3.processBuffer_.bind(_this3));\n        delete _globalWindow2['default'][_this3.flashEncodedDataName_];\n        return b64str;\n      };\n\n      // Notify the swf that segment data is ready to be appended\n      this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedDataName_);\n    }\n\n    /**\n     * Turns an array of flv tags into a Uint8Array representing the\n     * flv data. Also removes any tags that are before the current\n     * time so that playback begins at or slightly after the right\n     * place on a seek\n     *\n     * @private\n     * @param {Object} segmentData object of segment data\n     */\n  }, {\n    key: 'convertTagsToData_',\n    value: function convertTagsToData_(segmentData) {\n      var segmentByteLength = 0;\n      var tech = this.mediaSource_.tech_;\n      var videoTargetPts = 0;\n      var segment = undefined;\n      var videoTags = segmentData.tags.videoTags;\n      var audioTags = segmentData.tags.audioTags;\n\n      // Establish the media timeline to PTS translation if we don't\n      // have one already\n      if (isNaN(this.basePtsOffset_) && (videoTags.length || audioTags.length)) {\n        // We know there is at least one video or audio tag, but since we may not have both,\n        // we use pts: Infinity for the missing tag. The will force the following Math.min\n        // call will to use the proper pts value since it will always be less than Infinity\n        var firstVideoTag = videoTags[0] || { pts: Infinity };\n        var firstAudioTag = audioTags[0] || { pts: Infinity };\n\n        this.basePtsOffset_ = Math.min(firstAudioTag.pts, firstVideoTag.pts);\n      }\n\n      if (tech.seeking()) {\n        // Do not use previously saved buffer end values while seeking since buffer\n        // is cleared on all seeks\n        this.videoBufferEnd_ = NaN;\n        this.audioBufferEnd_ = NaN;\n      }\n\n      if (isNaN(this.videoBufferEnd_)) {\n        if (tech.buffered().length) {\n          videoTargetPts = tech.buffered().end(0) - this.timestampOffset;\n        }\n\n        // Trim to currentTime if seeking\n        if (tech.seeking()) {\n          videoTargetPts = Math.max(videoTargetPts, tech.currentTime() - this.timestampOffset);\n        }\n\n        // PTS values are represented in milliseconds\n        videoTargetPts *= 1e3;\n        videoTargetPts += this.basePtsOffset_;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        videoTargetPts = this.videoBufferEnd_ + 0.1;\n      }\n\n      // filter complete GOPs with a presentation time less than the seek target/end of buffer\n      var currentIndex = videoTags.length;\n\n      // if the last tag is beyond videoTargetPts, then do not search the list for a GOP\n      // since our videoTargetPts lies in a future segment\n      if (currentIndex && videoTags[currentIndex - 1].pts >= videoTargetPts) {\n        // Start by walking backwards from the end of the list until we reach a tag that\n        // is equal to or less than videoTargetPts\n        while (--currentIndex) {\n          var currentTag = videoTags[currentIndex];\n\n          if (currentTag.pts > videoTargetPts) {\n            continue;\n          }\n\n          // if we see a keyFrame or metadata tag once we've gone below videoTargetPts,\n          // exit the loop as this is the start of the GOP that we want to append\n          if (currentTag.keyFrame || currentTag.metaDataTag) {\n            break;\n          }\n        }\n\n        // We need to check if there are any metadata tags that come before currentIndex\n        // as those will be metadata tags associated with the GOP we are appending\n        // There could be 0 to 2 metadata tags that come before the currentIndex depending\n        // on what videoTargetPts is and whether the transmuxer prepended metadata tags to this\n        // key frame\n        while (currentIndex) {\n          var nextTag = videoTags[currentIndex - 1];\n\n          if (!nextTag.metaDataTag) {\n            break;\n          }\n\n          currentIndex--;\n        }\n      }\n\n      var filteredVideoTags = videoTags.slice(currentIndex);\n\n      var audioTargetPts = undefined;\n\n      if (isNaN(this.audioBufferEnd_)) {\n        audioTargetPts = videoTargetPts;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        audioTargetPts = this.audioBufferEnd_ + 0.1;\n      }\n\n      if (filteredVideoTags.length) {\n        // If targetPts intersects a GOP and we appended the tags for the GOP that came\n        // before targetPts, we want to make sure to trim audio tags at the pts\n        // of the first video tag to avoid brief moments of silence\n        audioTargetPts = Math.min(audioTargetPts, filteredVideoTags[0].pts);\n      }\n\n      // skip tags with a presentation time less than the seek target/end of buffer\n      currentIndex = 0;\n\n      while (currentIndex < audioTags.length) {\n        if (audioTags[currentIndex].pts >= audioTargetPts) {\n          break;\n        }\n\n        currentIndex++;\n      }\n\n      var filteredAudioTags = audioTags.slice(currentIndex);\n\n      // update the audio and video buffer ends\n      if (filteredAudioTags.length) {\n        this.audioBufferEnd_ = filteredAudioTags[filteredAudioTags.length - 1].pts;\n      }\n      if (filteredVideoTags.length) {\n        this.videoBufferEnd_ = filteredVideoTags[filteredVideoTags.length - 1].pts;\n      }\n\n      var tags = this.getOrderedTags_(filteredVideoTags, filteredAudioTags);\n\n      if (tags.length === 0) {\n        return;\n      }\n\n      // If we are appending data that comes before our target pts, we want to tell\n      // the swf to adjust its notion of current time to account for the extra tags\n      // we are appending to complete the GOP that intersects with targetPts\n      if (tags[0].pts < videoTargetPts && tech.seeking()) {\n        var fudgeFactor = 1 / 30;\n        var currentTime = tech.currentTime();\n        var diff = (videoTargetPts - tags[0].pts) / 1e3;\n        var adjustedTime = currentTime - diff;\n\n        if (adjustedTime < fudgeFactor) {\n          adjustedTime = 0;\n        }\n\n        try {\n          this.mediaSource_.swfObj.vjs_adjustCurrentTime(adjustedTime);\n        } catch (e) {\n          // no-op for backwards compatability of swf. If adjustCurrentTime fails,\n          // the swf may incorrectly report currentTime and buffered ranges\n          // but should not affect playback over than the time displayed on the\n          // progress bar is inaccurate\n        }\n      }\n\n      // concatenate the bytes into a single segment\n      for (var i = 0; i < tags.length; i++) {\n        segmentByteLength += tags[i].bytes.byteLength;\n      }\n      segment = new Uint8Array(segmentByteLength);\n      for (var i = 0, j = 0; i < tags.length; i++) {\n        segment.set(tags[i].bytes, j);\n        j += tags[i].bytes.byteLength;\n      }\n\n      return segment;\n    }\n\n    /**\n     * Assemble the FLV tags in decoder order.\n     *\n     * @private\n     * @param {Array} videoTags list of video tags\n     * @param {Array} audioTags list of audio tags\n     */\n  }, {\n    key: 'getOrderedTags_',\n    value: function getOrderedTags_(videoTags, audioTags) {\n      var tag = undefined;\n      var tags = [];\n\n      while (videoTags.length || audioTags.length) {\n        if (!videoTags.length) {\n          // only audio tags remain\n          tag = audioTags.shift();\n        } else if (!audioTags.length) {\n          // only video tags remain\n          tag = videoTags.shift();\n        } else if (audioTags[0].dts < videoTags[0].dts) {\n          // audio should be decoded next\n          tag = audioTags.shift();\n        } else {\n          // video should be decoded next\n          tag = videoTags.shift();\n        }\n\n        tags.push(tag);\n      }\n\n      return tags;\n    }\n  }, {\n    key: 'onHlsReset_',\n    value: function onHlsReset_() {\n      this.transmuxer_.postMessage({ action: 'resetCaptions' });\n    }\n  }]);\n\n  return FlashSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./create-text-tracks-if-necessary\":66,\"./flash-constants\":67,\"./flash-transmuxer-worker\":70,\"./remove-cues-from-track\":72,\"global/window\":31,\"mux.js/lib/flv\":45,\"webworkify\":76}],70:[function(require,module,exports){\n/**\n * @file flash-transmuxer-worker.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment\n    });\n  });\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. The scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibFlv2['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit its\n     * results.\n     */\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar FlashTransmuxerWorker = function FlashTransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new FlashTransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/flv\":45}],71:[function(require,module,exports){\n(function (global){\n/**\n * @file html-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _virtualSourceBuffer = require('./virtual-source-buffer');\n\nvar _virtualSourceBuffer2 = _interopRequireDefault(_virtualSourceBuffer);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = (function (_videojs$EventTarget) {\n  _inherits(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, HtmlMediaSource);\n\n    _get(Object.getPrototypeOf(HtmlMediaSource.prototype), 'constructor', this).call(this);\n    var property = undefined;\n\n    this.nativeMediaSource_ = new _globalWindow2['default'].MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof this.nativeMediaSource_[property] === 'function') {\n        this[property] = this.nativeMediaSource_[property].bind(this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    this.duration_ = NaN;\n    Object.defineProperty(this, 'duration', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(this, 'seekable', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return _videoJs2['default'].createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(this, 'readyState', {\n      get: function get() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(this, 'activeSourceBuffers', {\n      get: function get() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    this.sourceBuffers = [];\n\n    this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          sourceBuffer.audioDisabled_ = disableAudioOnly;\n          if (disableAudioOnly) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = _globalDocument2['default'].querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = (0, _videoJs2['default'])(video.parentNode);\n\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    this.on('sourceended', function (event) {\n      var duration = (0, _addTextTrackData.durationOfVideo)(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      (0, _cleanupTextTracks.cleanupTextTracks)(this.player_);\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n      }\n    });\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  _createClass(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = undefined;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = undefined;\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = (0, _codecUtils.translateLegacyCodecs)(codecs);\n          codecs = codecs.filter(function (codec) {\n            return (0, _codecUtils.isAudioCodec)(codec) || (0, _codecUtils.isVideoCodec)(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new _virtualSourceBuffer2['default'](this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n\n  return HtmlMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = HtmlMediaSource;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./virtual-source-buffer\":75,\"global/document\":30,\"global/window\":31}],72:[function(require,module,exports){\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = undefined;\n  var cue = undefined;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\nexports[\"default\"] = removeCuesFromTrack;\nmodule.exports = exports[\"default\"];\n},{}],73:[function(require,module,exports){\n/**\n * @file transmuxer-worker.js\n */\n\n/**\n * videojs-contrib-media-sources\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Handles communication between the browser-world and the mux.js\n * transmuxer running inside of a WebWorker by exposing a simple\n * message-based interface to a Transmuxer object.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibMp4 = require('mux.js/lib/mp4');\n\nvar _muxJsLibMp42 = _interopRequireDefault(_muxJsLibMp4);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    // transfer ownership of the underlying ArrayBuffer\n    // instead of doing a copy to save memory\n    // ArrayBuffers are transferable but generic TypedArrays are not\n    // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n    var initArray = segment.initSegment;\n\n    segment.initSegment = {\n      data: initArray.buffer,\n      byteOffset: initArray.byteOffset,\n      byteLength: initArray.byteLength\n    };\n\n    var typedArray = segment.data;\n\n    segment.data = typedArray.buffer;\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment,\n      byteOffset: typedArray.byteOffset,\n      byteLength: typedArray.byteLength\n    }, [segment.data]);\n  });\n\n  if (transmuxer.captionStream) {\n    transmuxer.captionStream.on('data', function (caption) {\n      _globalWindow2['default'].postMessage({\n        action: 'caption',\n        data: caption\n      });\n    });\n  }\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibMp42['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n  }, {\n    key: 'setTimestampOffset',\n    value: function setTimestampOffset(data) {\n      var timestampOffset = data.timestampOffset || 0;\n\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n    }\n  }, {\n    key: 'setAudioAppendStart',\n    value: function setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n  }, {\n    key: 'flush',\n    value: function flush(data) {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar TransmuxerWorker = function TransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new TransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/mp4\":54}],74:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-media-sources.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _flashMediaSource = require('./flash-media-source');\n\nvar _flashMediaSource2 = _interopRequireDefault(_flashMediaSource);\n\nvar _htmlMediaSource = require('./html-media-source');\n\nvar _htmlMediaSource2 = _interopRequireDefault(_htmlMediaSource);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\nvar defaults = {\n  // how to determine the MediaSource implementation to use. There\n  // are three available modes:\n  // - auto: use native MediaSources where available and Flash\n  //   everywhere else\n  // - html5: always use native MediaSources\n  // - flash: always use the Flash MediaSource polyfill\n  mode: 'auto'\n};\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n_videoJs2['default'].mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = _videoJs2['default'].mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!_globalWindow2['default'].MediaSource && !!_globalWindow2['default'].MediaSource.isTypeSupported && _globalWindow2['default'].MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality such as flash and\n * video/mp2t videos. returns an instance of HtmlMediaSource or\n * FlashMediaSource depending on what is supported and what options\n * are passed in.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n * @param {Object} options options to use during setup.\n */\nvar MediaSource = function MediaSource(options) {\n  var settings = _videoJs2['default'].mergeOptions(defaults, options);\n\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  // determine whether HTML MediaSources should be used\n  if (settings.mode === 'html5' || settings.mode === 'auto' && supportsNativeMediaSources()) {\n    return new _htmlMediaSource2['default']();\n  } else if (_videoJs2['default'].getTech('Flash')) {\n    return new _flashMediaSource2['default']();\n  }\n\n  throw new Error('Cannot use Flash or Html5 to create a MediaSource for this video');\n};\n\nexports.MediaSource = MediaSource;\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = undefined;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof _htmlMediaSource2['default']) {\n      url = _globalWindow2['default'].URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof _flashMediaSource2['default'])) {\n      url = _globalWindow2['default'].URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    _videoJs2['default'].mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nexports.URL = URL;\n_videoJs2['default'].MediaSource = MediaSource;\n_videoJs2['default'].URL = URL;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./flash-media-source\":68,\"./html-media-source\":71,\"global/window\":31}],75:[function(require,module,exports){\n(function (global){\n/**\n * @file virtual-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _transmuxerWorker = require('./transmuxer-worker');\n\nvar _transmuxerWorker2 = _interopRequireDefault(_transmuxerWorker);\n\nvar _codecUtils = require('./codec-utils');\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function (key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get() {\n          return sourceBuffer[key];\n        },\n        set: function set(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    var _this = this;\n\n    _classCallCheck(this, VirtualSourceBuffer);\n\n    _get(Object.getPrototypeOf(VirtualSourceBuffer.prototype), 'constructor', this).call(this, _videoJs2['default'].EventTarget);\n    this.timestampOffset_ = 0;\n    this.pendingBuffers_ = [];\n    this.bufferUpdating_ = false;\n\n    this.mediaSource_ = mediaSource;\n    this.codecs_ = codecs;\n    this.audioCodec_ = null;\n    this.videoCodec_ = null;\n    this.audioDisabled_ = false;\n    this.appendAudioInitSegment_ = true;\n\n    var options = {\n      remux: false\n    };\n\n    this.codecs_.forEach(function (codec) {\n      if ((0, _codecUtils.isAudioCodec)(codec)) {\n        _this.audioCodec_ = codec;\n      } else if ((0, _codecUtils.isVideoCodec)(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    this.transmuxer_ = (0, _webworkify2['default'])(_transmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(this, 'appendWindowStart', {\n      get: function get() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(this, 'updating', {\n      get: function get() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        var start = null;\n        var end = null;\n        var arity = 0;\n        var extents = [];\n        var ranges = [];\n\n        // neither buffer has been created yet\n        if (!this.videoBuffer_ && !this.audioBuffer_) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // only one buffer is configured\n        if (!this.videoBuffer_) {\n          return this.audioBuffer_.buffered;\n        }\n        if (!this.audioBuffer_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are configured\n        if (this.audioDisabled_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are empty\n        if (this.videoBuffer_.buffered.length === 0 && this.audioBuffer_.buffered.length === 0) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // Handle the case where we have both buffers and create an\n        // intersection of the two\n        var videoBuffered = this.videoBuffer_.buffered;\n        var audioBuffered = this.audioBuffer_.buffered;\n        var count = videoBuffered.length;\n\n        // A) Gather up all start and end times\n        while (count--) {\n          extents.push({ time: videoBuffered.start(count), type: 'start' });\n          extents.push({ time: videoBuffered.end(count), type: 'end' });\n        }\n        count = audioBuffered.length;\n        while (count--) {\n          extents.push({ time: audioBuffered.start(count), type: 'start' });\n          extents.push({ time: audioBuffered.end(count), type: 'end' });\n        }\n        // B) Sort them by time\n        extents.sort(function (a, b) {\n          return a.time - b.time;\n        });\n\n        // C) Go along one by one incrementing arity for start and decrementing\n        //    arity for ends\n        for (count = 0; count < extents.length; count++) {\n          if (extents[count].type === 'start') {\n            arity++;\n\n            // D) If arity is ever incremented to 2 we are entering an\n            //    overlapping range\n            if (arity === 2) {\n              start = extents[count].time;\n            }\n          } else if (extents[count].type === 'end') {\n            arity--;\n\n            // E) If arity is ever decremented to 1 we leaving an\n            //    overlapping range\n            if (arity === 1) {\n              end = extents[count].time;\n            }\n          }\n\n          // F) Record overlapping ranges\n          if (start !== null && end !== null) {\n            ranges.push([start, end]);\n            start = null;\n            end = null;\n          }\n        }\n\n        return _videoJs2['default'].createTimeRanges(ranges);\n      }\n    });\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  _createClass(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        (0, _addTextTrackData.addTextTrackData)(this, sortedSegments.captions, sortedSegments.metadata);\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = undefined;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n\n  return VirtualSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = VirtualSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./codec-utils\":65,\"./create-text-tracks-if-necessary\":66,\"./remove-cues-from-track\":72,\"./transmuxer-worker\":73,\"webworkify\":76}],76:[function(require,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn) {\n    var keys = [];\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n    \n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        if (cache[key].exports === fn) {\n            wkey = key;\n            break;\n        }\n    }\n    \n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            Function(['require','module','exports'], '(' + fn + ')(self)'),\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n    \n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        Function(['require'],'require(' + stringify(wkey) + ')(self)'),\n        scache\n    ];\n    \n    var src = '(' + bundleFn + ')({'\n        + Object.keys(sources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n    \n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n    \n    return new Worker(URL.createObjectURL(\n        new Blob([src], { type: 'text/javascript' })\n    ));\n};\n\n},{}],77:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-hls.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-contrib-hls/blob/master/LICENSE\n */\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _xhr = require('./xhr');\n\nvar _xhr2 = _interopRequireDefault(_xhr);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\nvar _binUtils2 = _interopRequireDefault(_binUtils);\n\nvar _videojsContribMediaSources = require('videojs-contrib-media-sources');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _masterPlaylistController = require('./master-playlist-controller');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _renditionMixin = require('./rendition-mixin');\n\nvar _renditionMixin2 = _interopRequireDefault(_renditionMixin);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _playbackWatcher = require('./playback-watcher');\n\nvar _playbackWatcher2 = _interopRequireDefault(_playbackWatcher);\n\nvar _reloadSourceOnError = require('./reload-source-on-error');\n\nvar _reloadSourceOnError2 = _interopRequireDefault(_reloadSourceOnError);\n\nvar _playlistSelectorsJs = require('./playlist-selectors.js');\n\nvar Hls = {\n  PlaylistLoader: _playlistLoader2['default'],\n  Playlist: _playlist2['default'],\n  Decrypter: _aesDecrypter.Decrypter,\n  AsyncStream: _aesDecrypter.AsyncStream,\n  decrypt: _aesDecrypter.decrypt,\n  utils: _binUtils2['default'],\n\n  STANDARD_PLAYLIST_SELECTOR: _playlistSelectorsJs.lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: _playlistSelectorsJs.lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: _playlistSelectorsJs.comparePlaylistBandwidth,\n  comparePlaylistResolution: _playlistSelectorsJs.comparePlaylistResolution,\n\n  xhr: (0, _xhr2['default'])()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls, prop, {\n    get: function get() {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return _config2['default'][prop];\n    },\n    set: function set(value) {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        _videoJs2['default'].log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      _config2['default'][prop] = value;\n    }\n  });\n});\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls.canPlaySource = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls.supportsNativeHls = (function () {\n  var video = _globalDocument2['default'].createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!_videoJs2['default'].getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n})();\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls.isSupported = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar USER_AGENT = _globalWindow2['default'].navigator && _globalWindow2['default'].navigator.userAgent || '';\n\n/**\n * Determines whether the browser supports a change in the audio configuration\n * during playback. Currently only Firefox 48 and below do not support this.\n * window.isSecureContext is a propterty that was added to window in firefox 49,\n * so we can use it to detect Firefox 49+.\n *\n * @return {Boolean} Whether the browser supports audio config change during playback\n */\nHls.supportsAudioInfoChange_ = function () {\n  if (_videoJs2['default'].browser.IS_FIREFOX) {\n    var firefoxVersionMap = /Firefox\\/([\\d.]+)/i.exec(USER_AGENT);\n    var version = parseInt(firefoxVersionMap[1], 10);\n\n    return version >= 49;\n  }\n  return true;\n};\n\nvar Component = _videoJs2['default'].getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = (function (_Component) {\n  _inherits(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    var _this = this;\n\n    _classCallCheck(this, HlsHandler);\n\n    _get(Object.getPrototypeOf(HlsHandler.prototype), 'constructor', this).call(this, tech, options.hls);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = (0, _videoJs2['default'])(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get() {\n            _videoJs2['default'].log.warn('player.hls is deprecated. Use player.tech_.hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n    }\n\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n\n    // overriding native HLS only works if audio tracks have been emulated\n    // error early if we're misconfigured:\n    if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    this.on(_globalDocument2['default'], ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = _globalDocument2['default'].fullscreenElement || _globalDocument2['default'].webkitFullscreenElement || _globalDocument2['default'].mozFullScreenElement || _globalDocument2['default'].msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.fastQualityChange_();\n      }\n    });\n\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    this.audioTrackChange_ = function () {\n      _this.masterPlaylistController_.setupAudio();\n      _this.tech_.trigger({ type: 'usage', name: 'hls-audio-change' });\n    };\n\n    this.textTrackChange_ = function () {\n      _this.masterPlaylistController_.setupSubtitles();\n    };\n\n    this.on(this.tech_, 'play', this.play);\n  }\n\n  /**\n   * The Source Handler object, which informs video.js what additional\n   * MIME types are supported and sets up playback. It is registered\n   * automatically to the appropriate tech based on the capabilities of\n   * the browser it is running in. It is not necessary to use or modify\n   * this object in normal usage.\n   */\n\n  _createClass(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n  }, {\n    key: 'src',\n    value: function src(_src) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls;\n\n      this.masterPlaylistController_ = new _masterPlaylistController.MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new _playbackWatcher2['default'](_videoJs2['default'].mergeOptions(this.options_, {\n        seekable: function seekable() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = _videoJs2['default'].players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = undefined;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set() {\n            _videoJs2['default'].log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('sourceopen', function () {\n        _this3.tech_.audioTracks().addEventListener('change', _this3.audioTrackChange_);\n        _this3.tech_.remoteTextTracks().addEventListener('change', _this3.textTrackChange_);\n      });\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        (0, _renditionMixin2['default'])(_this3);\n      });\n\n      this.masterPlaylistController_.on('audioupdate', function () {\n        // clear current audioTracks\n        _this3.tech_.clearTracks('audio');\n        _this3.masterPlaylistController_.activeAudioGroup().forEach(function (audioTrack) {\n          _this3.tech_.audioTracks().addTrack(audioTrack);\n        });\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      // In the live case, we need to ignore the very first `seeking` event since\n      // that will be the result of the seek-to-live behavior\n      this.on(this.masterPlaylistController_, 'firstplay', function () {\n        this.ignoreNextSeekingEvent_ = true;\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(_videoJs2['default'].URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = _videoJs2['default'].players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * a helper for grabbing the active audio group from MasterPlaylistController\n     *\n     * @private\n     */\n  }, {\n    key: 'activeAudioGroup_',\n    value: function activeAudioGroup_() {\n      return this.masterPlaylistController_.activeAudioGroup();\n    }\n\n    /**\n     * Begin playing the video.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n    * Abort all outstanding work and cleanup.\n    */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      this.tech_.audioTracks().removeEventListener('change', this.audioTrackChange_);\n      this.tech_.remoteTextTracks().removeEventListener('change', this.textTrackChange_);\n      _get(Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n\n  return HlsHandler;\n})(Component);\n\nvar HlsSourceHandler = function HlsSourceHandler(mode) {\n  return {\n    canHandleSource: function canHandleSource(srcObj) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      // this forces video.js to skip this tech/mode if its not the one we have been\n      // overriden to use, by returing that we cannot handle the source.\n      if (localOptions.hls && localOptions.hls.mode && localOptions.hls.mode !== mode) {\n        return false;\n      }\n      return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n    },\n    handleSource: function handleSource(source, tech) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options, { hls: { mode: mode } });\n\n      if (mode === 'flash') {\n        // We need to trigger this asynchronously to give others the chance\n        // to bind to the event when a source is set at player creation\n        tech.setTimeout(function () {\n          tech.trigger('loadstart');\n        }, 1);\n      }\n\n      tech.hls = new HlsHandler(source, tech, localOptions);\n      tech.hls.xhr = (0, _xhr2['default'])();\n\n      tech.hls.src(source.src);\n      return tech.hls;\n    },\n    canPlayType: function canPlayType(type) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      if (HlsSourceHandler.canPlayType(type, localOptions)) {\n        return 'maybe';\n      }\n      return '';\n    }\n  };\n};\n\nHlsSourceHandler.canPlayType = function (type, options) {\n  // No support for IE 10 or below\n  if (_videoJs2['default'].browser.IE_VERSION && _videoJs2['default'].browser.IE_VERSION <= 10) {\n    return false;\n  }\n\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  // favor native HLS support if it's available\n  if (!options.hls.overrideNative && Hls.supportsNativeHls) {\n    return false;\n  }\n  return mpegurlRE.test(type);\n};\n\nif (typeof _videoJs2['default'].MediaSource === 'undefined' || typeof _videoJs2['default'].URL === 'undefined') {\n  _videoJs2['default'].MediaSource = _videojsContribMediaSources.MediaSource;\n  _videoJs2['default'].URL = _videojsContribMediaSources.URL;\n}\n\nvar flashTech = _videoJs2['default'].getTech('Flash');\n\n// register source handlers with the appropriate techs\nif (_videojsContribMediaSources.MediaSource.supportsNativeMediaSources()) {\n  _videoJs2['default'].getTech('Html5').registerSourceHandler(HlsSourceHandler('html5'), 0);\n}\nif (_globalWindow2['default'].Uint8Array && flashTech) {\n  flashTech.registerSourceHandler(HlsSourceHandler('flash'));\n}\n\n_videoJs2['default'].HlsHandler = HlsHandler;\n_videoJs2['default'].HlsSourceHandler = HlsSourceHandler;\n_videoJs2['default'].Hls = Hls;\nif (!_videoJs2['default'].use) {\n  _videoJs2['default'].registerComponent('Hls', Hls);\n}\n_videoJs2['default'].m3u8 = _m3u8Parser2['default'];\n_videoJs2['default'].options.hls = _videoJs2['default'].options.hls || {};\n\nif (_videoJs2['default'].registerPlugin) {\n  _videoJs2['default'].registerPlugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n} else {\n  _videoJs2['default'].plugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n}\n\nmodule.exports = {\n  Hls: Hls,\n  HlsHandler: HlsHandler,\n  HlsSourceHandler: HlsSourceHandler\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./master-playlist-controller\":5,\"./playback-watcher\":7,\"./playlist\":10,\"./playlist-loader\":8,\"./playlist-selectors.js\":9,\"./reload-source-on-error\":12,\"./rendition-mixin\":13,\"./xhr\":20,\"aes-decrypter\":24,\"global/document\":30,\"global/window\":31,\"m3u8-parser\":32,\"videojs-contrib-media-sources\":74}]},{},[77])(77)\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/videojs-contrib-hls/dist/videojs-contrib-hls.js\n// module id = 153\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('mu-appbar', {\n    staticClass: \"fixed\",\n    attrs: {\n      \"title\": \"主播\"\n    }\n  }, [_c('mu-icon-button', {\n    attrs: {\n      \"icon\": \"arrow_back\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.goback()\n      }\n    },\n    slot: \"left\"\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"padding-top\": \"66px\"\n    }\n  }, [_c('mu-card', [_c('mu-card-media', [_c('div', {\n    staticClass: \"player\",\n    attrs: {\n      \"id\": \"player\"\n    }\n  }, [_c('video-player', {\n    ref: \"videoPlayer\",\n    staticClass: \"vjs-custom-skin\",\n    attrs: {\n      \"options\": _vm.playerOptions,\n      \"playsinline\": true\n    }\n  })], 1)])], 1), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"right\": \"0\"\n    },\n    attrs: {\n      \"id\": \"chatview\"\n    }\n  }, [_c('iframe', {\n    attrs: {\n      \"src\": _vm.chaturl,\n      \"width\": \"100%\",\n      \"height\": \"100%\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('mu-dialog', {\n    attrs: {\n      \"open\": _vm.dialog,\n      \"title\": \"广告\"\n    }\n  }, [_c('h3', [_vm._v(\"因用户网络环境的不同，以及当前用户数量，看片时有时候会出现缓冲加载时间较长，您可以直接点击播放减少缓冲时间，如果感觉不是很流畅，可以先尝试去看其他片子，稍后再试！\")]), _vm._v(\" \"), _c('mu-flat-button', {\n    attrs: {\n      \"label\": \"关闭\",\n      \"primary\": \"\"\n    },\n    on: {\n      \"click\": function () {\n        _vm.dialog = false\n      }\n    },\n    slot: \"actions\"\n  })], 1)], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4da5a97e\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/LiveView.vue\n// module id = 161\n// module chunks = 0"],"sourceRoot":""}