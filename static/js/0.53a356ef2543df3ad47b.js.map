{"version":3,"sources":["webpack:///static/js/0.53a356ef2543df3ad47b.js","webpack:///./src/components/LiveView.vue","webpack:///LiveView.vue","webpack:///./src/components/LiveView.vue?194a","webpack:///./src/components/LiveView.vue?2bce","webpack:///./~/videojs-contrib-hls/dist/videojs-contrib-hls.js","webpack:///./src/components/LiveView.vue?ac4f"],"names":["webpackJsonp","139","module","exports","__webpack_require__","Component","150","__webpack_exports__","Object","defineProperty","value","name","mounted","this","setplayer","data","currentTab","dialog","videoplayerurl","playerOptions","beforeRouteEnter","to","from","next","vm","beforeRouteLeave","computed","videoObject","$store","state","liveobj","methods","_this","$http","get","serverUrl","alt","then","response","slist","push","type","src","body","withCredentials","aspectRatio","sources","controlBar","timeDivider","durationDisplay","fetchData","alert","handleTabChange","val","goback","$router","go","157","i","version","names","mappings","file","sourcesContent","sourceRoot","167","content","locals","175","global","require","f","define","e","t","n","r","s","o","u","a","Error","code","l","call","length","1","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","done","err","Array","isArray","TypeError","_globalWindow","_globalWindow2","obj","__esModule","default","findAdCue","track","mediaTime","cues","cue","adStartTime","adEndTime","updateAdCues","media","offset","arguments","segments","segment","duration","endTime","VTTCue","cueOut","parseFloat","addCue","adOffset","adTotal","_segment$cueOutCont$split$map","cueOutCont","split","map","_segment$cueOutCont$split$map2","global/window","2","textRange","range","start","end","formatHexString","toString","substring","formatAsciiString","String","fromCharCode","createTransferableMessage","message","transferable","keys","forEach","key","ArrayBuffer","isView","bytes","buffer","byteOffset","byteLength","initSegmentId","initSegment","byterange","Infinity","resolvedUri","join","utils","hexDump","prototype","slice","result","hex","ascii","j","tagDump","tag","textRanges","ranges","3","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","4","_aesDecrypter","_binUtils","DecrypterWorker","self","onmessage","event","encrypted","Uint8Array","Uint32Array","iv","Decrypter","postMessage","source","decrypted","./bin-utils","aes-decrypter","5","_interopRequireDefault","_classCallCheck","instance","Constructor","_inherits","subClass","superClass","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","descriptor","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","getter","parent","getPrototypeOf","_playlistLoader","_playlistLoader2","_segmentLoader","_segmentLoader2","_vttSegmentLoader","_vttSegmentLoader2","_ranges","_ranges2","_videoJs","window","_videoJs2","_adCueTags","_adCueTags2","_syncController","_syncController2","_videojsContribMediaSourcesEs5CodecUtils","_webworkify","_webworkify2","_decrypterWorker","_decrypterWorker2","_config","_config2","_utilCodecsJs","Hls","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","objectChanged","b","prop","mapLegacyAvcCodecs_","codecString","replace","match","translateLegacyCodecs","makeMimeTypeString","container","codecs","filter","c","getContainerType","getCodecs","mediaAttributes","attributes","CODECS","parseCodecs","mimeTypesForPlaylist_","master","containerType","codecInfo","isMuxed","isMaat","mediaGroups","AUDIO","audioGroup","groupId","uri","log","warn","codecStrings","video","audio","justAudio","justVideo","bothVideoAudio","MasterPlaylistController","_videojs$EventTarget","options","url","mode","tech","bandwidth","externHls","useCueTags","blacklistDuration","enableLowInitialPlaylist","tech_","hls_","hls","mode_","useCueTags_","cueTagsTrack_","addTextTrack","inBandMetadataTrackDispatchType","requestOptions_","timeout","audioGroups_","subtitleGroups_","groups","tracks","closedCaptionGroups_","mediaSource","MediaSource","audioinfo_","on","handleAudioinfoUpdate_","bind","addEventListener","handleSourceOpen_","seekable_","createTimeRanges","hasPlayed_","syncController_","segmentMetadataTrack_","addRemoteTextTrack","kind","label","decrypter_","segmentLoaderSettings","currentTime","seekable","seeking","hasPlayed","goalBufferLength","syncController","decrypter","masterPlaylistLoader_","setupMasterPlaylistLoaderListeners_","audioPlaylistLoader_","subtitlePlaylistLoader_","mergeOptions","segmentMetadataTrack","loaderType","subtitleSegmentLoader_","setupSegmentLoaderListeners_","load","_this2","requestTimeout","targetDuration","isLowestEnabledRendition_","endList","preload","playlist","fillAudioTracks_","setupAudio","fillSubtitleTracks_","setupSubtitles","triggerPresenceUsage_","fillClosedCaptionTracks_","setupSourceBuffers_","endOfStream","setupFirstPlay","trigger","updatedPlaylist","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","paused","addSeekableRange","addSeekableRange_","onDurationchange","one","blacklistCurrentPlaylist","error","abort","pause","activeAudioGroup","activeTrack","enabled","mediaGroupChanged","bubbles","stuckAtPlaylistEnd_","defaultDemuxed","audioGroupKeys","mediaGroup","properties","SUBTITLES","Playlist","isAes","isFmp4","_this3","nextPlaylist","currentPlaylist","buffered","forwardBuffer","bufferLowWaterLine","BANDWIDTH","onSyncInfoUpdate_","onEndOfStream","handleSubtitleError_","supportsAudioInfoChange_","audioInfo_","info","enabledIndex","indexOf","enabledTrack","defaultTrack","properties_","splice","Math","max","mediaSecondsLoaded","main","AudioTrack","id","audioTrackKind_","language","audioTrack","characteristics","forced","instreamId","videoPlaylist","trackName","activeSubtitleTrack_","getActiveAudioTrack_","stopAudioLoaders_","resyncAudioLoaders_","resetAudioLoaders_","dispose","resetEverything","setupAudioPlaylistLoader_","resyncLoader","_this4","audioPlaylist","playlists","_this5","subtitleGroup","activeSubtitleGroup_","subtitleProperties","subtitlePlaylist","resetLoader","ended","setCurrentTime","autoplay","play","isEndOfStream","ended_","expired","getExpiredTime","absolutePlaylistEnd","playlistEnd","TIME_FUDGE_FACTOR","bufferedEnd","isFinalRendition","isFinalRendition_","excludeUntil","Date","now","findRange","isFlash","supportsNativeMediaSources","mainSeekable","audioSeekable","_this6","oldDuration","newDuration","setDuration","removeEventListener","readyState","terminate","mimeTypes","mimeType","excludeIncompatibleVariants_","codecCount","variant","variantCodecs","isTypeSupported","initial","rate","min","EventTarget","./ad-cue-tags","./config","./decrypter-worker","./playlist-loader","./ranges","./segment-loader","./sync-controller","./util/codecs.js","./vtt-segment-loader","videojs-contrib-media-sources/es5/codec-utils","webworkify","6","REQUEST_ERRORS","FAILURE","TIMEOUT","ABORTED","byterangeStr","byterangeEnd","segmentXhrHeaders","headers","Range","abortAll","activeXhrs","xhr","getRequestStats","request","bytesReceived","roundTripTime","getProgressStats","progressEvent","requestTime","stats","loaded","floor","handleErrors","timedout","status","aborted","handleKeyResponse","finishProcessingFn","errorObj","view","DataView","getUint32","handleInitSegmentResponse","handleSegmentResponse","encryptedBytes","decryptSegment","doneFn","decryptionHandler","requestId","getMostImportantError","errors","reduce","prev","waitForCompletion","count","endOfAllRequests","worstError","handleProgress","progressFn","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","keyRequestOptions","responseType","keyRequestCallback","keyXhr","initSegmentOptions","initSegmentRequestCallback","initSegmentXhr","segmentRequestOptions","segmentRequestCallback","segmentXhr","7","timerCancelEvents","PlaybackWatcher","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","debug","logger_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","off","clearTimeout","checkCurrentTime_","setTimeout","waiting_","outsideOfSeekableWindow_","seekableEnd","printableRange","currentRange","fellOutOfLiveWindow_","livePoint","nextRange","findNextRange","videoUnderflow_","difference","skipTheGap_","gap","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","findGaps","8","_resolveUrl","_resolveUrl2","_playlistJs","_m3u8Parser","_m3u8Parser2","updateSegments","original","update","updateMaster","changed","mediaSequence","PlaylistLoader","srcUrl","loader","mediaUpdateTimeout","playlistRequestError","haveMetadata","startingState","setBandwidth","responseText","parser","refreshDelay","Parser","manifest","media_","stopRequest","oldRequest","onreadystatechange","enabledPlaylists_","isEnabled","currentBandwidth","Number","MAX_VALUE","mediaChange","req","syncInfo","time","started","mediaType","groupKey","labelKey","mediaProperties","VIDEO","CLOSED-CAPTIONS","location","href","./playlist.js","./resolve-url","m3u8-parser","9","_playlist","_playlist2","safeGetComputedStyle","el","getComputedStyle","stableSort","array","sortFn","newArray","sort","left","right","cmp","comparePlaylistBandwidth","leftBandwidth","rightBandwidth","comparePlaylistResolution","leftWidth","rightWidth","RESOLUTION","width","simpleSelector","playerBandwidth","playerWidth","playerHeight","sortedPlaylistReps","height","rep","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","lastBandwidthSelector","systemBandwidth","parseInt","movingAverageBandwidthSelector","decay","average","minRebufferMaxBandwidthSelector","settings","segmentDuration","timeUntilRebuffer","currentTimeline","bandwidthPlaylists","hasAttribute","rebufferingEstimates","syncPoint","getSyncPoint","numRequests","rebufferingImpact","estimateSegmentRequestTime","noRebufferingPlaylists","estimate","lowestBitrateCompatibleVariantSelector","./playlist","10","UNSAFE_LIVE_SEGMENTS","backwardDuration","endSequence","precise","forwardDuration","intervalDuration","backward","forward","totalDuration","sumDurations","startIndex","endIndex","durations","_ref","useSafeLiveEnd","seekableStart","createTimeRange","isWholeNumber","num","roundSignificantDigit","increment","numDecimalDigits","scale","pow","temp","ceilLeastSignificantDigit","floorLeastSignificantDigit","getMediaInfoForTime","startTime","numSegments","mediaIndex","isBlacklisted","blacklisted","disabled","attr","NaN","11","clamp","_ref2","filterRanges","timeRanges","predicate","results","findSoleUncommonTimeRangesEnd","edges","overlapsCurrentEnd","span","some","bufferIntersection","bufferA","bufferB","arity","extents","calculateBufferedPercent","adjustedRange","referenceRange","referenceDuration","adjustedDuration","bufferMissingFromAdjusted","adjustedIntersection","referenceIntersection","adjustedOverlap","referenceOverlap","getSegmentBufferedPercent","startOfSegment","endOfSegment","originalSegmentRange","adjustedSegmentRange","percent","isNaN","strArr","playbackRate","12","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","currentSource_","initPlugin","player","lastCalled","seekTo","localOptions","ready","loadedMetadataHandler","setSource","sourceObj","errorHandler","cleanupEvents","reinitPlugin","newOptions","reloadSourceOnError","13","enableFunction","playlistUri","changePlaylistFn","enable","currentlyEnabled","Representation","hlsHandler","fastChangeFunction","masterPlaylistController_","fastQualityChange_","resolution","renditionSelectionMixin","representations","14","_urlToolkit","_urlToolkit2","resolveUrl","baseURL","relativeURL","test","buildAbsoluteURL","url-toolkit","15","_x4","_x5","_x6","_sourceUpdater","_sourceUpdater2","_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs","_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2","_mediaSegmentRequest","_playlistSelectors","detectEndOfStream","segmentIndex","appendedLastSegment","finite","isFinite","SegmentLoader","throughput","roundTrip","resetStats_","currentTime_","seeking_","duration_","mediaSource_","loaderType_","goalBufferLength_","checkBufferTimeout_","error_","currentTimeline_","pendingSegment_","mimeType_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","syncPoint_","fetchAtBuffer_","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","abort_","monitorBuffer_","abortRequests","_error","set","storedMap","playlist_","setDateTimeMapping","couldBeginLoading_","init_","newPlaylist","oldPlaylist","segmentInfo","mediaSequenceDiff","saveExpiredSegmentInfo","_mimeType","remove","monitorBufferTick_","fillBuffer_","updating","checkBuffer_","buffered_","timeline","timestampOffset","reset","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","segmentIndexArray","isSyncRequest","random","measuredBandwidth","requestTimeRemaining","switchCandidate","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","removeToTime","processSegmentResponse_","handleSegment_","probeSegmentInfo","initId","appendBuffer","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","Cue","WebKitDataCue","JSON","stringify","./media-segment-request","./playlist-selectors","./source-updater","videojs-contrib-media-sources/es5/remove-cues-from-track.js","16","noop","SourceUpdater","createSourceBuffer","sourceBuffer_","addSourceBuffer","onUpdateendCallback_","pendingCallback","pendingCallback_","runCallback_","callbacks_","timestampOffset_","processedAppend_","queueCallback_","callback","callbacks","shift","17","_muxJsLibMp4Probe","_muxJsLibMp4Probe2","_muxJsLibToolsTsInspectorJs","syncPointStrategies","run","datetimeToDisplayTime","dateTimeObject","getTime","lastDistance","distance","abs","discontinuityStarts","discontinuity","discontinuitySequence","discontinuitySync","discontinuities","SyncController","inspectCache_","timelines","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","timingInfo","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timescales","timescale","timeInfo","inspect","segmentStartTime","segmentEndTime","dts","dtsTime","mappingObj","mapping","accuracy","mediaIndexDiff","mux.js/lib/mp4/probe","mux.js/lib/tools/ts-inspector.js","18","parsed","exec","19","VTT_LINE_TERMINATORS","char","charCodeAt","uintToString","uintArray","apply","VTTSegmentLoader","_SegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","_track","skipEmptySegments_","timestampOffsetForTimeline","checkTimestampOffset","empty","WebVTT","_ret","loadHandler","v","requested","parseVTTCues_","updateTimeMapping_","decoder","decodeBytesToString","TextDecoder","StringDecoder","vttjs","timestampmap","MPEGTS","LOCAL","oncue","ontimestampmap","onparsingerror","mapData","parse","segmentData","flush","diff","firstStart","lastStart","20","xhrFactory","XhrFunction","beforeRequest","reqResponse","responseTime","statusCode","originalAbort","21","precompute","tables","encTable","decTable","sbox","sboxInv","x","xInv","d","th","x2","x4","x8","tEnc","tDec","aesTables","AES","_tables","tmp","encKey","decKey","keyLen","rcon","_key","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","b2","c2","nInnerRounds","kIndex","table","table0","table1","table2","table3","22","_stream","_stream2","AsyncStream","_Stream","jobs","delay","timeout_","processJob_","job","./stream","23","_aes","_aes2","_asyncStream","_asyncStream2","_pkcs7","ntoh","word","decrypt","initVector","encrypted32","Int32Array","decipher","decrypted32","init0","init1","init2","init3","wordIx","step","STEP","asyncStream_","decryptChunk_","subarray","unpad","./aes","./async-stream","pkcs7","24","_decrypter","./decrypter","25","Stream","listeners","listener","index","args","destination","26","PADDING","plaintext","padding","27","pad","./pad.js","./unpad.js","28","padded","29","30","doccy","topLevel","minDoc","document","min-document","31","win","32","_lineStream","_lineStream2","_parseStream","_parseStream2","_parser","_parser2","LineStream","ParseStream","./line-stream","./parse-stream","./parser","33","_possibleConstructorReturn","ReferenceError","nextNewline","34","attributeSeparator","RegExp","parseAttributes","attrs","line","text","tagType","title","number","playlistType","allowed","URI","BYTERANGE","_attributes$BYTERANGE","_attributes$BYTERANGE2","dateTimeString","IV","toLowerCase","35","_extends","assign","hasOwnProperty","lineStream","parseStream","pipe","uris","currentUri","currentMap","defaultMediaGroups","allowCache","entry","rendition","allow-cache","endlist","inf","METHOD","method","media-sequence","discontinuity-sequence","playlist-type","stream-inf","TYPE","NAME","mediaGroupType","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","CHARACTERISTICS","FORCED","program-date-time","targetduration","totalduration","cue-out","cue-out-cont","cue-in","cueIn","comment","chunk","36","37","AacStream","everything","timeStamp","init","setTimestamp","timestamp","parseId3TagSize","header","byteIndex","returnSize","parseAdtsSize","lowThree","middle","bytesLeft","packet","tempLength","frameSize","pts","../utils/stream.js","38","ADTS_SAMPLING_FREQUENCIES","parseSyncSafeInteger","percentEncode","parseIso88591","unescape","parseType","parseSampleRate","parseAacTimestamp","frameStart","frame","owner","size","39","AdtsStream","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","audioobjecttype","channelcount","samplerate","samplingfrequencyindex","samplesize","40","H264Stream","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","ExpGolomb","swapBuffer","100","110","122","244","44","83","86","118","128","138","134","trackId","currentPts","currentDts","discardEmulationPreventionBytes","readSequenceParameterSet","skipScalingList","nalByteStream","nalUnitType","escapedRBSP","config","expGolombDecoder","deltaScale","lastScale","nextScale","readExpGolomb","newLength","newData","emulationPreventionBytesPositions","sourceIndex","profileIdc","levelIdc","profileCompatibility","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","readUnsignedByte","skipUnsignedExpGolomb","readUnsignedExpGolomb","skipBits","readBoolean","skipExpGolomb","readBits","ceil","../utils/exp-golomb.js","41","highPrefix","lowPrefix","zeroFill","coneOfSilence","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","metaTable","part","concat","42","CoalesceStream","numberOfTracks","metadataStream","videoTags","audioTags","videoTrack","pendingCaptions","pendingMetadata","pendingTracks","processedTracks","output","frames","tags","flushSource","id3","caption","timelineStartPts","captions","captionStreams","metadata","timelineStartInfo","startPts","endPts","stream","cueTime","dispatchType","43","FlvTag","getFlvHeader","metadataLength","headBytes","head","setUint8","setUint32","METADATA_TAG","writeMetaDataDouble","finalize","./flv-tag.js","extraData","adHoc","bufferStartSize","prepareWrite","flv","minLength","position","widthBytes","heightBytes","videocodecidBytes","keyFrame","VIDEO_TAG","AUDIO_TAG","writeBytes","writeByte","byte","writeShort","short","setUint16","negIndex","pos","nalUnitSize","startNalUnit","endNalUnit","nalContainer","nalStart","nalLength","setFloat64","writeMetaDataBoolean","dtsDelta","len","frameTime","isAudioFrame","isVideoFrame","isMetaData","isKeyFrame","45","Transmuxer","./flv-header","./flv-tag","./transmuxer","46","TagList","list","metaDataTag","47","VideoSegmentStream","AudioSegmentStream","collectTimelineInfo","extraDataTag","m2ts","sps","pps","oldExtraData","adtsFrames","round","currentFrame","adtsFrame","lastMetaPts","h264Frame","nalUnits","finishFrame","newMetadata","metaTag","extraTag","currentNal","packetStream","elementaryStream","videoTimestampRolloverStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","h264Stream","videoSegmentStream","audioSegmentStream","captionStream","coalesceStream","MetadataStream","TransportPacketStream","TransportParseStream","ElementaryStream","TimestampRolloverStream","CaptionStream","resetCaptions","../codecs/adts.js","../codecs/h264","../m2ts/m2ts.js","./coalesce-stream.js","./tag-list.js","48","parseSei","payloadType","payloadSize","payload","parseUserData","sei","parseCaptionPackets","userData","ccData","packetDropper","captionPackets_","ccStreams_","Cea608Stream","cc","latestDts_","ignoreNextEqualDts_","elem","idx","presortIndex","dispatchCea608Packet","activeCea608Channel_","activeCea608Streams_","ccStream","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","ROWS","createDisplayBuffer","BOTTOM_ROW","field","dataChannel","field_","dataChannel_","name_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","topRow_","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","row_","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","trim","BASE_","EXT_","CONTROL_","OFFSET_","format","reverse","popOn","baseRow","rollUp","paintOn","../utils/stream","49","StreamTypes","m2tsStreamTypes","bytesInBuffer","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","sectionLength","tableEnd","programInfoLength","processPes_","pid","streamType","STREAM_TYPES","h264","adts","timedMetadata","parsePes","pes","ptsDtsFlags","packetLength","dataAlignmentIndicator","flushStream","forceFlush","fragment","packetData","packetFlushable","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","k","baseMediaDecodeTime","codec","PAT_PID","MP2T_PACKET_LENGTH","./caption-stream","./metadata-stream","./stream-types","./stream-types.js","./timestamp-rollover-stream","50","parseUtf8","decodeURIComponent","tagParsers","TXXX","description","WXXX","PRIV","privateData","tagSize","bufferSize","frameHeader","console","51","parsePid","parsePayloadUnitStartIndicator","parseAdaptionField","pusi","payloadOffset","parsePesType","parsePesTime","parseNalUnitType","videoPacketContainsKeyFrame","nalType","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","52","53","handleRollover","reference","direction","lastDTS","referenceDTS","type_","54","generator","./mp4-generator","55","box","dinf","esds","ftyp","mdat","mfhd","minf","moof","moov","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun","types","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","UINT32_MAX","avc1","avcC","btrt","dref","mp4a","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","vmhd","sequenceNumber","trackFragments","boxes","flags","samples","dependsOn","isDependedOn","videoSample","audioSample","sequenceParameterSets","pictureParameterSets","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","dataOffset","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","audioTrun","videoTrun","trunHeader","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","hasRedundancy","paddingValue","isNonSyncSample","degradationPriority","fileType","movie","56","findBox","path","subresults","trafs","baseTimes","baseTime","57","createDefaultSample","isLikelyAacData","collectDtsInfo","clearDtsInfo","calculateTrackBaseMediaDecodeTime","arrayEquals","sumFrameByteLengths","mp4","clock","AUDIO_PROPERTIES","VIDEO_PROPERTIES","currentObj","sum","earliestAllowedDts","audioAppendStartTs","videoBaseMediaDecodeTime","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","trimAdtsFramesByEarliestDts_","prefixWithSilence_","generateSampleTable_","concatenateFrameData_","baseMediaDecodeTimeTs","silentFrame","frameDuration","audioGapDuration","audioFillFrameCount","audioFillDuration","audioTsToVideoTs","ONE_SECOND_IN_TS","videoTsToAudioTs","minSegmentDts","minSegmentPts","minPTS","gopCache_","nalUnit","gopForFusion","gops","resetStream_","groupNalsIntoFrames_","groupFramesIntoGops_","getGopForFusion_","unshift","nalCount","extendFirstKeyFrame_","concatenateNalData_","gop","pop","dtsDistance","nearestGopObj","currentGop","currentGopObj","nearestDistance","baseDataOffset","h","nalsByteLength","numberOfNals","totalByteLength","maxSegmentPts","maxSegmentDts","timeSinceStartOfTimeline","remux","remuxTracks","pendingBoxes","pendingBytes","emittedTracks","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","aacStream","headOfPipeline","setupTsPipeline","setBaseMediaDecodeTime","isAac","../aac","../data/silence","../utils/clock","./mp4-generator.js","58","probe","ts","aac","parsePsi_","parseAudioPes_","pesType","endLoop","parseVideoPes_","firstKeyFrame","adjustTimestamp_","baseTimestamp","audioBaseTimestamp","ptsTime","videoBaseTimestamp","inspectAac_","audioCount","sampleRate","audioTimescale","inspectTs_","isAacData","../aac/probe.js","../m2ts/probe.js","../m2ts/stream-types.js","../m2ts/timestamp-rollover-stream.js","59","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","seconds","60","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBytes","bits","valu","skipLeadingZeros","leadingZeroCount","clz","61","62","root","URLToolkit","relativeURLQuery","relativeURLHash","relativeURLHashSplit","relativeURLQuerySplit","baseURLHashSplit","baseURLQuerySplit","baseURLDomainSplit","baseURLProtocol","baseURLProtocolDomain","baseURLPath","builtURL","buildAbsolutePath","basePath","relativePath","nUpLn","nEnd","sRelPath","sDir","sPath","nStart","substr","amd","63","deprecateOldCue","durationOfVideo","addTextTrackData","sourceHandler","captionArray","metadataArray","inbandTextTracks_","videoDuration","metadataTrack_","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","nextTime","64","removeExistingTrack","remoteTextTracks","removeRemoteTextTrack","cleanupTextTracks","65","isAudioCodec","isVideoCodec","parseContentType","parameters","parameter","pair","_name","orig","profile","avcLevel","66","_cleanupTextTracks","createTextTracksIfNecessary","sourceBuffer","player_","textTracks","getTrackById","./cleanup-text-tracks","67","flashConstants","TIME_BETWEEN_CHUNKS","BYTES_PER_CHUNK","68","_globalDocument","_globalDocument2","_flashSourceBuffer","_flashSourceBuffer2","_flashConstants","_flashConstants2","_codecUtils","FlashMediaSource","sourceBuffers","swfObj","getElementById","swfId","parentNode","vjs_load","parsedType","vjs_endOfStream","vjs_getProperty","vjs_setProperty","./codec-utils","./flash-constants","./flash-source-buffer","global/document","69","_muxJsLibFlv","_muxJsLibFlv2","_removeCuesFromTrack","_removeCuesFromTrack2","_createTextTracksIfNecessary","_createTextTracksIfNecessary2","_addTextTrackData","_flashTransmuxerWorker","_flashTransmuxerWorker2","scheduleTick","func","generateRandomString","toDecimalPlaces","places","FlashSourceBuffer","encodedHeader","chunkSize_","buffer_","bufferSize_","basePtsOffset_","audioBufferEnd_","videoBufferEnd_","btoa","safePlayerId","flashEncodedHeaderName_","flashEncodedDataName_","vjs_appendChunkReady","transmuxer_","action","receiveBuffer_","vjs_discontinuity","onHlsReset","onHlsReset_","vjs_abort","flvBytes","convertTagsToData_","processBuffer_","chunkSize","binary","b64str","segmentByteLength","videoTargetPts","firstVideoTag","firstAudioTag","currentIndex","currentTag","filteredVideoTags","audioTargetPts","filteredAudioTags","getOrderedTags_","adjustedTime","vjs_adjustCurrentTime","./add-text-track-data","./create-text-tracks-if-necessary","./flash-transmuxer-worker","./remove-cues-from-track","mux.js/lib/flv","70","wireTransmuxerEvents","transmuxer","MessageHandlers","FlashTransmuxerWorker","messageHandlers","71","_virtualSourceBuffer","_virtualSourceBuffer2","HtmlMediaSource","nativeMediaSource_","activeSourceBuffers_","updateActiveSourceBuffers_","appendAudioInitSegment_","audioDisabled_","audioCodec_","disableCombined","disableAudioOnly","audioTracks","videoCodec_","onPlayerMediachange_","eventName","querySelector","url_","sourcebuffer","el_","createRealSourceBuffers_","./virtual-source-buffer","72","removeCuesFromTrack","removeCue","73","_muxJsLibMp4","_muxJsLibMp42","initArray","typedArray","appendStart","TransmuxerWorker","mux.js/lib/mp4","74","_flashMediaSource","_flashMediaSource2","_htmlMediaSource","_htmlMediaSource2","urlCount","defaults","mediaSources","open","msObjectURL","getTech","URL","createObjectURL","./flash-media-source","./html-media-source","75","_transmuxerWorker","_transmuxerWorker2","makeWrappedSourceBuffer","wrapper","realBuffer_","VirtualSourceBuffer","pendingBuffers_","bufferUpdating_","codecs_","data_","done_","videoBuffer_","audioBuffer_","appendWindowStart","videoBuffered","audioBuffered","processPendingSegments_","codecProperty","every","sortedSegments","segmentObj","concatAndAppendSegments_","destinationBuffer","tempBuffer","originalError","./transmuxer-worker","76","bundleFn","cache","fn","wkey","cacheKeys","wcache","skey","scache","webkitURL","mozURL","msURL","Worker","Blob","77","_xhr","_xhr2","_binUtils2","_videojsContribMediaSources","_masterPlaylistController","_renditionMixin","_renditionMixin2","_playbackWatcher","_playbackWatcher2","_reloadSourceOnError","_reloadSourceOnError2","_playlistSelectorsJs","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","handleHlsMediaChange","qualityLevels","playlistLoader","selectedIndex","selectedIndex_","handleHlsLoadedMetadata","addQualityLevel","canPlaySource","supportsNativeHls","createElement","isSupported","canItPlay","canPlayType","USER_AGENT","navigator","userAgent","browser","IS_FIREFOX","firefoxVersionMap","getComponent","HlsHandler","_Component","options_","playerId","_player","source_","ignoreNextSeekingEvent_","setOptions_","overrideNative","featuresNativeVideoTracks","featuresNativeAudioTracks","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","contains","pauseLoading","audioTrackChange_","textTrackChange_","option","_src","playbackWatcher_","players","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","clearTracks","addTrack","setupQualityLevels_","qualityLevels_","HlsSourceHandler","canHandleSource","srcObj","handleSource","IE_VERSION","mpegurlRE","flashTech","registerSourceHandler","use","registerComponent","m3u8","registerPlugin","plugin","./master-playlist-controller","./playback-watcher","./playlist-selectors.js","./reload-source-on-error","./rendition-mixin","./xhr","videojs-contrib-media-sources","178","render","_vm","_h","$createElement","_c","_self","staticClass","icon","click","$event","slot","_v","staticStyle","padding-top","ref","playsinline","change","primary","staticRenderFns"],"mappings":"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","file":"static/js/0.53a356ef2543df3ad47b.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 139:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(167)\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  __webpack_require__(150),\n  /* template */\n  __webpack_require__(178),\n  /* scopeId */\n  \"data-v-173eb0c8\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 150:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n\n__webpack_require__(175);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'livevideo',\n\n  mounted: function mounted() {\n\n    this.setplayer();\n  },\n  data: function data() {\n    return {\n      currentTab: 'tab1',\n      dialog: true,\n      videoplayerurl: '',\n\n      playerOptions: null\n    };\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.setplayer();\n    });\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.playerOptions = null;\n    next(true);\n  },\n\n  computed: {\n    videoObject: function videoObject() {\n      return this.$store.state.liveobj;\n    }\n  },\n  methods: {\n    setplayer: function setplayer() {\n      var _this = this;\n\n      this.$http.get(this.$store.state.serverUrl + \"/live/?name=\" + this.videoObject.alt).then(function (response) {\n\n        var slist = [];\n        slist.push({ type: \"application/x-mpegURL\", src: response.body, withCredentials: false });\n\n        _this.playerOptions = {\n          aspectRatio: '16:9',\n          sources: slist,\n          controlBar: {\n            timeDivider: false,\n            durationDisplay: false\n          }\n        };\n      }, function (response) {});\n    },\n    fetchData: function fetchData() {\n      alert('hello');\n    },\n    handleTabChange: function handleTabChange(val) {\n      this.currentTab = val;\n    },\n    goback: function goback() {\n      this.$router.go(-1);\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 157:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(132)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".flex[data-v-173eb0c8]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.desc-container[data-v-173eb0c8]{height:100%;overflow-y:scroll}img[data-v-173eb0c8]{width:100%}.fixed[data-v-173eb0c8]{position:fixed;top:0}\", \"\", {\"version\":3,\"sources\":[\"/Users/apple/mywebs/bb81_datas/clientapp/src/components/LiveView.vue\"],\"names\":[],\"mappings\":\"AACA,uBACC,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,4BAA6B,AAC7B,6BAA8B,AAC1B,0BAA2B,AACvB,sBAAuB,AAC/B,qBAAsB,AAClB,iBAAkB,AACtB,uBAAwB,AACpB,oBAAqB,AACjB,0BAA4B,CACpC,AACD,iCACC,YAAY,AACZ,iBAAmB,CACnB,AACD,qBACC,UAAY,CACZ,AACD,wBACC,eAAe,AACf,KAAO,CACP\",\"file\":\"LiveView.vue\",\"sourcesContent\":[\"\\n.flex[data-v-173eb0c8]{\\n display: -webkit-box;\\n display: -ms-flexbox;\\n display: flex;\\n -webkit-box-orient: vertical;\\n -webkit-box-direction: normal;\\n     -ms-flex-direction: column;\\n         flex-direction: column;\\n -ms-flex-wrap: nowrap;\\n     flex-wrap: nowrap;\\n -webkit-box-pack: start;\\n     -ms-flex-pack: start;\\n         justify-content: flex-start;\\n}\\n.desc-container[data-v-173eb0c8]{\\n height:100%;\\n overflow-y: scroll;\\n}\\nimg[data-v-173eb0c8] {\\n width: 100%;\\n}\\n.fixed[data-v-173eb0c8] {\\n position:fixed;\\n top: 0;\\n}\\n\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 167:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(157);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(133)(\"27171dba\", content, true);\n\n/***/ }),\n\n/***/ 175:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/**\n * videojs-contrib-hls\n * @version 5.10.0\n * @copyright 2017 Brightcove, Inc\n * @license Apache-2.0\n */\n(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.videojsContribHls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file ad-cue-tags.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = undefined;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = undefined;\n        var adTotal = undefined;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$split$map = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$split$map2 = _slicedToArray(_segment$cueOutCont$split$map, 2);\n\n        adOffset = _segment$cueOutCont$split$map2[0];\n        adTotal = _segment$cueOutCont$split$map2[1];\n\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\nexports['default'] = {\n  updateAdCues: updateAdCues,\n  findAdCue: findAdCue\n};\nmodule.exports = exports['default'];\n},{\"global/window\":31}],2:[function(require,module,exports){\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar utils = {\n  hexDump: function hexDump(data) {\n    var bytes = Array.prototype.slice.call(data);\n    var step = 16;\n    var result = '';\n    var hex = undefined;\n    var ascii = undefined;\n\n    for (var j = 0; j < bytes.length / step; j++) {\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n      result += hex + ' ' + ascii + '\\n';\n    }\n    return result;\n  },\n  tagDump: function tagDump(tag) {\n    return utils.hexDump(tag.bytes);\n  },\n  textRanges: function textRanges(ranges) {\n    var result = '';\n    var i = undefined;\n\n    for (i = 0; i < ranges.length; i++) {\n      result += textRange(ranges, i) + ' ';\n    }\n    return result;\n  },\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId\n};\n\nexports['default'] = utils;\nmodule.exports = exports['default'];\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\nmodule.exports = exports[\"default\"];\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\n/**\n * Our web worker interface so that things can talk to aes-decrypter\n * that will be running in a web worker. the scope is passed to this by\n * webworkify.\n *\n * @param {Object} self\n *        the scope for the web worker\n */\nvar DecrypterWorker = function DecrypterWorker(self) {\n  self.onmessage = function (event) {\n    var data = event.data;\n    var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n    /* eslint-disable no-new, handle-callback-err */\n    new _aesDecrypter.Decrypter(encrypted, key, iv, function (err, bytes) {\n      _globalWindow2['default'].postMessage((0, _binUtils.createTransferableMessage)({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n};\n\nexports['default'] = function (self) {\n  return new DecrypterWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"./bin-utils\":2,\"aes-decrypter\":24,\"global/window\":31}],5:[function(require,module,exports){\n(function (global){\n/**\n * @file master-playlist-controller.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _vttSegmentLoader = require('./vtt-segment-loader');\n\nvar _vttSegmentLoader2 = _interopRequireDefault(_vttSegmentLoader);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _adCueTags = require('./ad-cue-tags');\n\nvar _adCueTags2 = _interopRequireDefault(_adCueTags);\n\nvar _syncController = require('./sync-controller');\n\nvar _syncController2 = _interopRequireDefault(_syncController);\n\nvar _videojsContribMediaSourcesEs5CodecUtils = require('videojs-contrib-media-sources/es5/codec-utils');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _decrypterWorker = require('./decrypter-worker');\n\nvar _decrypterWorker2 = _interopRequireDefault(_decrypterWorker);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = undefined;\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\n/**\n * determine if an object a is differnt from\n * and object b. both only having one dimensional\n * properties\n *\n * @param {Object} a object one\n * @param {Object} b object two\n * @return {Boolean} if the object has changed or not\n */\nvar objectChanged = function objectChanged(a, b) {\n  if (typeof a !== typeof b) {\n    return true;\n  }\n  // if we have a different number of elements\n  // something has changed\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return true;\n  }\n\n  for (var prop in a) {\n    if (a[prop] !== b[prop]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs_ = function mapLegacyAvcCodecs_(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return (0, _videojsContribMediaSourcesEs5CodecUtils.translateLegacyCodecs)([match])[0];\n  });\n};\n\nexports.mapLegacyAvcCodecs_ = mapLegacyAvcCodecs_;\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return (0, _utilCodecsJs.parseCodecs)(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist_ = function mimeTypesForPlaylist_(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        if (!audioGroup[groupId].uri) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    _videoJs2['default'].log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n    codecInfo.audioProfile = defaultCodecs.audioProfile;\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is ano video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\nexports.mimeTypesForPlaylist_ = mimeTypesForPlaylist_;\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\n\nvar MasterPlaylistController = (function (_videojs$EventTarget) {\n  _inherits(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    var _this = this;\n\n    _classCallCheck(this, MasterPlaylistController);\n\n    _get(Object.getPrototypeOf(MasterPlaylistController.prototype), 'constructor', this).call(this);\n\n    var url = options.url;\n    var withCredentials = options.withCredentials;\n    var mode = options.mode;\n    var tech = options.tech;\n    var bandwidth = options.bandwidth;\n    var externHls = options.externHls;\n    var useCueTags = options.useCueTags;\n    var blacklistDuration = options.blacklistDuration;\n    var enableLowInitialPlaylist = options.enableLowInitialPlaylist;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.hls_ = tech.hls;\n    this.mode_ = mode;\n    this.useCueTags_ = useCueTags;\n    this.blacklistDuration = blacklistDuration;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    this.requestOptions_ = {\n      withCredentials: this.withCredentials,\n      timeout: null\n    };\n\n    this.audioGroups_ = {};\n    this.subtitleGroups_ = { groups: {}, tracks: {} };\n    this.closedCaptionGroups_ = { groups: {}, tracks: {} };\n\n    this.mediaSource = new _videoJs2['default'].MediaSource({ mode: mode });\n    this.audioinfo_ = null;\n    this.mediaSource.on('audioinfo', this.handleAudioinfoUpdate_.bind(this));\n\n    // load the media source into the player\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_.bind(this));\n\n    this.seekable_ = _videoJs2['default'].createTimeRanges();\n    this.hasPlayed_ = function () {\n      return false;\n    };\n\n    this.syncController_ = new _syncController2['default'](options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    this.decrypter_ = (0, _webworkify2['default'])(_decrypterWorker2['default']);\n\n    var segmentLoaderSettings = {\n      hls: this.hls_,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: function seekable() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_\n    };\n\n    // setup playlist loaders\n    this.masterPlaylistLoader_ = new _playlistLoader2['default'](url, this.hls_, this.withCredentials);\n    this.setupMasterPlaylistLoaderListeners_();\n    this.audioPlaylistLoader_ = null;\n    this.subtitlePlaylistLoader_ = null;\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    this.mainSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    this.audioSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    this.subtitleSegmentLoader_ = new _vttSegmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    this.masterPlaylistLoader_.load();\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  _createClass(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        _this2.fillAudioTracks_();\n        _this2.setupAudio();\n\n        _this2.fillSubtitleTracks_();\n        _this2.setupSubtitles();\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n        _this2.fillClosedCaptionTracks_();\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          _videoJs2['default'].log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('audioupdate');\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          var selectedMedia = undefined;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n        }\n\n        if (!updatedPlaylist.endList) {\n          (function () {\n            var addSeekableRange = function addSeekableRange() {\n              var seekable = _this2.seekable();\n\n              if (seekable.length !== 0) {\n                _this2.mediaSource.addSeekableRange_(seekable.start(0), seekable.end(0));\n              }\n            };\n\n            if (_this2.duration() !== Infinity) {\n              (function () {\n                var onDurationchange = function onDurationchange() {\n                  if (_this2.duration() === Infinity) {\n                    addSeekableRange();\n                  } else {\n                    _this2.tech_.one('durationchange', onDurationchange);\n                  }\n                };\n\n                _this2.tech_.one('durationchange', onDurationchange);\n              })();\n            } else {\n              addSeekableRange();\n            }\n          })();\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n        var activeAudioGroup = undefined;\n        var activeTrack = undefined;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n        _this2.mainSegmentLoader_.load();\n\n        // if the audio group has changed, a new audio track has to be\n        // enabled\n        activeAudioGroup = _this2.activeAudioGroup();\n        activeTrack = activeAudioGroup.filter(function (track) {\n          return track.enabled;\n        })[0];\n        if (!activeTrack) {\n          _this2.mediaGroupChanged();\n          _this2.trigger('audioupdate');\n        }\n        _this2.setupSubtitles();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < _config2['default'].MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.audioSegmentLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered with the current alternate audio track' + '. Switching back to default.');\n        _this3.audioSegmentLoader_.abort();\n        _this3.audioPlaylistLoader_ = null;\n        _this3.setupAudio();\n      });\n\n      this.subtitleSegmentLoader_.on('error', this.handleSubtitleError_.bind(this));\n    }\n  }, {\n    key: 'handleAudioinfoUpdate_',\n    value: function handleAudioinfoUpdate_(event) {\n      if (Hls.supportsAudioInfoChange_() || !this.audioInfo_ || !objectChanged(this.audioInfo_, event.info)) {\n        this.audioInfo_ = event.info;\n        return;\n      }\n\n      var error = 'had different audio properties (channels, sample rate, etc.) ' + 'or changed in some other way.  This behavior is currently ' + 'unsupported in Firefox 48 and below due to an issue: \\n\\n' + 'https://bugzilla.mozilla.org/show_bug.cgi?id=1247138\\n\\n';\n\n      var enabledIndex = this.activeAudioGroup().map(function (track) {\n        return track.enabled;\n      }).indexOf(true);\n      var enabledTrack = this.activeAudioGroup()[enabledIndex];\n      var defaultTrack = this.activeAudioGroup().filter(function (track) {\n        return track.properties_ && track.properties_['default'];\n      })[0];\n\n      // they did not switch audiotracks\n      // blacklist the current playlist\n      if (!this.audioPlaylistLoader_) {\n        error = 'The rendition that we tried to switch to ' + error + 'Unfortunately that means we will have to blacklist ' + 'the current playlist and switch to another. Sorry!';\n        this.blacklistCurrentPlaylist();\n      } else {\n        error = 'The audio track \\'' + enabledTrack.label + '\\' that we tried to ' + ('switch to ' + error + ' Unfortunately this means we will have to ') + ('return you to the main track \\'' + defaultTrack.label + '\\'. Sorry!');\n        defaultTrack.enabled = true;\n        this.activeAudioGroup().splice(enabledIndex, 1);\n        this.trigger('audioupdate');\n      }\n\n      _videoJs2['default'].log.warn(error);\n      this.setupAudio();\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * fill our internal list of HlsAudioTracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillAudioTracks_',\n    value: function fillAudioTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      // force a default if we have none or we are not\n      // in html5 mode (the only mode to support more than one\n      // audio track)\n      if (!mediaGroups || !mediaGroups.AUDIO || Object.keys(mediaGroups.AUDIO).length === 0 || this.mode_ !== 'html5') {\n        // \"main\" audio group, track name \"default\"\n        mediaGroups.AUDIO = { main: { 'default': { 'default': true } } };\n      }\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        if (!this.audioGroups_[mediaGroup]) {\n          this.audioGroups_[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n          var track = new _videoJs2['default'].AudioTrack({\n            id: label,\n            kind: this.audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            label: label\n          });\n\n          track.properties_ = properties;\n          this.audioGroups_[mediaGroup].push(track);\n        }\n      }\n\n      // enable the default active track\n      (this.activeAudioGroup().filter(function (audioTrack) {\n        return audioTrack.properties_['default'];\n      })[0] || this.activeAudioGroup()[0]).enabled = true;\n    }\n\n    /**\n     * Convert the properties of an HLS track into an audioTrackKind.\n     *\n     * @private\n     */\n  }, {\n    key: 'audioTrackKind_',\n    value: function audioTrackKind_(properties) {\n      var kind = properties['default'] ? 'main' : 'alternative';\n\n      if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n        kind = 'main-desc';\n      }\n\n      return kind;\n    }\n\n    /**\n     * fill our internal list of Subtitle Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillSubtitleTracks_',\n    value: function fillSubtitleTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups.SUBTITLES) {\n        if (!this.subtitleGroups_.groups[mediaGroup]) {\n          this.subtitleGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.SUBTITLES[mediaGroup]) {\n          var properties = mediaGroups.SUBTITLES[mediaGroup][label];\n\n          if (!properties.forced) {\n            this.subtitleGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n            if (typeof this.subtitleGroups_.tracks[label] === 'undefined') {\n              var track = this.tech_.addRemoteTextTrack({\n                id: label,\n                kind: 'subtitles',\n                enabled: false,\n                language: properties.language,\n                label: label\n              }, false).track;\n\n              this.subtitleGroups_.tracks[label] = track;\n            }\n          }\n        }\n      }\n\n      // Do not enable a default subtitle track. Wait for user interaction instead.\n    }\n\n    /**\n     * fill our internal list of Captions Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillClosedCaptionTracks_',\n    value: function fillClosedCaptionTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups['CLOSED-CAPTIONS']) {\n        if (!this.closedCaptionGroups_.groups[mediaGroup]) {\n          this.closedCaptionGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups['CLOSED-CAPTIONS'][mediaGroup]) {\n          var properties = mediaGroups['CLOSED-CAPTIONS'][mediaGroup][label];\n\n          // We only support CEA608 captions for now, so ignore anything that\n          // doesn't use a CCx INSTREAM-ID\n          if (!properties.instreamId.match(/CC\\d/)) {\n            continue;\n          }\n\n          this.closedCaptionGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n          if (typeof this.closedCaptionGroups_.tracks[label] === 'undefined') {\n            var track = this.tech_.addRemoteTextTrack({\n              id: properties.instreamId,\n              kind: 'captions',\n              enabled: false,\n              language: properties.language,\n              label: label\n            }, false).track;\n\n            this.closedCaptionGroups_.tracks[label] = track;\n          }\n        }\n      }\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Returns the audio group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeAudioGroup',\n    value: function activeAudioGroup() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (videoPlaylist.attributes.AUDIO) {\n        result = this.audioGroups_[videoPlaylist.attributes.AUDIO];\n      }\n\n      return result || this.audioGroups_.main;\n    }\n\n    /**\n     * Returns the subtitle group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeSubtitleGroup_',\n    value: function activeSubtitleGroup_() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (!videoPlaylist) {\n        return null;\n      }\n\n      if (videoPlaylist.attributes.SUBTITLES) {\n        result = this.subtitleGroups_.groups[videoPlaylist.attributes.SUBTITLES];\n      }\n\n      return result || this.subtitleGroups_.groups.main;\n    }\n  }, {\n    key: 'activeSubtitleTrack_',\n    value: function activeSubtitleTrack_() {\n      for (var trackName in this.subtitleGroups_.tracks) {\n        if (this.subtitleGroups_.tracks[trackName].mode === 'showing') {\n          return this.subtitleGroups_.tracks[trackName];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: 'handleSubtitleError_',\n    value: function handleSubtitleError_() {\n      _videoJs2['default'].log.warn('Problem encountered loading the subtitle track' + '. Switching back to default.');\n\n      this.subtitleSegmentLoader_.abort();\n\n      var track = this.activeSubtitleTrack_();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      this.setupSubtitles();\n    }\n\n    /**\n     * Determine the correct audio renditions based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is only called when the media-group changes\n     * and performs non-destructive 'resync' of the SegmentLoader(s) since\n     * the playlist has likely changed\n     */\n  }, {\n    key: 'mediaGroupChanged',\n    value: function mediaGroupChanged() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resyncAudioLoaders_(track);\n    }\n\n    /**\n     * Determine the correct audio rendition based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default audio track and should be\n     * invoked again if the track is changed. Performs destructive 'reset'\n     * on the SegmentLoaders(s) to ensure we start loading audio as\n     * close to currentTime as possible\n     */\n  }, {\n    key: 'setupAudio',\n    value: function setupAudio() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resetAudioLoaders_(track);\n    }\n\n    /**\n     * Returns the currently active track or the default track if none\n     * are active\n     */\n  }, {\n    key: 'getActiveAudioTrack_',\n    value: function getActiveAudioTrack_() {\n      // determine whether seperate loaders are required for the audio\n      // rendition\n      var audioGroup = this.activeAudioGroup();\n      var track = audioGroup.filter(function (audioTrack) {\n        return audioTrack.enabled;\n      })[0];\n\n      if (!track) {\n        track = audioGroup.filter(function (audioTrack) {\n          return audioTrack.properties_['default'];\n        })[0] || audioGroup[0];\n        track.enabled = true;\n      }\n\n      return track;\n    }\n\n    /**\n     * Destroy the PlaylistLoader and pause the SegmentLoader specifically\n     * for audio when switching audio tracks\n     */\n  }, {\n    key: 'stopAudioLoaders_',\n    value: function stopAudioLoaders_() {\n      // stop playlist and segment loading for audio\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n        this.audioPlaylistLoader_ = null;\n      }\n      this.audioSegmentLoader_.pause();\n    }\n\n    /**\n     * Destructive reset of the mainSegmentLoader (when audio is muxed)\n     * or audioSegmentLoader (when audio is demuxed) to prepare them\n     * to start loading new data right at currentTime\n     */\n  }, {\n    key: 'resetAudioLoaders_',\n    value: function resetAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        this.mainSegmentLoader_.resetEverything();\n        return;\n      }\n\n      this.audioSegmentLoader_.resetEverything();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Non-destructive resync of the audioSegmentLoader (when audio\n     * is demuxed) to prepare to continue appending new audio data\n     * at the end of the current buffered region\n     */\n  }, {\n    key: 'resyncAudioLoaders_',\n    value: function resyncAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        return;\n      }\n\n      this.audioSegmentLoader_.resyncLoader();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Setup a new audioPlaylistLoader and start the audioSegmentLoader\n     * to begin loading demuxed audio\n     */\n  }, {\n    key: 'setupAudioPlaylistLoader_',\n    value: function setupAudioPlaylistLoader_(track) {\n      var _this4 = this;\n\n      // startup playlist and segment loaders for the enabled audio\n      // track\n      this.audioPlaylistLoader_ = new _playlistLoader2['default'](track.properties_.resolvedUri, this.hls_, this.withCredentials);\n      this.audioPlaylistLoader_.load();\n\n      this.audioPlaylistLoader_.on('loadedmetadata', function () {\n        var audioPlaylist = _this4.audioPlaylistLoader_.media();\n\n        _this4.audioSegmentLoader_.playlist(audioPlaylist, _this4.requestOptions_);\n\n        // if the video is already playing, or if this isn't a live video and preload\n        // permits, start downloading segments\n        if (!_this4.tech_.paused() || audioPlaylist.endList && _this4.tech_.preload() !== 'none') {\n          _this4.audioSegmentLoader_.load();\n        }\n\n        if (!audioPlaylist.endList) {\n          _this4.audioPlaylistLoader_.trigger('firstplay');\n        }\n      });\n\n      this.audioPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = undefined;\n\n        if (_this4.audioPlaylistLoader_) {\n          updatedPlaylist = _this4.audioPlaylistLoader_.media();\n        }\n\n        if (!updatedPlaylist) {\n          // only one playlist to select\n          _this4.audioPlaylistLoader_.media(_this4.audioPlaylistLoader_.playlists.master.playlists[0]);\n          return;\n        }\n\n        _this4.audioSegmentLoader_.playlist(updatedPlaylist, _this4.requestOptions_);\n      });\n\n      this.audioPlaylistLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered loading the alternate audio track' + '. Switching back to default.');\n        _this4.audioSegmentLoader_.abort();\n        _this4.setupAudio();\n      });\n    }\n\n    /**\n     * Determine the correct subtitle playlist based on the active\n     * SubtitleTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default subtitle track and should be\n     * invoked again if the track is changed.\n     */\n  }, {\n    key: 'setupSubtitles',\n    value: function setupSubtitles() {\n      var _this5 = this;\n\n      var subtitleGroup = this.activeSubtitleGroup_();\n      var track = this.activeSubtitleTrack_();\n\n      this.subtitleSegmentLoader_.pause();\n\n      if (!track) {\n        // stop playlist and segment loading for subtitles\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n          this.subtitlePlaylistLoader_ = null;\n        }\n        return;\n      }\n\n      var properties = subtitleGroup.filter(function (subtitleProperties) {\n        return subtitleProperties.id === track.id;\n      })[0];\n\n      // startup playlist and segment loaders for the enabled subtitle track\n      if (!this.subtitlePlaylistLoader_ ||\n      // if the media hasn't loaded yet, we don't have the URI to check, so it is\n      // easiest to simply recreate the playlist loader\n      !this.subtitlePlaylistLoader_.media() || this.subtitlePlaylistLoader_.media().resolvedUri !== properties.resolvedUri) {\n\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n        }\n\n        // reset the segment loader only when the subtitle playlist is changed instead of\n        // every time setupSubtitles is called since switching subtitle tracks fires\n        // multiple `change` events on the TextTrackList\n        this.subtitleSegmentLoader_.resetEverything();\n\n        // can't reuse playlistloader because we're only using single renditions and not a\n        // proper master\n        this.subtitlePlaylistLoader_ = new _playlistLoader2['default'](properties.resolvedUri, this.hls_, this.withCredentials);\n\n        this.subtitlePlaylistLoader_.on('loadedmetadata', function () {\n          var subtitlePlaylist = _this5.subtitlePlaylistLoader_.media();\n\n          _this5.subtitleSegmentLoader_.playlist(subtitlePlaylist, _this5.requestOptions_);\n          _this5.subtitleSegmentLoader_.track(_this5.activeSubtitleTrack_());\n\n          // if the video is already playing, or if this isn't a live video and preload\n          // permits, start downloading segments\n          if (!_this5.tech_.paused() || subtitlePlaylist.endList && _this5.tech_.preload() !== 'none') {\n            _this5.subtitleSegmentLoader_.load();\n          }\n        });\n\n        this.subtitlePlaylistLoader_.on('loadedplaylist', function () {\n          var updatedPlaylist = undefined;\n\n          if (_this5.subtitlePlaylistLoader_) {\n            updatedPlaylist = _this5.subtitlePlaylistLoader_.media();\n          }\n\n          if (!updatedPlaylist) {\n            return;\n          }\n\n          _this5.subtitleSegmentLoader_.playlist(updatedPlaylist, _this5.requestOptions_);\n        });\n\n        this.subtitlePlaylistLoader_.on('error', this.handleSubtitleError_.bind(this));\n      }\n\n      if (this.subtitlePlaylistLoader_.media() && this.subtitlePlaylistLoader_.media().resolvedUri === properties.resolvedUri) {\n        this.subtitleSegmentLoader_.load();\n      } else {\n        this.subtitlePlaylistLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method may perform destructive actions, like\n     * removing already buffered content, to readjust the currently\n     * active playlist quickly.\n     *\n     * @private\n     */\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Begin playback.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.tech_.setCurrentTime(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable.start(0)) {\n          return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var seekable = undefined;\n      var media = this.masterPlaylistLoader_.media();\n\n      // check that everything is ready to begin buffering in the live\n      // scenario\n      // 1) the active media playlist is available\n      if (media &&\n      // 2) the player is not paused\n      !this.tech_.paused() &&\n      // 3) the player has not started playing\n      !this.hasPlayed_()) {\n\n        // when the video is a live stream\n        if (!media.endList) {\n          this.trigger('firstplay');\n\n          // seek to the latest media position for live videos\n          seekable = this.seekable();\n          if (seekable.length) {\n            this.tech_.setCurrentTime(seekable.end(0));\n          }\n        }\n        this.hasPlayed_ = function () {\n          return true;\n        };\n        // now that we are ready, load the segment\n        this.load();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        _videoJs2['default'].log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        this.tech_.play();\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.audioPlaylistLoader_) {\n        // if the audio playlist loader exists, then alternate audio is active, so we need\n        // to wait for both the main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable = this.seekable();\n\n      if (!seekable.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and\n      // buffer has reached absolute end of playlist\n      return bufferedEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR && absolutePlaylistEnd - bufferedEnd <= _ranges2['default'].TIME_FUDGE_FACTOR;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist(error, blacklistDuration) {\n      if (error === undefined) error = {};\n\n      var currentPlaylist = undefined;\n      var nextPlaylist = undefined;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.isFinalRendition_();\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        _videoJs2['default'].log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + (blacklistDuration ? blacklistDuration : this.blacklistDuration) * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      _videoJs2['default'].log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = _ranges2['default'].findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks\n      var isFlash = this.mode_ === 'flash' || this.mode_ === 'auto' && !_videoJs2['default'].MediaSource.supportsNativeMediaSources();\n\n      // if the seek location is already buffered, continue buffering as\n      // usual\n      if (buffered && buffered.length && !isFlash) {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = undefined;\n      var audioSeekable = undefined;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.audioPlaylistLoader_) {\n        media = this.audioPlaylistLoader_.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = _videoJs2['default'].createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this6.mediaSource.duration = newDuration;\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitlePlaylistLoader_.dispose();\n      }\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = undefined;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist_(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n      this.mainSegmentLoader_.mimeType(mimeTypes[0]);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1]);\n      }\n\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var master = this.masterPlaylistLoader_.master;\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = undefined;\n\n      if (media.attributes.CODECS) {\n        codecs = (0, _utilCodecsJs.parseCodecs)(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n      master.playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          var codecString = variant.attributes.CODECS;\n\n          variantCodecs = (0, _utilCodecsJs.parseCodecs)(codecString);\n\n          if (window.MediaSource && window.MediaSource.isTypeSupported && !window.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs_(codecString) + '\"')) {\n            variant.excludeUntil = Infinity;\n          }\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable = this.seekable();\n\n      if (seekable.length) {\n        offset = seekable.start(0);\n      }\n\n      _adCueTags2['default'].updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].GOAL_BUFFER_LENGTH;\n      var rate = _config2['default'].GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].BUFFER_LOW_WATER_LINE;\n      var rate = _config2['default'].BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n\n  return MasterPlaylistController;\n})(_videoJs2['default'].EventTarget);\n\nexports.MasterPlaylistController = MasterPlaylistController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ad-cue-tags\":1,\"./config\":3,\"./decrypter-worker\":4,\"./playlist-loader\":8,\"./ranges\":11,\"./segment-loader\":15,\"./sync-controller\":17,\"./util/codecs.js\":18,\"./vtt-segment-loader\":19,\"videojs-contrib-media-sources/es5/codec-utils\":65,\"webworkify\":76}],6:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\nexports.REQUEST_ERRORS = REQUEST_ERRORS;\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = undefined;\n  var byterangeEnd = undefined;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr) {\n    xhr.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage((0, _binUtils.createTransferableMessage)({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = _videoJs2['default'].mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr, xhrOptions, decryptionWorker, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, finishProcessingFn);\n    var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, finishProcessingFn);\n  var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\nexports.mediaSegmentRequest = mediaSegmentRequest;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2}],7:[function(require,module,exports){\n(function (global){\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = (function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    _classCallCheck(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'playback-watcher ->');\n    }\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  _createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = _globalWindow2['default'].setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + 0.1 >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies (e.g. The Flash tech does not fire a `waiting` event when the end\n        // of the buffer is reached and has fallen off the live window). Calling\n        // `techWaiting_` here allows us to simulate responding to a native `waiting` event\n        // when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.outsideOfSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + _ranges2['default'].printableRange(seekable) + '. Seeking to ') + (seekableEnd + '.'));\n        this.tech_.setCurrentTime(seekableEnd);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = _ranges2['default'].findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.fellOutOfLiveWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'outsideOfSeekableWindow_',\n    value: function outsideOfSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n      if (currentTime < seekable.start(0) - 0.1 || currentTime > seekable.end(seekable.length - 1) + 0.1) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'fellOutOfLiveWindow_',\n    value: function fellOutOfLiveWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.tech_.setCurrentTime(nextRange.start(0) + _ranges2['default'].TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = _ranges2['default'].findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return PlaybackWatcher;\n})();\n\nexports['default'] = PlaybackWatcher;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ranges\":11,\"global/window\":31}],8:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _resolveUrl = require('./resolve-url');\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _playlistJs = require('./playlist.js');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n  var length = undefined;\n  var i = undefined;\n\n  offset = offset || 0;\n  length = Math.min(original.length, update.length + offset);\n\n  for (i = offset; i < length; i++) {\n    result[i - offset] = (0, _videoJs.mergeOptions)(original[i], result[i - offset]);\n  }\n  return result;\n};\n\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var changed = false;\n  var result = (0, _videoJs.mergeOptions)(master, {});\n  var i = master.playlists.length;\n  var playlist = undefined;\n  var segment = undefined;\n  var j = undefined;\n\n  while (i--) {\n    playlist = result.playlists[i];\n    if (playlist.uri === media.uri) {\n      // consider the playlist unchanged if the number of segments\n      // are equal and the media sequence number is unchanged\n      if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n        continue;\n      }\n\n      result.playlists[i] = (0, _videoJs.mergeOptions)(playlist, media);\n      result.playlists[media.uri] = result.playlists[i];\n\n      // if the update could overlap existing segment information,\n      // merge the two lists\n      if (playlist.segments) {\n        result.playlists[i].segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n      }\n      // resolve any missing segment and key URIs\n      j = 0;\n      if (result.playlists[i].segments) {\n        j = result.playlists[i].segments.length;\n      }\n      while (j--) {\n        segment = result.playlists[i].segments[j];\n        if (!segment.resolvedUri) {\n          segment.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.uri);\n        }\n        if (segment.key && !segment.key.resolvedUri) {\n          segment.key.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.key.uri);\n        }\n        if (segment.map && !segment.map.resolvedUri) {\n          segment.map.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.map.uri);\n        }\n      }\n      changed = true;\n    }\n  }\n  return changed ? result : null;\n};\n\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\nvar PlaylistLoader = function PlaylistLoader(srcUrl, hls, withCredentials) {\n  var _this = this;\n\n  /* eslint-disable consistent-this */\n  var loader = this;\n  /* eslint-enable consistent-this */\n  var mediaUpdateTimeout = undefined;\n  var request = undefined;\n  var playlistRequestError = undefined;\n  var haveMetadata = undefined;\n\n  PlaylistLoader.prototype.constructor.call(this);\n\n  this.hls_ = hls;\n\n  if (!srcUrl) {\n    throw new Error('A non-empty playlist URL is required');\n  }\n\n  playlistRequestError = function (xhr, url, startingState) {\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    if (startingState) {\n      loader.state = startingState;\n    }\n\n    loader.error = {\n      playlist: loader.master.playlists[url],\n      status: xhr.status,\n      message: 'HLS playlist request error at URL: ' + url,\n      responseText: xhr.responseText,\n      code: xhr.status >= 500 ? 4 : 2\n    };\n\n    loader.trigger('error');\n  };\n\n  // update the playlist loader's state in response to a new or\n  // updated playlist.\n  haveMetadata = function (xhr, url) {\n    var parser = undefined;\n    var refreshDelay = undefined;\n    var update = undefined;\n\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    loader.state = 'HAVE_METADATA';\n\n    parser = new _m3u8Parser2['default'].Parser();\n    parser.push(xhr.responseText);\n    parser.end();\n    parser.manifest.uri = url;\n    // m3u8-parser does not attach an attributes property to media playlists so make\n    // sure that the property is attached to avoid undefined reference errors\n    parser.manifest.attributes = parser.manifest.attributes || {};\n\n    // merge this playlist into the master\n    update = updateMaster(loader.master, parser.manifest);\n    refreshDelay = (parser.manifest.targetDuration || 10) * 1000;\n    loader.targetDuration = parser.manifest.targetDuration;\n    if (update) {\n      loader.master = update;\n      loader.media_ = loader.master.playlists[parser.manifest.uri];\n    } else {\n      // if the playlist is unchanged since the last reload,\n      // try again after half the target duration\n      refreshDelay /= 2;\n      loader.trigger('playlistunchanged');\n    }\n\n    // refresh live playlists after a target duration passes\n    if (!loader.media().endList) {\n      _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(function () {\n        loader.trigger('mediaupdatetimeout');\n      }, refreshDelay);\n    }\n\n    loader.trigger('loadedplaylist');\n  };\n\n  // initialize the loader state\n  loader.state = 'HAVE_NOTHING';\n\n  /**\n   * Abort any outstanding work and clean up.\n   */\n  loader.dispose = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    loader.off();\n  };\n\n  loader.stopRequest = function () {\n    if (request) {\n      var oldRequest = request;\n\n      request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  };\n\n  /**\n   * Returns the number of enabled playlists on the master playlist object\n   *\n   * @return {Number} number of eneabled playlists\n   */\n  loader.enabledPlaylists_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length;\n  };\n\n  /**\n   * Returns whether the current playlist is the lowest rendition\n   *\n   * @return {Boolean} true if on lowest rendition\n   */\n  loader.isLowestEnabledRendition_ = function () {\n    if (loader.master.playlists.length === 1) {\n      return true;\n    }\n\n    var media = loader.media();\n\n    var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n    return loader.master.playlists.filter(function (playlist) {\n      var enabled = (0, _playlistJs.isEnabled)(playlist);\n\n      if (!enabled) {\n        return false;\n      }\n\n      return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n    }).length === 0;\n  };\n\n  /**\n   * Returns whether the current playlist is the final available rendition\n   *\n   * @return {Boolean} true if on final rendition\n   */\n  loader.isFinalRendition_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length === 1;\n  };\n\n  /**\n   * When called without any arguments, returns the currently\n   * active media playlist. When called with a single argument,\n   * triggers the playlist loader to asynchronously switch to the\n   * specified media playlist. Calling this method while the\n   * loader is in the HAVE_NOTHING causes an error to be emitted\n   * but otherwise has no effect.\n   *\n   * @param {Object=} playlist the parsed media playlist\n   * object to switch to\n   * @return {Playlist} the current loaded media\n   */\n  loader.media = function (playlist) {\n    var startingState = loader.state;\n    var mediaChange = undefined;\n\n    // getter\n    if (!playlist) {\n      return loader.media_;\n    }\n\n    // setter\n    if (loader.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + loader.state);\n    }\n\n    // find the playlist object if the target playlist has been\n    // specified by URI\n    if (typeof playlist === 'string') {\n      if (!loader.master.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = loader.master.playlists[playlist];\n    }\n\n    mediaChange = !loader.media_ || playlist.uri !== loader.media_.uri;\n\n    // switch to fully loaded playlists immediately\n    if (loader.master.playlists[playlist.uri].endList) {\n      // abort outstanding playlist requests\n      if (request) {\n        request.onreadystatechange = null;\n        request.abort();\n        request = null;\n      }\n      loader.state = 'HAVE_METADATA';\n      loader.media_ = playlist;\n\n      // trigger media change if the active media has been updated\n      if (mediaChange) {\n        loader.trigger('mediachanging');\n        loader.trigger('mediachange');\n      }\n      return;\n    }\n\n    // switching to the active playlist is a no-op\n    if (!mediaChange) {\n      return;\n    }\n\n    loader.state = 'SWITCHING_MEDIA';\n\n    // there is already an outstanding playlist request\n    if (request) {\n      if ((0, _resolveUrl2['default'])(loader.master.uri, playlist.uri) === request.url) {\n        // requesting to switch to the same playlist multiple times\n        // has no effect after the first\n        return;\n      }\n      request.onreadystatechange = null;\n      request.abort();\n      request = null;\n    }\n\n    // request the new playlist\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, playlist.uri, startingState);\n      }\n\n      haveMetadata(req, playlist.uri);\n\n      // fire loadedmetadata the first time a media playlist is loaded\n      if (startingState === 'HAVE_MASTER') {\n        loader.trigger('loadedmetadata');\n      } else {\n        loader.trigger('mediachange');\n      }\n    });\n  };\n\n  /**\n   * set the bandwidth on an xhr to the bandwidth on the playlist\n   */\n  loader.setBandwidth = function (xhr) {\n    loader.bandwidth = xhr.bandwidth;\n  };\n\n  // live playlist staleness timeout\n  loader.on('mediaupdatetimeout', function () {\n    if (loader.state !== 'HAVE_METADATA') {\n      // only refresh the media playlist if no other activity is going on\n      return;\n    }\n\n    loader.state = 'HAVE_CURRENT_METADATA';\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, loader.media().uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, loader.media().uri, 'HAVE_METADATA');\n      }\n      haveMetadata(request, loader.media().uri);\n    });\n  });\n\n  // setup initial sync info\n  loader.on('firstplay', function () {\n    var playlist = loader.media();\n\n    if (playlist) {\n      playlist.syncInfo = {\n        mediaSequence: playlist.mediaSequence,\n        time: 0\n      };\n    }\n  });\n\n  /**\n   * pause loading of the playlist\n   */\n  loader.pause = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    if (loader.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      loader.started = false;\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.load = function (isFinalRendition) {\n    var media = loader.media();\n\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n\n    if (isFinalRendition) {\n      var refreshDelay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(loader.load.bind(null, false), refreshDelay);\n      return;\n    }\n\n    if (!loader.started) {\n      loader.start();\n      return;\n    }\n\n    if (media && !media.endList) {\n      loader.trigger('mediaupdatetimeout');\n    } else {\n      loader.trigger('loadedplaylist');\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.start = function () {\n    loader.started = true;\n\n    // request the specified URL\n    request = _this.hls_.xhr({\n      uri: srcUrl,\n      withCredentials: withCredentials\n    }, function (error, req) {\n      var parser = undefined;\n      var playlist = undefined;\n      var i = undefined;\n\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      // clear the loader's request reference\n      request = null;\n\n      if (error) {\n        loader.error = {\n          status: req.status,\n          message: 'HLS playlist request error at URL: ' + srcUrl,\n          responseText: req.responseText,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        };\n        if (loader.state === 'HAVE_NOTHING') {\n          loader.started = false;\n        }\n        return loader.trigger('error');\n      }\n\n      parser = new _m3u8Parser2['default'].Parser();\n      parser.push(req.responseText);\n      parser.end();\n\n      loader.state = 'HAVE_MASTER';\n\n      parser.manifest.uri = srcUrl;\n\n      // loaded a master playlist\n      if (parser.manifest.playlists) {\n        loader.master = parser.manifest;\n\n        // setup by-URI lookups and resolve media playlist URIs\n        i = loader.master.playlists.length;\n        while (i--) {\n          playlist = loader.master.playlists[i];\n          loader.master.playlists[playlist.uri] = playlist;\n          playlist.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri);\n\n          if (!playlist.attributes) {\n            // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n            // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n            // formatted master playlist may not have an attribute list. An attributes\n            // property is added here to prevent undefined references when we encounter\n            // this scenario.\n            playlist.attributes = {};\n\n            _videoJs.log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n          }\n        }\n\n        // resolve any media group URIs\n        ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n          for (var groupKey in loader.master.mediaGroups[mediaType]) {\n            for (var labelKey in loader.master.mediaGroups[mediaType][groupKey]) {\n              var mediaProperties = loader.master.mediaGroups[mediaType][groupKey][labelKey];\n\n              if (mediaProperties.uri) {\n                mediaProperties.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, mediaProperties.uri);\n              }\n            }\n          }\n        });\n\n        loader.trigger('loadedplaylist');\n        if (!request) {\n          // no media playlist was specifically selected so start\n          // from the first listed one\n          loader.media(parser.manifest.playlists[0]);\n        }\n        return;\n      }\n\n      // loaded a media playlist\n      // infer a master playlist if none was previously requested\n      loader.master = {\n        mediaGroups: {\n          'AUDIO': {},\n          'VIDEO': {},\n          'CLOSED-CAPTIONS': {},\n          'SUBTITLES': {}\n        },\n        uri: _globalWindow2['default'].location.href,\n        playlists: [{\n          uri: srcUrl\n        }]\n      };\n      loader.master.playlists[srcUrl] = loader.master.playlists[0];\n      loader.master.playlists[0].resolvedUri = srcUrl;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      loader.master.playlists[0].attributes = loader.master.playlists[0].attributes || {};\n      haveMetadata(req, srcUrl);\n      return loader.trigger('loadedmetadata');\n    });\n  };\n};\n\nPlaylistLoader.prototype = new _videoJs.EventTarget();\n\nexports['default'] = PlaylistLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist.js\":10,\"./resolve-url\":14,\"global/window\":31,\"m3u8-parser\":32}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = undefined;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = undefined;\n  var rightBandwidth = undefined;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\nexports.comparePlaylistBandwidth = comparePlaylistBandwidth;\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = undefined;\n  var rightWidth = undefined;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\nexports.comparePlaylistResolution = comparePlaylistResolution;\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = undefined;\n    var height = undefined;\n    var bandwidth = undefined;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return _playlist2['default'].isEnabled(rep.playlist);\n  });\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * _config2['default'].BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = undefined;\n  var resolutionPlusOneSmallest = undefined;\n  var resolutionPlusOneRep = undefined;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  return (resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || sortedPlaylistReps[0]).playlist;\n};\n\nexports.simpleSelector = simpleSelector;\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\nexports.lastBandwidthSelector = lastBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @param {Number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\nvar movingAverageBandwidthSelector = function movingAverageBandwidthSelector(decay) {\n  var average = -1;\n\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n\n  return function () {\n    if (average < 0) {\n      average = this.systemBandwidth;\n    }\n\n    average = decay * this.systemBandwidth + (1 - decay) * average;\n    return simpleSelector(this.playlists.master, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n  };\n};\n\nexports.movingAverageBandwidthSelector = movingAverageBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master;\n  var currentTime = settings.currentTime;\n  var bandwidth = settings.bandwidth;\n  var duration = settings.duration;\n  var segmentDuration = settings.segmentDuration;\n  var timeUntilRebuffer = settings.timeUntilRebuffer;\n  var currentTimeline = settings.currentTimeline;\n  var syncController = settings.syncController;\n\n  var bandwidthPlaylists = master.playlists.filter(function (playlist) {\n    return _playlist2['default'].isEnabled(playlist) && _playlist2['default'].hasAttribute('BANDWIDTH', playlist);\n  });\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\nexports.minRebufferMaxBandwidthSelector = minRebufferMaxBandwidthSelector;\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(_playlist2['default'].isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return (0, _utilCodecsJs.parseCodecs)(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\nexports.lowestBitrateCompatibleVariantSelector = lowestBitrateCompatibleVariantSelector;\n},{\"./config\":3,\"./playlist\":10,\"./util/codecs.js\":18}],10:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar Playlist = {\n  /**\n   * The number of segments that are unsafe to start playback at in\n   * a live stream. Changing this value can cause playback stalls.\n   * See HTTP Live Streaming, \"Playing the Media Playlist File\"\n   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-18#section-6.3.3\n   */\n  UNSAFE_LIVE_SEGMENTS: 3\n};\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = undefined;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = undefined;\n  var forward = undefined;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return _globalWindow2['default'].Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\nexports.duration = duration;\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var i = startIndex; i < endIndex; i++) {\n    durations += playlist.segments[i].duration;\n  }\n\n  return durations;\n};\n\nexports.sumDurations = sumDurations;\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? Math.max(0, playlist.segments.length - Playlist.UNSAFE_LIVE_SEGMENTS) : Math.max(0, playlist.segments.length);\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\nexports.playlistEnd = playlistEnd;\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return (0, _videoJs.createTimeRange)();\n  }\n  return (0, _videoJs.createTimeRange)(seekableStart, seekableEnd);\n};\n\nexports.seekable = seekable;\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = undefined;\n  var segment = undefined;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\nexports.getMediaInfoForTime = getMediaInfoForTime;\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\nexports.isBlacklisted = isBlacklisted;\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\nexports.isEnabled = isEnabled;\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isAes = isAes;\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isFmp4 = isFmp4;\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\nexports.hasAttribute = hasAttribute;\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\nexports.estimateSegmentRequestTime = estimateSegmentRequestTime;\nPlaylist.duration = duration;\nPlaylist.seekable = seekable;\nPlaylist.getMediaInfoForTime = getMediaInfoForTime;\nPlaylist.isEnabled = isEnabled;\nPlaylist.isBlacklisted = isBlacklisted;\nPlaylist.playlistEnd = playlistEnd;\nPlaylist.isAes = isAes;\nPlaylist.isFmp4 = isFmp4;\nPlaylist.hasAttribute = hasAttribute;\nPlaylist.estimateSegmentRequestTime = estimateSegmentRequestTime;\n\n// exports\nexports['default'] = Playlist;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],11:[function(require,module,exports){\n(function (global){\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n\n/**\n * Clamps a value to within a range\n * @param {Number} num - the value to clamp\n * @param {Number} start - the start of the range to clamp within, inclusive\n * @param {Number} end - the end of the range to clamp within, inclusive\n * @return {Number}\n */\nvar clamp = function clamp(num, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var start = _ref2[0];\n  var end = _ref2[1];\n\n  return Math.min(Math.max(start, num), end);\n};\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = undefined;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return _videoJs2['default'].createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Search for a likely end time for the segment that was just appened\n * based on the state of the `buffered` property before and after the\n * append. If we fin only one such uncommon end-point return it.\n * @param {TimeRanges} original - the buffered time ranges before the update\n * @param {TimeRanges} update - the buffered time ranges after the update\n * @returns {Number|null} the end time added between `original` and `update`,\n * or null if one cannot be unambiguously determined.\n */\nvar findSoleUncommonTimeRangesEnd = function findSoleUncommonTimeRangesEnd(original, update) {\n  var i = undefined;\n  var start = undefined;\n  var end = undefined;\n  var result = [];\n  var edges = [];\n\n  // In order to qualify as a possible candidate, the end point must:\n  //  1) Not have already existed in the `original` ranges\n  //  2) Not result from the shrinking of a range that already existed\n  //     in the `original` ranges\n  //  3) Not be contained inside of a range that existed in `original`\n  var overlapsCurrentEnd = function overlapsCurrentEnd(span) {\n    return span[0] <= end && span[1] >= end;\n  };\n\n  if (original) {\n    // Save all the edges in the `original` TimeRanges object\n    for (i = 0; i < original.length; i++) {\n      start = original.start(i);\n      end = original.end(i);\n\n      edges.push([start, end]);\n    }\n  }\n\n  if (update) {\n    // Save any end-points in `update` that are not in the `original`\n    // TimeRanges object\n    for (i = 0; i < update.length; i++) {\n      start = update.start(i);\n      end = update.end(i);\n\n      if (edges.some(overlapsCurrentEnd)) {\n        continue;\n      }\n\n      // at this point it must be a unique non-shrinking end edge\n      result.push(end);\n    }\n  }\n\n  // we err on the side of caution and return null if didn't find\n  // exactly *one* differing end edge in the search above\n  if (result.length !== 1) {\n    return null;\n  }\n\n  return result[0];\n};\n\n/**\n * Calculate the intersection of two TimeRanges\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @returns {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\nvar bufferIntersection = function bufferIntersection(bufferA, bufferB) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return _videoJs2['default'].createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var count = bufferA.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: bufferA.start(count), type: 'start' });\n    extents.push({ time: bufferA.end(count), type: 'end' });\n  }\n  count = bufferB.length;\n  while (count--) {\n    extents.push({ time: bufferB.start(count), type: 'start' });\n    extents.push({ time: bufferB.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Calculates the percentage of `segmentRange` that overlaps the\n * `buffered` time ranges.\n * @param {TimeRanges} segmentRange - the time range that the segment\n * covers adjusted according to currentTime\n * @param {TimeRanges} referenceRange - the original time range that the\n * segment covers\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the currently buffered time ranges\n * @returns {Number} percent of the segment currently buffered\n */\nvar calculateBufferedPercent = function calculateBufferedPercent(adjustedRange, referenceRange, currentTime, buffered) {\n  var referenceDuration = referenceRange.end(0) - referenceRange.start(0);\n  var adjustedDuration = adjustedRange.end(0) - adjustedRange.start(0);\n  var bufferMissingFromAdjusted = referenceDuration - adjustedDuration;\n  var adjustedIntersection = bufferIntersection(adjustedRange, buffered);\n  var referenceIntersection = bufferIntersection(referenceRange, buffered);\n  var adjustedOverlap = 0;\n  var referenceOverlap = 0;\n\n  var count = adjustedIntersection.length;\n\n  while (count--) {\n    adjustedOverlap += adjustedIntersection.end(count) - adjustedIntersection.start(count);\n\n    // If the current overlap segment starts at currentTime, then increase the\n    // overlap duration so that it actually starts at the beginning of referenceRange\n    // by including the difference between the two Range's durations\n    // This is a work around for the way Flash has no buffer before currentTime\n    if (adjustedIntersection.start(count) === currentTime) {\n      adjustedOverlap += bufferMissingFromAdjusted;\n    }\n  }\n\n  count = referenceIntersection.length;\n\n  while (count--) {\n    referenceOverlap += referenceIntersection.end(count) - referenceIntersection.start(count);\n  }\n\n  // Use whichever value is larger for the percentage-buffered since that value\n  // is likely more accurate because the only way\n  return Math.max(adjustedOverlap, referenceOverlap) / referenceDuration * 100;\n};\n\n/**\n * Return the amount of a range specified by the startOfSegment and segmentDuration\n * overlaps the current buffered content.\n *\n * @param {Number} startOfSegment - the time where the segment begins\n * @param {Number} segmentDuration - the duration of the segment in seconds\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the state of the buffer\n * @returns {Number} percentage of the segment's time range that is\n * already in `buffered`\n */\nvar getSegmentBufferedPercent = function getSegmentBufferedPercent(startOfSegment, segmentDuration, currentTime, buffered) {\n  var endOfSegment = startOfSegment + segmentDuration;\n\n  // The entire time range of the segment\n  var originalSegmentRange = _videoJs2['default'].createTimeRanges([[startOfSegment, endOfSegment]]);\n\n  // The adjusted segment time range that is setup such that it starts\n  // no earlier than currentTime\n  // Flash has no notion of a back-buffer so adjustedSegmentRange adjusts\n  // for that and the function will still return 100% if a only half of a\n  // segment is actually in the buffer as long as the currentTime is also\n  // half-way through the segment\n  var adjustedSegmentRange = _videoJs2['default'].createTimeRanges([[clamp(startOfSegment, [currentTime, endOfSegment]), endOfSegment]]);\n\n  // This condition happens when the currentTime is beyond the segment's\n  // end time\n  if (adjustedSegmentRange.start(0) === adjustedSegmentRange.end(0)) {\n    return 0;\n  }\n\n  var percent = calculateBufferedPercent(adjustedSegmentRange, originalSegmentRange, currentTime, buffered);\n\n  // If the segment is reported as having a zero duration, return 0%\n  // since it is likely that we will need to fetch the segment\n  if (isNaN(percent) || percent === Infinity || percent === -Infinity) {\n    return 0;\n  }\n\n  return percent;\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\nexports['default'] = {\n  findRange: findRange,\n  findNextRange: findNextRange,\n  findGaps: findGaps,\n  findSoleUncommonTimeRangesEnd: findSoleUncommonTimeRangesEnd,\n  getSegmentBufferedPercent: getSegmentBufferedPercent,\n  TIME_FUDGE_FACTOR: TIME_FUDGE_FACTOR,\n  printableRange: printableRange,\n  timeUntilRebuffer: timeUntilRebuffer\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],12:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = _videoJs2['default'].mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      _videoJs2['default'].log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nexports['default'] = reloadSourceOnError;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _playlistJs = require('./playlist.js');\n\n/**\n * Enable/disable playlist function. It is intended to have the first two\n * arguments partially-applied in order to create the final per-playlist\n * function.\n *\n * @param {PlaylistLoader} playlist - The rendition or media-playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Boolean} The current enabled-state of the playlist\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn, enable) {\n  var playlist = loader.master.playlists[playlistUri];\n  var blacklisted = (0, _playlistJs.isBlacklisted)(playlist);\n  var currentlyEnabled = (0, _playlistJs.isEnabled)(playlist);\n\n  if (typeof enable === 'undefined') {\n    return currentlyEnabled;\n  }\n\n  if (enable) {\n    delete playlist.disabled;\n  } else {\n    playlist.disabled = true;\n  }\n\n  if (enable !== currentlyEnabled && !blacklisted) {\n    // Ensure the outside world knows about our changes\n    changePlaylistFn();\n    if (enable) {\n      loader.trigger('renditionenabled');\n    } else {\n      loader.trigger('renditiondisabled');\n    }\n  }\n  return enable;\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  _classCallCheck(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction.bind(this, hlsHandler.playlists, playlist.uri, fastChangeFunction);\n}\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n;\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !(0, _playlistJs.isBlacklisted)(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\nexports['default'] = renditionSelectionMixin;\nmodule.exports = exports['default'];\n},{\"./playlist.js\":10}],14:[function(require,module,exports){\n/**\n * @file resolve-url.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _urlToolkit = require('url-toolkit');\n\nvar _urlToolkit2 = _interopRequireDefault(_urlToolkit);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = _urlToolkit2['default'].buildAbsoluteURL(_globalWindow2['default'].location.href, baseURL);\n  }\n\n  return _urlToolkit2['default'].buildAbsoluteURL(baseURL, relativeURL);\n};\n\nexports['default'] = resolveUrl;\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"url-toolkit\":62}],15:[function(require,module,exports){\n(function (global){\n/**\n * @file segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _sourceUpdater = require('./source-updater');\n\nvar _sourceUpdater2 = _interopRequireDefault(_sourceUpdater);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar _mediaSegmentRequest = require('./media-segment-request');\n\nvar _ranges = require('./ranges');\n\nvar _playlistSelectors = require('./playlist-selectors');\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = (function (_videojs$EventTarget) {\n  _inherits(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    var _this = this;\n\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, SegmentLoader);\n\n    _get(Object.getPrototypeOf(SegmentLoader.prototype), 'constructor', this).call(this);\n    // check pre-conditions\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    this.state = 'INIT';\n    this.bandwidth = settings.bandwidth;\n    this.throughput = { rate: 0, count: 0 };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n\n    // private settings\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.hls_ = settings.hls;\n    this.loaderType_ = settings.loaderType;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n\n    // private instance variables\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.pendingSegment_ = null;\n    this.mimeType_ = null;\n    this.sourceUpdater_ = null;\n    this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {};\n\n    this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    this.fetchAtBuffer_ = false;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'segment-loader', this.loaderType_, '->');\n    }\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  _createClass(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new _sourceUpdater2['default'](this.mediaSource_, this.mimeType_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('mediaSequenceDiff', mediaSequenceDiff);\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     */\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     */\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything() {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_());\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end);\n      }\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = undefined;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      this.logger_('checkBuffer_', 'mediaIndex:', mediaIndex, 'hasPlayed:', hasPlayed, 'currentTime:', currentTime, 'syncPoint:', syncPoint, 'fetchAtBuffer:', this.fetchAtBuffer_, 'bufferedTime:', bufferedTime);\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        this.logger_('getSync', 'mediaIndex:', mediaIndex);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        this.logger_('walkForward', 'mediaIndex:', mediaIndex + 1);\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      }\n      this.logger_('getMediaIndexForTime', 'mediaIndex:', mediaIndex, 'startOfSegment:', startOfSegment);\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer = (0, _ranges.timeUntilRebuffer)(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer) {\n        return false;\n      }\n\n      var switchCandidate = (0, _playlistSelectors.minRebufferMaxBandwidthSelector)({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer <= _ranges.TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * _config2['default'].BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = (0, _mediaSegmentRequest.mediaSegmentRequest)(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var seekable = this.seekable_();\n      var currentTime = this.currentTime_();\n      var removeToTime = 0;\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      // If we have a seekable range use that as the limit for what can be removed safely\n      // otherwise remove anything older than 30 seconds before the current play head\n      if (seekable.length && seekable.start(0) > 0 && seekable.start(0) < currentTime) {\n        removeToTime = seekable.start(0);\n      } else {\n        removeToTime = currentTime - 30;\n      }\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      this.syncController_.probeSegmentInfo(segmentInfo);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        (function () {\n          var initId = (0, _binUtils.initSegmentId)(segment.map);\n\n          if (!_this3.activeInitSegmentId_ || _this3.activeInitSegmentId_ !== initId) {\n            var initSegment = _this3.initSegment(segment.map);\n\n            _this3.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n              _this3.activeInitSegmentId_ = initId;\n            });\n          }\n        })();\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      this.logger_('handleUpdateEnd_', 'segmentInfo:', this.pendingSegment_);\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n\n      var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n      var value = {\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n\n  return SegmentLoader;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./media-segment-request\":6,\"./playlist\":10,\"./playlist-selectors\":9,\"./ranges\":11,\"./source-updater\":16,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],16:[function(require,module,exports){\n(function (global){\n/**\n * @file source-updater.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar noop = function noop() {};\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n */\n\nvar SourceUpdater = (function () {\n  function SourceUpdater(mediaSource, mimeType) {\n    var _this = this;\n\n    _classCallCheck(this, SourceUpdater);\n\n    var createSourceBuffer = function createSourceBuffer() {\n      _this.sourceBuffer_ = mediaSource.addSourceBuffer(mimeType);\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      _this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this.pendingCallback_;\n\n        _this.pendingCallback_ = null;\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this.runCallback_();\n      };\n\n      _this.sourceBuffer_.addEventListener('updateend', _this.onUpdateendCallback_);\n\n      _this.runCallback_();\n    };\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', createSourceBuffer);\n    } else {\n      createSourceBuffer();\n    }\n  }\n\n  /**\n   * Aborts the current segment and resets the segment parser.\n   *\n   * @param {Function} done function to call when done\n   * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n   */\n\n  _createClass(SourceUpdater, [{\n    key: 'abort',\n    value: function abort(done) {\n      var _this2 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this2.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this3 = this;\n\n      this.processedAppend_ = true;\n\n      this.queueCallback_(function () {\n        _this3.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this4 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this4.sourceBuffer_.remove(start, end);\n        }, noop);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this5 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this5.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = undefined;\n\n      if (!this.updating() && this.callbacks_.length) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n\n  return SourceUpdater;\n})();\n\nexports['default'] = SourceUpdater;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],17:[function(require,module,exports){\n(function (global){\n/**\n * @file sync-controller.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _muxJsLibMp4Probe = require('mux.js/lib/mp4/probe');\n\nvar _muxJsLibMp4Probe2 = _interopRequireDefault(_muxJsLibMp4Probe);\n\nvar _muxJsLibToolsTsInspectorJs = require('mux.js/lib/tools/ts-inspector.js');\n\nvar _playlist = require('./playlist');\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (duration !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (syncController.datetimeToDisplayTime && playlist.dateTimeObject) {\n      var playlistTime = playlist.dateTimeObject.getTime() / 1000;\n      var playlistStart = playlistTime + syncController.datetimeToDisplayTime;\n      var syncPoint = {\n        time: playlistStart,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nexports.syncPointStrategies = syncPointStrategies;\n\nvar SyncController = (function (_videojs$EventTarget) {\n  _inherits(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, SyncController);\n\n    _get(Object.getPrototypeOf(SyncController.prototype), 'constructor', this).call(this);\n    // Segment Loader state variables...\n    // ...for synching across variants\n    this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    this.timelines = [];\n    this.discontinuities = [];\n    this.datetimeToDisplayTime = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'sync-controller ->');\n    }\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  _createClass(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + (0, _playlist.sumDurations)(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n          this.logger_('syncPoint found via <' + strategy.name + '>:', syncPoint);\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint with strategy <' + bestStrategy + '> chosen: ', bestSyncPoint);\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist sync:', newPlaylist.syncInfo);\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.dateTimeObject) {\n        var playlistTimestamp = playlist.dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timingInfo = undefined;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n        }\n      }\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = _muxJsLibMp4Probe2['default'].timescale(segment.map.bytes);\n      var startTime = _muxJsLibMp4Probe2['default'].startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = (0, _muxJsLibToolsTsInspectorJs.inspect)(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = undefined;\n      var segmentEndTime = undefined;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        this.logger_('tsO:', segmentInfo.timestampOffset);\n\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = undefined;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return SyncController;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SyncController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist\":10,\"mux.js/lib/mp4/probe\":56,\"mux.js/lib/tools/ts-inspector.js\":58}],18:[function(require,module,exports){\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = undefined;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc1)([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\nexports.parseCodecs = parseCodecs;\n},{}],19:[function(require,module,exports){\n(function (global){\n/**\n * @file vtt-segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\nvar uintToString = function uintToString(uintArray) {\n  return String.fromCharCode.apply(null, uintArray);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = (function (_SegmentLoader) {\n  _inherits(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, VTTSegmentLoader);\n\n    _get(Object.getPrototypeOf(VTTSegmentLoader.prototype), 'constructor', this).call(this, settings, options);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    this.mediaSource_ = null;\n\n    this.subtitlesTrack_ = null;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  _createClass(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return _videoJs2['default'].createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack} track\n     *        The text track to add loaded subtitles to\n     */\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this.state = 'READY';\n          if (!_this.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this2 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof _globalWindow2['default'].WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n        var _ret = (function () {\n\n          var loadHandler = function loadHandler() {\n            _this2.handleSegment_();\n          };\n\n          _this2.state = 'WAITING_ON_VTTJS';\n          _this2.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n          _this2.subtitlesTrack_.tech_.one('vttjserror', function () {\n            _this2.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n            _this2.error({\n              message: 'Error loading vtt.js'\n            });\n            _this2.state = 'READY';\n            _this2.pause();\n            _this2.trigger('error');\n          });\n\n          return {\n            v: undefined\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this2.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = undefined;\n      var decodeBytesToString = false;\n\n      if (typeof _globalWindow2['default'].TextDecoder === 'function') {\n        decoder = new _globalWindow2['default'].TextDecoder('utf8');\n      } else {\n        decoder = _globalWindow2['default'].WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        _videoJs2['default'].log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uintToString(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uintToString(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n\n  return VTTSegmentLoader;\n})(_segmentLoader2['default']);\n\nexports['default'] = VTTSegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./segment-loader\":15,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],20:[function(require,module,exports){\n(function (global){\n/**\n * @file xhr.js\n */\n\n/**\n * A wrapper for videojs.xhr that tracks bandwidth.\n *\n * @param {Object} options options for the XHR\n * @param {Function} callback the callback to call when done\n * @return {Request} the xhr request that is going to be made\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar xhrFactory = function xhrFactory() {\n  var xhr = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = (0, _videoJs.mergeOptions)({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || _videoJs2['default'].Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = (0, _videoJs.xhr)(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr;\n};\n\nexports['default'] = xhrFactory;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],21:[function(require,module,exports){\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = undefined;\n  var x = undefined;\n  var xInv = undefined;\n  var d = [];\n  var th = [];\n  var x2 = undefined;\n  var x4 = undefined;\n  var x8 = undefined;\n  var s = undefined;\n  var tEnc = undefined;\n  var tDec = undefined;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = (function () {\n  function AES(key) {\n    _classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = undefined;\n    var j = undefined;\n    var tmp = undefined;\n    var encKey = undefined;\n    var decKey = undefined;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n  _createClass(AES, [{\n    key: 'decrypt',\n    value: function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      var key = this._key[1];\n      // state variables a,b,c,d are loaded with pre-whitened data\n      var a = encrypted0 ^ key[0];\n      var b = encrypted3 ^ key[1];\n      var c = encrypted2 ^ key[2];\n      var d = encrypted1 ^ key[3];\n      var a2 = undefined;\n      var b2 = undefined;\n      var c2 = undefined;\n\n      // key.length === 2 ?\n      var nInnerRounds = key.length / 4 - 2;\n      var i = undefined;\n      var kIndex = 4;\n      var table = this._tables[1];\n\n      // load up the tables\n      var table0 = table[0];\n      var table1 = table[1];\n      var table2 = table[2];\n      var table3 = table[3];\n      var sbox = table[4];\n\n      // Inner rounds. Cribbed from OpenSSL.\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;b = b2;c = c2;\n      }\n\n      // Last round.\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;a = b;b = c;c = d;d = a2;\n      }\n    }\n  }]);\n\n  return AES;\n})();\n\nexports['default'] = AES;\nmodule.exports = exports['default'];\n},{}],22:[function(require,module,exports){\n/**\n * @file async-stream.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = (function (_Stream) {\n  _inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    _classCallCheck(this, AsyncStream);\n\n    _get(Object.getPrototypeOf(AsyncStream.prototype), 'constructor', this).call(this, _stream2['default']);\n    this.jobs = [];\n    this.delay = 1;\n    this.timeout_ = null;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n  _createClass(AsyncStream, [{\n    key: 'processJob_',\n    value: function processJob_() {\n      this.jobs.shift()();\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n  }, {\n    key: 'push',\n    value: function push(job) {\n      this.jobs.push(job);\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n  }]);\n\n  return AsyncStream;\n})(_stream2['default']);\n\nexports['default'] = AsyncStream;\nmodule.exports = exports['default'];\n},{\"./stream\":25}],23:[function(require,module,exports){\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _aes = require('./aes');\n\nvar _aes2 = _interopRequireDefault(_aes);\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nvar _pkcs7 = require('pkcs7');\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new _aes2['default'](Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = undefined;\n  var init1 = undefined;\n  var init2 = undefined;\n  var init3 = undefined;\n  var encrypted0 = undefined;\n  var encrypted1 = undefined;\n  var encrypted2 = undefined;\n  var encrypted3 = undefined;\n\n  // iteration variable\n  var wordIx = undefined;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\nexports.decrypt = decrypt;\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = (function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    _classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new _asyncStream2['default']();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, (0, _pkcs7.unpad)(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n  _createClass(Decrypter, [{\n    key: 'decryptChunk_',\n\n    /**\n     * @private\n     */\n    value: function decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        var bytes = decrypt(encrypted, key, initVector);\n\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }], [{\n    key: 'STEP',\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n})();\n\nexports.Decrypter = Decrypter;\nexports['default'] = {\n  Decrypter: Decrypter,\n  decrypt: decrypt\n};\n},{\"./aes\":21,\"./async-stream\":22,\"pkcs7\":27}],24:[function(require,module,exports){\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _decrypter = require('./decrypter');\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nexports['default'] = {\n  decrypt: _decrypter.decrypt,\n  Decrypter: _decrypter.Decrypter,\n  AsyncStream: _asyncStream2['default']\n};\nmodule.exports = exports['default'];\n},{\"./async-stream\":22,\"./decrypter\":23}],25:[function(require,module,exports){\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Stream = (function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      var index = undefined;\n\n      if (!this.listeners[type]) {\n        return false;\n      }\n      index = this.listeners[type].indexOf(listener);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = undefined;\n      var i = undefined;\n      var length = undefined;\n      var args = undefined;\n\n      callbacks = this.listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n})();\n\nexports['default'] = Stream;\nmodule.exports = exports['default'];\n},{}],26:[function(require,module,exports){\n/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nvar PADDING;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function pad(plaintext) {\n  var padding = PADDING[(plaintext.byteLength % 16) || 0],\n      result = new Uint8Array(plaintext.byteLength + padding.length);\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n  return result;\n};\n\n// pre-define the padding values\nPADDING = [\n  [16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16],\n\n  [15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15],\n\n  [14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14],\n\n  [13, 13, 13, 13,\n   13, 13, 13, 13,\n   13, 13, 13, 13,\n   13],\n\n  [12, 12, 12, 12,\n   12, 12, 12, 12,\n   12, 12, 12, 12],\n\n  [11, 11, 11, 11,\n   11, 11, 11, 11,\n   11, 11, 11],\n\n  [10, 10, 10, 10,\n   10, 10, 10, 10,\n   10, 10],\n\n  [9, 9, 9, 9,\n   9, 9, 9, 9,\n   9],\n\n  [8, 8, 8, 8,\n   8, 8, 8, 8],\n\n  [7, 7, 7, 7,\n   7, 7, 7],\n\n  [6, 6, 6, 6,\n   6, 6],\n\n  [5, 5, 5, 5,\n   5],\n\n  [4, 4, 4, 4],\n\n  [3, 3, 3],\n\n  [2, 2],\n\n  [1]\n];\n\n},{}],27:[function(require,module,exports){\n/*\n * pkcs7\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nexports.pad = require('./pad.js');\nexports.unpad = require('./unpad.js');\n\n},{\"./pad.js\":26,\"./unpad.js\":28}],28:[function(require,module,exports){\n/*\n * pkcs7.unpad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n};\n\n},{}],29:[function(require,module,exports){\n\n},{}],30:[function(require,module,exports){\n(function (global){\nvar topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"min-document\":29}],31:[function(require,module,exports){\n(function (global){\nvar win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],32:[function(require,module,exports){\n'use strict';\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nmodule.exports = {\n  LineStream: _lineStream2['default'],\n  ParseStream: _parseStream2['default'],\n  Parser: _parser2['default']\n}; /**\n    * @file m3u8/index.js\n    *\n    * Utilities for parsing M3U8 files. If the entire manifest is available,\n    * `Parser` will create an object representation with enough detail for managing\n    * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n    * that do not assume the entirety of the manifest is ready and expose a\n    * ReadableStream-like interface.\n    */\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./parser\":35}],33:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/line-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\nvar LineStream = function (_Stream) {\n  _inherits(LineStream, _Stream);\n\n  function LineStream() {\n    _classCallCheck(this, LineStream);\n\n    var _this = _possibleConstructorReturn(this, (LineStream.__proto__ || Object.getPrototypeOf(LineStream)).call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  _createClass(LineStream, [{\n    key: 'push',\n    value: function push(data) {\n      var nextNewline = void 0;\n\n      this.buffer += data;\n      nextNewline = this.buffer.indexOf('\\n');\n\n      for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n        this.trigger('data', this.buffer.substring(0, nextNewline));\n        this.buffer = this.buffer.substring(nextNewline + 1);\n      }\n    }\n  }]);\n\n  return LineStream;\n}(_stream2['default']);\n\nexports['default'] = LineStream;\n},{\"./stream\":36}],34:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parse-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  _inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    _classCallCheck(this, ParseStream);\n\n    return _possibleConstructorReturn(this, (ParseStream.__proto__ || Object.getPrototypeOf(ParseStream)).call(this));\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  _createClass(ParseStream, [{\n    key: 'push',\n    value: function push(line) {\n      var match = void 0;\n      var event = void 0;\n\n      // strip whitespace\n      line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n      if (line.length === 0) {\n        // ignore empty lines\n        return;\n      }\n\n      // URIs\n      if (line[0] !== '#') {\n        this.trigger('data', {\n          type: 'uri',\n          uri: line\n        });\n        return;\n      }\n\n      // Comments\n      if (line.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: line.slice(1)\n        });\n        return;\n      }\n\n      // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n      line = line.replace('\\r', '');\n\n      // Tags\n      match = /^#EXTM3U/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n        if (match[2]) {\n          event.title = match[2];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'totalduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'byterange'\n        };\n        if (match[1]) {\n          event.length = parseInt(match[1], 10);\n        }\n        if (match[2]) {\n          event.offset = parseInt(match[2], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n          if (attributes.BYTERANGE) {\n            var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n                _attributes$BYTERANGE2 = _slicedToArray(_attributes$BYTERANGE, 2),\n                length = _attributes$BYTERANGE2[0],\n                offset = _attributes$BYTERANGE2[1];\n\n            event.byterange = {};\n            if (length) {\n              event.byterange.length = parseInt(length, 10);\n            }\n            if (offset) {\n              event.byterange.offset = parseInt(offset, 10);\n            }\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n            event.attributes.RESOLUTION = resolution;\n          }\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ENDLIST/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          // parse the IV string into a Uint32Array\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n\n      // unknown tag type\n      this.trigger('data', {\n        type: 'tag',\n        data: line.slice(4)\n      });\n    }\n  }]);\n\n  return ParseStream;\n}(_stream2['default']);\n\nexports['default'] = ParseStream;\n},{\"./stream\":36}],35:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parser.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\nvar Parser = function (_Stream) {\n  _inherits(Parser, _Stream);\n\n  function Parser() {\n    _classCallCheck(this, Parser);\n\n    var _this = _possibleConstructorReturn(this, (Parser.__proto__ || Object.getPrototypeOf(Parser)).call(this));\n\n    _this.lineStream = new _lineStream2['default']();\n    _this.parseStream = new _parseStream2['default']();\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              this.manifest.dateTimeString = entry.dateTimeString;\n              this.manifest.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  _createClass(Parser, [{\n    key: 'push',\n    value: function push(chunk) {\n      this.lineStream.push(chunk);\n    }\n\n    /**\n     * Flush any remaining input. This can be handy if the last line of an M3U8\n     * manifest did not contain a trailing newline but the file has been\n     * completely received.\n     */\n\n  }, {\n    key: 'end',\n    value: function end() {\n      // flush any buffered input\n      this.lineStream.push('\\n');\n    }\n  }]);\n\n  return Parser;\n}(_stream2['default']);\n\nexports['default'] = Parser;\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./stream\":36}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n\n      var index = this.listeners[type].indexOf(listener);\n\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = this.listeners[type];\n      var i = void 0;\n      var length = void 0;\n      var args = void 0;\n\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n}();\n\nexports['default'] = Stream;\n},{}],37:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n\n},{\"../utils/stream.js\":61}],38:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n\n},{}],39:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n\n},{\"../utils/stream.js\":61}],40:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n\n},{\"../utils/exp-golomb.js\":60,\"../utils/stream.js\":61}],41:[function(require,module,exports){\nvar highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n\n},{}],42:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\n/**\n * The final stage of the transmuxer that emits the flv tags\n * for audio, video, and metadata. Also tranlates in time and\n * outputs caption data and id3 cues.\n */\nvar CoalesceStream = function(options) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = options.metadataStream;\n\n  this.videoTags = [];\n  this.audioTags = [];\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n      this.videoTags = output.tags;\n      this.pendingTracks++;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n      this.audioTags = output.tags;\n      this.pendingTracks++;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    id3,\n    caption,\n    i,\n    timelineStartPts,\n    event = {\n      tags: {},\n      captions: [],\n      captionStreams: {},\n      metadata: []\n    };\n\n  if (this.pendingTracks < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.pendingTracks === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.processedTracks++;\n\n      if (this.processedTracks < this.numberOfTracks) {\n        return;\n      }\n    }\n  }\n\n  this.processedTracks += this.pendingTracks;\n  this.pendingTracks = 0;\n\n  if (this.processedTracks < this.numberOfTracks) {\n    return;\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n  }\n\n  event.tags.videoTags = this.videoTags;\n  event.tags.audioTags = this.audioTags;\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = caption.startPts - timelineStartPts;\n    caption.startTime /= 90e3;\n    caption.endTime = caption.endPts - timelineStartPts;\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = id3.pts - timelineStartPts;\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.videoTags = [];\n  this.audioTags = [];\n  this.pendingCaptions.length = 0;\n  this.pendingMetadata.length = 0;\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  // Emit the final segment\n  this.trigger('data', event);\n\n  this.trigger('done');\n};\n\nmodule.exports = CoalesceStream;\n\n},{\"../utils/stream.js\":61}],43:[function(require,module,exports){\n'use strict';\n\nvar FlvTag = require('./flv-tag.js');\n\n// For information on the FLV format, see\n// http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf.\n// Technically, this function returns the header and a metadata FLV tag\n// if duration is greater than zero\n// duration in seconds\n// @return {object} the bytes of the FLV header as a Uint8Array\nvar getFlvHeader = function(duration, audio, video) { // :ByteArray {\n  var\n    headBytes = new Uint8Array(3 + 1 + 1 + 4),\n    head = new DataView(headBytes.buffer),\n    metadata,\n    result,\n    metadataLength;\n\n  // default arguments\n  duration = duration || 0;\n  audio = audio === undefined ? true : audio;\n  video = video === undefined ? true : video;\n\n  // signature\n  head.setUint8(0, 0x46); // 'F'\n  head.setUint8(1, 0x4c); // 'L'\n  head.setUint8(2, 0x56); // 'V'\n\n  // version\n  head.setUint8(3, 0x01);\n\n  // flags\n  head.setUint8(4, (audio ? 0x04 : 0x00) | (video ? 0x01 : 0x00));\n\n  // data offset, should be 9 for FLV v1\n  head.setUint32(5, headBytes.byteLength);\n\n  // init the first FLV tag\n  if (duration <= 0) {\n    // no duration available so just write the first field of the first\n    // FLV tag\n    result = new Uint8Array(headBytes.byteLength + 4);\n    result.set(headBytes);\n    result.set([0, 0, 0, 0], headBytes.byteLength);\n    return result;\n  }\n\n  // write out the duration metadata tag\n  metadata = new FlvTag(FlvTag.METADATA_TAG);\n  metadata.pts = metadata.dts = 0;\n  metadata.writeMetaDataDouble('duration', duration);\n  metadataLength = metadata.finalize().length;\n  result = new Uint8Array(headBytes.byteLength + metadataLength);\n  result.set(headBytes);\n  result.set(head.byteLength, metadataLength);\n\n  return result;\n};\n\nmodule.exports = getFlvHeader;\n\n},{\"./flv-tag.js\":44}],44:[function(require,module,exports){\n/**\n * An object that stores the bytes of an FLV tag and methods for\n * querying and manipulating that data.\n * @see http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf\n */\n'use strict';\n\nvar FlvTag;\n\n// (type:uint, extraData:Boolean = false) extends ByteArray\nFlvTag = function(type, extraData) {\n  var\n    // Counter if this is a metadata tag, nal start marker if this is a video\n    // tag. unused if this is an audio tag\n    adHoc = 0, // :uint\n\n    // The default size is 16kb but this is not enough to hold iframe\n    // data and the resizing algorithm costs a bit so we create a larger\n    // starting buffer for video tags\n    bufferStartSize = 16384,\n\n    // checks whether the FLV tag has enough capacity to accept the proposed\n    // write and re-allocates the internal buffers if necessary\n    prepareWrite = function(flv, count) {\n      var\n        bytes,\n        minLength = flv.position + count;\n      if (minLength < flv.bytes.byteLength) {\n        // there's enough capacity so do nothing\n        return;\n      }\n\n      // allocate a new buffer and copy over the data that will not be modified\n      bytes = new Uint8Array(minLength * 2);\n      bytes.set(flv.bytes.subarray(0, flv.position), 0);\n      flv.bytes = bytes;\n      flv.view = new DataView(flv.bytes.buffer);\n    },\n\n    // commonly used metadata properties\n    widthBytes = FlvTag.widthBytes || new Uint8Array('width'.length),\n    heightBytes = FlvTag.heightBytes || new Uint8Array('height'.length),\n    videocodecidBytes = FlvTag.videocodecidBytes || new Uint8Array('videocodecid'.length),\n    i;\n\n  if (!FlvTag.widthBytes) {\n    // calculating the bytes of common metadata names ahead of time makes the\n    // corresponding writes faster because we don't have to loop over the\n    // characters\n    // re-test with test/perf.html if you're planning on changing this\n    for (i = 0; i < 'width'.length; i++) {\n      widthBytes[i] = 'width'.charCodeAt(i);\n    }\n    for (i = 0; i < 'height'.length; i++) {\n      heightBytes[i] = 'height'.charCodeAt(i);\n    }\n    for (i = 0; i < 'videocodecid'.length; i++) {\n      videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);\n    }\n\n    FlvTag.widthBytes = widthBytes;\n    FlvTag.heightBytes = heightBytes;\n    FlvTag.videocodecidBytes = videocodecidBytes;\n  }\n\n  this.keyFrame = false; // :Boolean\n\n  switch (type) {\n  case FlvTag.VIDEO_TAG:\n    this.length = 16;\n    // Start the buffer at 256k\n    bufferStartSize *= 6;\n    break;\n  case FlvTag.AUDIO_TAG:\n    this.length = 13;\n    this.keyFrame = true;\n    break;\n  case FlvTag.METADATA_TAG:\n    this.length = 29;\n    this.keyFrame = true;\n    break;\n  default:\n    throw new Error('Unknown FLV tag type');\n  }\n\n  this.bytes = new Uint8Array(bufferStartSize);\n  this.view = new DataView(this.bytes.buffer);\n  this.bytes[0] = type;\n  this.position = this.length;\n  this.keyFrame = extraData; // Defaults to false\n\n  // presentation timestamp\n  this.pts = 0;\n  // decoder timestamp\n  this.dts = 0;\n\n  // ByteArray#writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0)\n  this.writeBytes = function(bytes, offset, length) {\n    var\n      start = offset || 0,\n      end;\n    length = length || bytes.byteLength;\n    end = start + length;\n\n    prepareWrite(this, length);\n    this.bytes.set(bytes.subarray(start, end), this.position);\n\n    this.position += length;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeByte(value:int):void\n  this.writeByte = function(byte) {\n    prepareWrite(this, 1);\n    this.bytes[this.position] = byte;\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeShort(value:int):void\n  this.writeShort = function(short) {\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, short);\n    this.position += 2;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // Negative index into array\n  // (pos:uint):int\n  this.negIndex = function(pos) {\n    return this.bytes[this.length - pos];\n  };\n\n  // The functions below ONLY work when this[0] == VIDEO_TAG.\n  // We are not going to check for that because we dont want the overhead\n  // (nal:ByteArray = null):int\n  this.nalUnitSize = function() {\n    if (adHoc === 0) {\n      return 0;\n    }\n\n    return this.length - (adHoc + 4);\n  };\n\n  this.startNalUnit = function() {\n    // remember position and add 4 bytes\n    if (adHoc > 0) {\n      throw new Error('Attempted to create new NAL wihout closing the old one');\n    }\n\n    // reserve 4 bytes for nal unit size\n    adHoc = this.length;\n    this.length += 4;\n    this.position = this.length;\n  };\n\n  // (nal:ByteArray = null):void\n  this.endNalUnit = function(nalContainer) {\n    var\n      nalStart, // :uint\n      nalLength; // :uint\n\n    // Rewind to the marker and write the size\n    if (this.length === adHoc + 4) {\n      // we started a nal unit, but didnt write one, so roll back the 4 byte size value\n      this.length -= 4;\n    } else if (adHoc > 0) {\n      nalStart = adHoc + 4;\n      nalLength = this.length - nalStart;\n\n      this.position = adHoc;\n      this.view.setUint32(this.position, nalLength);\n      this.position = this.length;\n\n      if (nalContainer) {\n        // Add the tag to the NAL unit\n        nalContainer.push(this.bytes.subarray(nalStart, nalStart + nalLength));\n      }\n    }\n\n    adHoc = 0;\n  };\n\n  /**\n   * Write out a 64-bit floating point valued metadata property. This method is\n   * called frequently during a typical parse and needs to be fast.\n   */\n  // (key:String, val:Number):void\n  this.writeMetaDataDouble = function(key, val) {\n    var i;\n    prepareWrite(this, 2 + key.length + 9);\n\n    // write size of property name\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n\n    // this next part looks terrible but it improves parser throughput by\n    // 10kB/s in my testing\n\n    // write property name\n    if (key === 'width') {\n      this.bytes.set(widthBytes, this.position);\n      this.position += 5;\n    } else if (key === 'height') {\n      this.bytes.set(heightBytes, this.position);\n      this.position += 6;\n    } else if (key === 'videocodecid') {\n      this.bytes.set(videocodecidBytes, this.position);\n      this.position += 12;\n    } else {\n      for (i = 0; i < key.length; i++) {\n        this.bytes[this.position] = key.charCodeAt(i);\n        this.position++;\n      }\n    }\n\n    // skip null byte\n    this.position++;\n\n    // write property value\n    this.view.setFloat64(this.position, val);\n    this.position += 8;\n\n    // update flv tag length\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // (key:String, val:Boolean):void\n  this.writeMetaDataBoolean = function(key, val) {\n    var i;\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n    for (i = 0; i < key.length; i++) {\n      // if key.charCodeAt(i) >= 255, handle error\n      prepareWrite(this, 1);\n      this.bytes[this.position] = key.charCodeAt(i);\n      this.position++;\n    }\n    prepareWrite(this, 2);\n    this.view.setUint8(this.position, 0x01);\n    this.position++;\n    this.view.setUint8(this.position, val ? 0x01 : 0x00);\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // ():ByteArray\n  this.finalize = function() {\n    var\n      dtsDelta, // :int\n      len; // :int\n\n    switch (this.bytes[0]) {\n      // Video Data\n    case FlvTag.VIDEO_TAG:\n       // We only support AVC, 1 = key frame (for AVC, a seekable\n       // frame), 2 = inter frame (for AVC, a non-seekable frame)\n      this.bytes[11] = ((this.keyFrame || extraData) ? 0x10 : 0x20) | 0x07;\n      this.bytes[12] = extraData ?  0x00 : 0x01;\n\n      dtsDelta = this.pts - this.dts;\n      this.bytes[13] = (dtsDelta & 0x00FF0000) >>> 16;\n      this.bytes[14] = (dtsDelta & 0x0000FF00) >>>  8;\n      this.bytes[15] = (dtsDelta & 0x000000FF) >>>  0;\n      break;\n\n    case FlvTag.AUDIO_TAG:\n      this.bytes[11] = 0xAF; // 44 kHz, 16-bit stereo\n      this.bytes[12] = extraData ? 0x00 : 0x01;\n      break;\n\n    case FlvTag.METADATA_TAG:\n      this.position = 11;\n      this.view.setUint8(this.position, 0x02); // String type\n      this.position++;\n      this.view.setUint16(this.position, 0x0A); // 10 Bytes\n      this.position += 2;\n      // set \"onMetaData\"\n      this.bytes.set([0x6f, 0x6e, 0x4d, 0x65,\n                      0x74, 0x61, 0x44, 0x61,\n                      0x74, 0x61], this.position);\n      this.position += 10;\n      this.bytes[this.position] = 0x08; // Array type\n      this.position++;\n      this.view.setUint32(this.position, adHoc);\n      this.position = this.length;\n      this.bytes.set([0, 0, 9], this.position);\n      this.position += 3; // End Data Tag\n      this.length = this.position;\n      break;\n    }\n\n    len = this.length - 11;\n\n    // write the DataSize field\n    this.bytes[ 1] = (len & 0x00FF0000) >>> 16;\n    this.bytes[ 2] = (len & 0x0000FF00) >>>  8;\n    this.bytes[ 3] = (len & 0x000000FF) >>>  0;\n    // write the Timestamp\n    this.bytes[ 4] = (this.dts & 0x00FF0000) >>> 16;\n    this.bytes[ 5] = (this.dts & 0x0000FF00) >>>  8;\n    this.bytes[ 6] = (this.dts & 0x000000FF) >>>  0;\n    this.bytes[ 7] = (this.dts & 0xFF000000) >>> 24;\n    // write the StreamID\n    this.bytes[ 8] = 0;\n    this.bytes[ 9] = 0;\n    this.bytes[10] = 0;\n\n    // Sometimes we're at the end of the view and have one slot to write a\n    // uint32, so, prepareWrite of count 4, since, view is uint8\n    prepareWrite(this, 4);\n    this.view.setUint32(this.length, this.length);\n    this.length += 4;\n    this.position += 4;\n\n    // trim down the byte buffer to what is actually being used\n    this.bytes = this.bytes.subarray(0, this.length);\n    this.frameTime = FlvTag.frameTime(this.bytes);\n    // if bytes.bytelength isn't equal to this.length, handle error\n    return this;\n  };\n};\n\nFlvTag.AUDIO_TAG = 0x08; // == 8, :uint\nFlvTag.VIDEO_TAG = 0x09; // == 9, :uint\nFlvTag.METADATA_TAG = 0x12; // == 18, :uint\n\n// (tag:ByteArray):Boolean {\nFlvTag.isAudioFrame = function(tag) {\n  return FlvTag.AUDIO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isVideoFrame = function(tag) {\n  return FlvTag.VIDEO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isMetaData = function(tag) {\n  return FlvTag.METADATA_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isKeyFrame = function(tag) {\n  if (FlvTag.isVideoFrame(tag)) {\n    return tag[11] === 0x17;\n  }\n\n  if (FlvTag.isAudioFrame(tag)) {\n    return true;\n  }\n\n  if (FlvTag.isMetaData(tag)) {\n    return true;\n  }\n\n  return false;\n};\n\n// (tag:ByteArray):uint {\nFlvTag.frameTime = function(tag) {\n  var pts = tag[ 4] << 16; // :uint\n  pts |= tag[ 5] <<  8;\n  pts |= tag[ 6] <<  0;\n  pts |= tag[ 7] << 24;\n  return pts;\n};\n\nmodule.exports = FlvTag;\n\n},{}],45:[function(require,module,exports){\nmodule.exports = {\n  tag: require('./flv-tag'),\n  Transmuxer: require('./transmuxer'),\n  getFlvHeader: require('./flv-header')\n};\n\n},{\"./flv-header\":43,\"./flv-tag\":44,\"./transmuxer\":47}],46:[function(require,module,exports){\n'use strict';\n\nvar TagList = function() {\n  var self = this;\n\n  this.list = [];\n\n  this.push = function(tag) {\n    this.list.push({\n      bytes: tag.bytes,\n      dts: tag.dts,\n      pts: tag.pts,\n      keyFrame: tag.keyFrame,\n      metaDataTag: tag.metaDataTag\n    });\n  };\n\n  Object.defineProperty(this, 'length', {\n    get: function() {\n      return self.list.length;\n    }\n  });\n};\n\nmodule.exports = TagList;\n\n},{}],47:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar FlvTag = require('./flv-tag.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar CoalesceStream = require('./coalesce-stream.js');\nvar TagList = require('./tag-list.js');\n\nvar\n  Transmuxer,\n  VideoSegmentStream,\n  AudioSegmentStream,\n  collectTimelineInfo,\n  metaDataTag,\n  extraDataTag;\n\n/**\n * Store information about the start and end of the tracka and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectTimelineInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    } else {\n      track.timelineStartInfo.pts =\n        Math.min(track.timelineStartInfo.pts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    } else {\n      track.timelineStartInfo.dts =\n        Math.min(track.timelineStartInfo.dts, data.dts);\n    }\n  }\n};\n\nmetaDataTag = function(track, pts) {\n  var\n    tag = new FlvTag(FlvTag.METADATA_TAG); // :FlvTag\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeMetaDataDouble('videocodecid', 7);\n  tag.writeMetaDataDouble('width', track.width);\n  tag.writeMetaDataDouble('height', track.height);\n\n  return tag;\n};\n\nextraDataTag = function(track, pts) {\n  var\n    i,\n    tag = new FlvTag(FlvTag.VIDEO_TAG, true);\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeByte(0x01);// version\n  tag.writeByte(track.profileIdc);// profile\n  tag.writeByte(track.profileCompatibility);// compatibility\n  tag.writeByte(track.levelIdc);// level\n  tag.writeByte(0xFC | 0x03); // reserved (6 bits), NULA length size - 1 (2 bits)\n  tag.writeByte(0xE0 | 0x01); // reserved (3 bits), num of SPS (5 bits)\n  tag.writeShort(track.sps[0].length); // data of SPS\n  tag.writeBytes(track.sps[0]); // SPS\n\n  tag.writeByte(track.pps.length); // num of PPS (will there ever be more that 1 PPS?)\n  for (i = 0; i < track.pps.length; ++i) {\n    tag.writeShort(track.pps[i].length); // 2 bytes for length of PPS\n    tag.writeBytes(track.pps[i]); // data of PPS\n  }\n\n  return tag;\n};\n\n/**\n * Constructs a single-track, media segment from AAC data\n * events. The output of this stream can be fed to flash.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    oldExtraData;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    if (track && track.channelcount === undefined) {\n      track.audioobjecttype = data.audioobjecttype;\n      track.channelcount = data.channelcount;\n      track.samplerate = data.samplerate;\n      track.samplingfrequencyindex = data.samplingfrequencyindex;\n      track.samplesize = data.samplesize;\n      track.extraData = (track.audioobjecttype << 11) |\n                        (track.samplingfrequencyindex << 7) |\n                        (track.channelcount << 3);\n    }\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.flush = function() {\n    var currentFrame, adtsFrame, lastMetaPts, tags = new TagList();\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    lastMetaPts = -Infinity;\n\n    while (adtsFrames.length) {\n      currentFrame = adtsFrames.shift();\n\n      // write out metadata tags every 1 second so that the decoder\n      // is re-initialized quickly after seeking into a different\n      // audio configuration\n      if (track.extraData !== oldExtraData || currentFrame.pts - lastMetaPts >= 1000) {\n       adtsFrame = new FlvTag(FlvTag.METADATA_TAG);\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        // AAC is always 10\n        adtsFrame.writeMetaDataDouble('audiocodecid', 10);\n        adtsFrame.writeMetaDataBoolean('stereo', track.channelcount === 2);\n        adtsFrame.writeMetaDataDouble('audiosamplerate', track.samplerate);\n        // Is AAC always 16 bit?\n        adtsFrame.writeMetaDataDouble('audiosamplesize', 16);\n\n        tags.push(adtsFrame.finalize());\n\n        oldExtraData = track.extraData;\n\n        adtsFrame = new FlvTag(FlvTag.AUDIO_TAG, true);\n        // For audio, DTS is always the same as PTS. We want to set the DTS\n        // however so we can compare with video DTS to determine approximate\n        // packet order\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        adtsFrame.view.setUint16(adtsFrame.position, track.extraData);\n        adtsFrame.position += 2;\n        adtsFrame.length = Math.max(adtsFrame.length, adtsFrame.position);\n\n        tags.push(adtsFrame.finalize());\n\n        lastMetaPts = currentFrame.pts;\n      }\n      adtsFrame = new FlvTag(FlvTag.AUDIO_TAG);\n      adtsFrame.pts = currentFrame.pts;\n      adtsFrame.dts = currentFrame.dts;\n\n      adtsFrame.writeBytes(currentFrame.data);\n\n      tags.push(adtsFrame.finalize());\n    }\n\n    oldExtraData = null;\n    this.trigger('data', {track: track, tags: tags.list});\n\n    this.trigger('done', 'AudioSegmentStream');\n  };\n};\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Store FlvTags for the h264 stream\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    nalUnits = [],\n    config,\n    h264Frame;\n  VideoSegmentStream.prototype.init.call(this);\n\n  this.finishFrame = function(tags, frame) {\n    if (!frame) {\n      return;\n    }\n    // Check if keyframe and the length of tags.\n    // This makes sure we write metadata on the first frame of a segment.\n    if (config && track && track.newMetadata &&\n        (frame.keyFrame || tags.length === 0)) {\n      // Push extra data on every IDR frame in case we did a stream change + seek\n      var metaTag = metaDataTag(config, frame.dts).finalize();\n      var extraTag = extraDataTag(track, frame.dts).finalize();\n\n      metaTag.metaDataTag = extraTag.metaDataTag = true;\n\n      tags.push(metaTag);\n      tags.push(extraTag);\n      track.newMetadata = false;\n    }\n\n    frame.endNalUnit();\n    tags.push(frame.finalize());\n    h264Frame = null;\n  };\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer video until flush() is called\n    nalUnits.push(data);\n  };\n\n  this.flush = function() {\n    var\n      currentNal,\n      tags = new TagList();\n\n    // Throw away nalUnits at the start of the byte stream until we find\n    // the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    while (nalUnits.length) {\n      currentNal = nalUnits.shift();\n\n      // record the track config\n      if (currentNal.nalUnitType === 'seq_parameter_set_rbsp') {\n        track.newMetadata = true;\n        config = currentNal.config;\n        track.width = config.width;\n        track.height = config.height;\n        track.sps = [currentNal.data];\n        track.profileIdc = config.profileIdc;\n        track.levelIdc = config.levelIdc;\n        track.profileCompatibility = config.profileCompatibility;\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'pic_parameter_set_rbsp') {\n        track.newMetadata = true;\n        track.pps = [currentNal.data];\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        if (h264Frame) {\n          this.finishFrame(tags, h264Frame);\n        }\n        h264Frame = new FlvTag(FlvTag.VIDEO_TAG);\n        h264Frame.pts = currentNal.pts;\n        h264Frame.dts = currentNal.dts;\n      } else {\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          // the current sample is a key frame\n          h264Frame.keyFrame = true;\n        }\n        h264Frame.endNalUnit();\n      }\n      h264Frame.startNalUnit();\n      h264Frame.writeBytes(currentNal.data);\n    }\n    if (h264Frame) {\n      this.finishFrame(tags, h264Frame);\n    }\n\n    this.trigger('data', {track: track, tags: tags.list});\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * An object that incrementally transmuxes MPEG2 Trasport Stream\n * chunks into an FLV.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n\n    packetStream, parseStream, elementaryStream,\n    videoTimestampRolloverStream, audioTimestampRolloverStream,\n    timedMetadataTimestampRolloverStream,\n    adtsStream, h264Stream,\n    videoSegmentStream, audioSegmentStream, captionStream,\n    coalesceStream;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n\n  // expose the metadata stream\n  this.metadataStream = new m2ts.MetadataStream();\n\n  options.metadataStream = this.metadataStream;\n\n  // set up the parsing pipeline\n  packetStream = new m2ts.TransportPacketStream();\n  parseStream = new m2ts.TransportParseStream();\n  elementaryStream = new m2ts.ElementaryStream();\n  videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n  audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n  timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n\n  adtsStream = new AdtsStream();\n  h264Stream = new H264Stream();\n  coalesceStream = new CoalesceStream(options);\n\n  // disassemble MPEG2-TS packets into elementary streams\n  packetStream\n    .pipe(parseStream)\n    .pipe(elementaryStream);\n\n  // !!THIS ORDER IS IMPORTANT!!\n  // demux the streams\n  elementaryStream\n    .pipe(videoTimestampRolloverStream)\n    .pipe(h264Stream);\n  elementaryStream\n    .pipe(audioTimestampRolloverStream)\n    .pipe(adtsStream);\n\n  elementaryStream\n    .pipe(timedMetadataTimestampRolloverStream)\n    .pipe(this.metadataStream)\n    .pipe(coalesceStream);\n  // if CEA-708 parsing is available, hook up a caption stream\n  captionStream = new m2ts.CaptionStream();\n  h264Stream.pipe(captionStream)\n    .pipe(coalesceStream);\n\n  // hook up the segment streams once track metadata is delivered\n  elementaryStream.on('data', function(data) {\n    var i, videoTrack, audioTrack;\n\n    if (data.type === 'metadata') {\n      i = data.tracks.length;\n\n      // scan the tracks listed in the metadata\n      while (i--) {\n        if (data.tracks[i].type === 'video') {\n          videoTrack = data.tracks[i];\n        } else if (data.tracks[i].type === 'audio') {\n          audioTrack = data.tracks[i];\n        }\n      }\n\n      // hook up the video segment stream to the first track with h264 data\n      if (videoTrack && !videoSegmentStream) {\n        coalesceStream.numberOfTracks++;\n        videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n        // Set up the final part of the video pipeline\n        h264Stream\n          .pipe(videoSegmentStream)\n          .pipe(coalesceStream);\n      }\n\n      if (audioTrack && !audioSegmentStream) {\n        // hook up the audio segment stream to the first track with aac data\n        coalesceStream.numberOfTracks++;\n        audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n        // Set up the final part of the audio pipeline\n        adtsStream\n          .pipe(audioSegmentStream)\n          .pipe(coalesceStream);\n      }\n    }\n  });\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    packetStream.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n    // Start at the top of the pipeline and flush all pending work\n    packetStream.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    captionStream.reset();\n  };\n\n  // Re-emit any data coming from the coalesce stream to the outside world\n  coalesceStream.on('data', function(event) {\n    self.trigger('data', event);\n  });\n\n  // Let the consumer know we have finished flushing the entire pipeline\n  coalesceStream.on('done', function() {\n    self.trigger('done');\n  });\n};\nTransmuxer.prototype = new Stream();\n\n// forward compatibility\nmodule.exports = Transmuxer;\n\n},{\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../m2ts/m2ts.js\":49,\"../utils/stream.js\":61,\"./coalesce-stream.js\":42,\"./flv-tag.js\":44,\"./tag-list.js\":46}],48:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128,\n    Stream = require('../utils/stream');\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar packetDropper = {\n  push: function() {}\n};\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across 2 packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the second\n  // dts packet we receive that has dts === this.latestDts_. And thus, the\n  // ignoreNextEqualDts_ flag was born.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    // We've received the last duplicate packet, time to start processing again\n    this.ignoreNextEqualDts_ = false;\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  this.captionPackets_ = this.captionPackets_.concat(parseCaptionPackets(event.pts, userData));\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.activeCea608Channel_ = null;\n  // Since we don't know which channel is active until we get a control\n  // code that sets it, we start off with CEA608 handlers that just drop\n  // all the packets.\n  this.activeCea608Streams_ = [\n    packetDropper,\n    packetDropper\n  ];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  if (this.setsChannel1Active(packet) && this.activeCea608Channel_ !== 1) {\n    this.activeCea608Channel_ = 1;\n    this.activeCea608Streams_ = [this.ccStreams_[0], this.ccStreams_[2]]; // CC1, CC3\n  } else if (this.setsChannel2Active(packet) && this.activeCea608Channel_ !== 2) {\n    this.activeCea608Channel_ = 2;\n    this.activeCea608Streams_ = [this.ccStreams_[1], this.ccStreams_[3]]; // CC2, CC4\n  }\n  // If we haven't set the active streams yet, this next call just returns\n  // immediately.\n  this.activeCea608Streams_[packet.type].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 1;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 2;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 3;\n      this.mode_ = 'rollUp';\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[BOTTOM_ROW] = this.nonDisplayed_[BOTTOM_ROW].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      this.mode_ = 'paintOn';\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode (not supported)\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[BOTTOM_ROW];\n\n  baseRow += text;\n  this.displayed_[BOTTOM_ROW] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < BOTTOM_ROW; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[BOTTOM_ROW] = '';\n};\n\n// paintOn mode is not implemented\nCea608Stream.prototype.paintOn = function() {};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n\n},{\"../utils/stream\":61}],49:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {};\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      // add an entry that maps the elementary_pid to the stream_type\n      self.programMapTable[(payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]] = payload[offset];\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n\n    // if there are any packets waiting for a PMT to be found, process them now\n    while (self.packetsWaitingForPmt.length) {\n      self.processPes_.apply(self, self.packetsWaitingForPmt.shift());\n    }\n  };\n\n  /**\n   * Deliver a new MP2T packet to the stream.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    result.streamType = this.programMapTable[result.pid];\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that they match before we do a flush\n      packetFlushable = type === 'video' || event.packetLength === stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable,\n          k,\n          track;\n\n        // translate streams to tracks\n        for (k in programMapTable) {\n          if (programMapTable.hasOwnProperty(k)) {\n            track = {\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              }\n            };\n            track.id = +k;\n            if (programMapTable[k] === m2tsStreamTypes.H264_STREAM_TYPE) {\n              track.codec = 'avc';\n              track.type = 'video';\n            } else if (programMapTable[k] === m2tsStreamTypes.ADTS_STREAM_TYPE) {\n              track.codec = 'adts';\n              track.type = 'audio';\n            }\n            event.tracks.push(track);\n          }\n        }\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n\n},{\"../utils/stream.js\":61,\"./caption-stream\":48,\"./metadata-stream\":50,\"./stream-types\":52,\"./stream-types.js\":52,\"./timestamp-rollover-stream\":53}],50:[function(require,module,exports){\n/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n\n},{\"../utils/stream\":61,\"./stream-types\":52}],51:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n\n},{\"./stream-types.js\":52}],52:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n\n},{}],53:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n\n},{\"../utils/stream\":61}],54:[function(require,module,exports){\nmodule.exports = {\n  generator: require('./mp4-generator'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream\n};\n\n},{\"./mp4-generator\":55,\"./transmuxer\":57}],55:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n\n},{}],56:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar findBox, parseType, timescale, startTime;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = data[i]     << 24;\n    size |= data[i + 1] << 16;\n    size |= data[i + 2] << 8;\n    size |= data[i + 3];\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = tkhd[index]     << 24 |\n         tkhd[index + 1] << 16 |\n         tkhd[index + 2] <<  8 |\n         tkhd[index + 3];\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = mdhd[index]     << 24 |\n                 mdhd[index + 1] << 16 |\n                 mdhd[index + 2] <<  8 |\n                 mdhd[index + 3];\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = tfhd[4] << 24 |\n           tfhd[5] << 16 |\n           tfhd[6] << 8 |\n           tfhd[7];\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = tfdt[4] << 24 |\n                 tfdt[5] << 16 |\n                 tfdt[6] <<  8 |\n                 tfdt[7];\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += tfdt[8]  << 24 |\n                    tfdt[9]  << 16 |\n                    tfdt[10] <<  8 |\n                    tfdt[11];\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\nmodule.exports = {\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime\n};\n\n},{}],57:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  createDefaultSample,\n  isLikelyAacData,\n  collectDtsInfo,\n  clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime,\n  arrayEquals,\n  sumFrameByteLengths;\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\ncreateDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0\n    }\n  };\n};\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    config,\n    pps;\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  this.push = function(nalUnit) {\n    collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = this.groupNalsIntoFrames_(nalUnits);\n    gops = this.groupFramesIntoGops_(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyrame-pulling\n        gops = this.extendFirstKeyFrame_(gops);\n      }\n    }\n    collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = this.generateSampleTable_(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(this.concatenateNalData_(gops));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  this.extendFirstKeyFrame_ = function(gops) {\n    var currentGop;\n\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n\n      gops.byteLength -=  currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount;\n\n      // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n\n    return gops;\n  };\n\n  // Convert an array of nal units into an array of frames with each frame being\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n  this.groupNalsIntoFrames_ = function(nalUnits) {\n    var\n      i,\n      currentNal,\n      currentFrame = [],\n      frames = [];\n\n    currentFrame.byteLength = 0;\n\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i];\n\n      // Split on 'aud'-type nal units\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          frames.push(currentFrame);\n        }\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    }\n\n    // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n    if (frames.length &&\n        (!currentFrame.duration ||\n         currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    }\n\n    // Push the final frame\n    frames.push(currentFrame);\n    return frames;\n  };\n\n  // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n  this.groupFramesIntoGops_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      currentGop = [],\n      gops = [];\n\n    // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts;\n\n    // store some metadata about all the Gops\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration;\n\n    // push the final Gop\n    gops.push(currentGop);\n    return gops;\n  };\n\n  // generate the track's sample table from an array of gops\n  this.generateSampleTable_ = function(gops, baseDataOffset) {\n    var\n      h, i,\n      sample,\n      currentGop,\n      currentFrame,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        sample = createDefaultSample();\n\n        sample.dataOffset = dataOffset;\n        sample.compositionTimeOffset = currentFrame.pts - currentFrame.dts;\n        sample.duration = currentFrame.duration;\n        sample.size = 4 * currentFrame.length; // Space for nal unit size\n        sample.size += currentFrame.byteLength;\n\n        if (currentFrame.keyFrame) {\n          sample.flags.dependsOn = 2;\n        }\n\n        dataOffset += sample.size;\n\n        samples.push(sample);\n      }\n    }\n    return samples;\n  };\n\n  // generate the track's raw mdat data from an array of gops\n  this.concatenateNalData_ = function(gops) {\n    var\n      h, i, j,\n      currentGop,\n      currentFrame,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = gops.byteLength,\n      numberOfNals = gops.nalCount,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer);\n\n    // For each Gop..\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      // For each Frame..\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        // For each NAL..\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n    return data;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nclearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n */\ncalculateTrackBaseMediaDecodeTime = function(track) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    // Calculate the distance, in time, that this segment starts from the start\n    // of the timeline (earliest time seen since the transmuxer initialized)\n    timeSinceStartOfTimeline = track.minSegmentDts - track.timelineStartInfo.dts;\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += timeSinceStartOfTimeline;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n\n},{\"../aac\":37,\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../data/silence\":41,\"../m2ts/m2ts.js\":49,\"../utils/clock\":59,\"../utils/stream.js\":61,\"./mp4-generator.js\":55}],58:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n\n},{\"../aac/probe.js\":38,\"../m2ts/probe.js\":51,\"../m2ts/stream-types.js\":52,\"../m2ts/timestamp-rollover-stream.js\":53}],59:[function(require,module,exports){\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n\n},{}],60:[function(require,module,exports){\n'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n\n},{}],61:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n\n},{}],62:[function(require,module,exports){\n/* jshint ignore:start */\r\n(function(root) { \r\n/* jshint ignore:end */\r\n  var URLToolkit = {\r\n    // build an absolute URL from a relative one using the provided baseURL\r\n    // if relativeURL is an absolute URL it will be returned as is.\r\n    buildAbsoluteURL: function(baseURL, relativeURL) {\r\n      // remove any remaining space and CRLF\r\n      relativeURL = relativeURL.trim();\r\n      if (/^[a-z]+:/i.test(relativeURL)) {\r\n        // complete url, not relative\r\n        return relativeURL;\r\n      }\r\n\r\n      var relativeURLQuery = null;\r\n      var relativeURLHash = null;\r\n\r\n      var relativeURLHashSplit = /^([^#]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLHashSplit) {\r\n        relativeURLHash = relativeURLHashSplit[2];\r\n        relativeURL = relativeURLHashSplit[1];\r\n      }\r\n      var relativeURLQuerySplit = /^([^\\?]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLQuerySplit) {\r\n        relativeURLQuery = relativeURLQuerySplit[2];\r\n        relativeURL = relativeURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLHashSplit = /^([^#]*)(.*)$/.exec(baseURL);\r\n      if (baseURLHashSplit) {\r\n        baseURL = baseURLHashSplit[1];\r\n      }\r\n      var baseURLQuerySplit = /^([^\\?]*)(.*)$/.exec(baseURL);\r\n      if (baseURLQuerySplit) {\r\n        baseURL = baseURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLDomainSplit = /^(([a-z]+:)?\\/\\/[^:\\/]+(:[0-9]+)?)?(\\/?.*)$/i.exec(baseURL);\r\n      if (!baseURLDomainSplit) {\r\n        throw new Error('Error trying to parse base URL.');\r\n      }\r\n      \r\n      // e.g. 'http:', 'https:', ''\r\n      var baseURLProtocol = baseURLDomainSplit[2] || '';\r\n      // e.g. 'http://example.com', '//example.com', ''\r\n      var baseURLProtocolDomain = baseURLDomainSplit[1] || '';\r\n      // e.g. '/a/b/c/playlist.m3u8', 'a/b/c/playlist.m3u8'\r\n      var baseURLPath = baseURLDomainSplit[4];\r\n      if (baseURLPath.indexOf('/') !== 0 && baseURLProtocolDomain !== '') {\r\n        // this handles a base url of http://example.com (missing last slash)\r\n        baseURLPath = '/'+baseURLPath;\r\n      }\r\n\r\n      var builtURL = null;\r\n      if (/^\\/\\//.test(relativeURL)) {\r\n        // relative url starts wth '//' so copy protocol (which may be '' if baseUrl didn't provide one)\r\n        builtURL = baseURLProtocol+'//'+URLToolkit.buildAbsolutePath('', relativeURL.substring(2));\r\n      }\r\n      else if (/^\\//.test(relativeURL)) {\r\n        // relative url starts with '/' so start from root of domain\r\n        builtURL = baseURLProtocolDomain+'/'+URLToolkit.buildAbsolutePath('', relativeURL.substring(1));\r\n      }\r\n      else {\r\n        builtURL = URLToolkit.buildAbsolutePath(baseURLProtocolDomain+baseURLPath, relativeURL);\r\n      }\r\n\r\n      // put the query and hash parts back\r\n      if (relativeURLQuery) {\r\n        builtURL += relativeURLQuery;\r\n      }\r\n      if (relativeURLHash) {\r\n        builtURL += relativeURLHash;\r\n      }\r\n      return builtURL;\r\n    },\r\n\r\n    // build an absolute path using the provided basePath\r\n    // adapted from https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#Using_relative_URLs_in_the_path_parameter\r\n    // this does not handle the case where relativePath is \"/\" or \"//\". These cases should be handled outside this.\r\n    buildAbsolutePath: function(basePath, relativePath) {\r\n      var sRelPath = relativePath;\r\n      var nUpLn, sDir = '', sPath = basePath.replace(/[^\\/]*$/, sRelPath.replace(/(\\/|^)(?:\\.?\\/+)+/g, '$1'));\r\n      for (var nEnd, nStart = 0; nEnd = sPath.indexOf('/../', nStart), nEnd > -1; nStart = nEnd + nUpLn) {\r\n        nUpLn = /^\\/(?:\\.\\.\\/)*/.exec(sPath.slice(nEnd))[0].length;\r\n        sDir = (sDir + sPath.substring(nStart, nEnd)).replace(new RegExp('(?:\\\\\\/+[^\\\\\\/]*){0,' + ((nUpLn - 1) / 3) + '}$'), '/');\r\n      }\r\n      return sDir + sPath.substr(nStart);\r\n    }\r\n  };\r\n\r\n/* jshint ignore:start */\r\n  if(typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = URLToolkit;\r\n  else if(typeof define === 'function' && define.amd)\r\n    define([], function() { return URLToolkit; });\r\n  else if(typeof exports === 'object')\r\n    exports[\"URLToolkit\"] = URLToolkit;\r\n  else\r\n    root[\"URLToolkit\"] = URLToolkit;\r\n})(this);\r\n/* jshint ignore:end */\r\n\n},{}],63:[function(require,module,exports){\n(function (global){\n/**\n * @file add-text-track-data.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = undefined;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the flash or virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    (function () {\n      var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n      metadataArray.forEach(function (metadata) {\n        var time = metadata.cueTime + this.timestampOffset;\n\n        metadata.frames.forEach(function (frame) {\n          var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n          cue.frame = frame;\n          cue.value = frame;\n          deprecateOldCue(cue);\n\n          this.metadataTrack_.addCue(cue);\n        }, this);\n      }, sourceHandler);\n\n      // Updating the metadeta cues so that\n      // the endTime of each cue is the startTime of the next cue\n      // the endTime of last cue is the duration of the video\n      if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n        (function () {\n          var cues = sourceHandler.metadataTrack_.cues;\n          var cuesArray = [];\n\n          // Create a copy of the TextTrackCueList...\n          // ...disregarding cues with a falsey value\n          for (var i = 0; i < cues.length; i++) {\n            if (cues[i]) {\n              cuesArray.push(cues[i]);\n            }\n          }\n\n          // Group cues by their startTime value\n          var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n            var timeSlot = obj[cue.startTime] || [];\n\n            timeSlot.push(cue);\n            obj[cue.startTime] = timeSlot;\n\n            return obj;\n          }, {});\n\n          // Sort startTimes by ascending order\n          var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n            return Number(a) - Number(b);\n          });\n\n          // Map each cue group's endTime to the next group's startTime\n          sortedStartTimes.forEach(function (startTime, idx) {\n            var cueGroup = cuesGroupedByStartTime[startTime];\n            var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n            // Map each cue's endTime the next group's startTime\n            cueGroup.forEach(function (cue) {\n              cue.endTime = nextTime;\n            });\n          });\n        })();\n      }\n    })();\n  }\n};\n\nexports['default'] = {\n  addTextTrackData: addTextTrackData,\n  durationOfVideo: durationOfVideo\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],64:[function(require,module,exports){\n/**\n * Remove the text track from the player if one with matching kind and\n * label properties already exists on the player\n *\n * @param {Object} player the video.js player object\n * @param {String} kind to be considered the text track's `kind` must match\n * @param {String} label to be considered the text track's `label` must match\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar removeExistingTrack = function removeExistingTrack(player, kind, label) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = 0; i < tracks.length; i++) {\n    var track = tracks[i];\n\n    if (track.kind === kind && track.label === label) {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n};\n\nexports.removeExistingTrack = removeExistingTrack;\n/**\n * Cleaup text tracks on video.js if they exist\n *\n * @param {Object} player the video.js player object\n * @private\n */\nvar cleanupTextTracks = function cleanupTextTracks(player) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = tracks.length - 1; i >= 0; i--) {\n    var track = tracks[i];\n\n    if (track.kind === 'captions') {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n\n  removeExistingTrack(player, 'metadata', 'Timed Metadata');\n};\nexports.cleanupTextTracks = cleanupTextTracks;\n},{}],65:[function(require,module,exports){\n/**\n * @file codec-utils.js\n */\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var _name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[_name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\nexports['default'] = {\n  isAudioCodec: isAudioCodec,\n  parseContentType: parseContentType,\n  isVideoCodec: isVideoCodec,\n  translateLegacyCodecs: translateLegacyCodecs\n};\nmodule.exports = exports['default'];\n},{}],66:[function(require,module,exports){\n/**\n * @file create-text-tracks-if-necessary.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML or Flash media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    (0, _cleanupTextTracks.removeExistingTrack)(player, 'metadata', 'Timed Metadata', true);\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\nexports['default'] = createTextTracksIfNecessary;\nmodule.exports = exports['default'];\n},{\"./cleanup-text-tracks\":64}],67:[function(require,module,exports){\n/**\n * @file flash-constants.js\n */\n/**\n * The maximum size in bytes for append operations to the video.js\n * SWF. Calling through to Flash blocks and can be expensive so\n * we chunk data and pass through 4KB at a time, yielding to the\n * browser between chunks. This gives a theoretical maximum rate of\n * 1MB/s into Flash. Any higher and we begin to drop frames and UI\n * responsiveness suffers.\n *\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar flashConstants = {\n  // times in milliseconds\n  TIME_BETWEEN_CHUNKS: 1,\n  BYTES_PER_CHUNK: 1024 * 32\n};\n\nexports[\"default\"] = flashConstants;\nmodule.exports = exports[\"default\"];\n},{}],68:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _flashSourceBuffer = require('./flash-source-buffer');\n\nvar _flashSourceBuffer2 = _interopRequireDefault(_flashSourceBuffer);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * A flash implmentation of HTML MediaSources and a polyfill\n * for browsers that don't support native or HTML MediaSources..\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class FlashMediaSource\n * @extends videojs.EventTarget\n */\n\nvar FlashMediaSource = (function (_videojs$EventTarget) {\n  _inherits(FlashMediaSource, _videojs$EventTarget);\n\n  function FlashMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, FlashMediaSource);\n\n    _get(Object.getPrototypeOf(FlashMediaSource.prototype), 'constructor', this).call(this);\n    this.sourceBuffers = [];\n    this.readyState = 'closed';\n\n    this.on(['sourceopen', 'webkitsourceopen'], function (event) {\n      // find the swf where we will push media data\n      _this.swfObj = _globalDocument2['default'].getElementById(event.swfId);\n      _this.player_ = (0, _videoJs2['default'])(_this.swfObj.parentNode);\n      _this.tech_ = _this.swfObj.tech;\n      _this.readyState = 'open';\n\n      _this.tech_.on('seeking', function () {\n        var i = _this.sourceBuffers.length;\n\n        while (i--) {\n          _this.sourceBuffers[i].abort();\n        }\n      });\n\n      if (_this.tech_.hls) {\n        _this.tech_.hls.on('dispose', function () {\n          (0, _cleanupTextTracks.cleanupTextTracks)(_this.player_);\n        });\n      }\n\n      // trigger load events\n      if (_this.swfObj) {\n        _this.swfObj.vjs_load();\n      }\n    });\n  }\n\n  /**\n    * Set or return the presentation duration.\n    *\n    * @param {Double} value the duration of the media in seconds\n    * @param {Double} the current presentation duration\n    * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n    */\n\n  /**\n   * We have this function so that the html and flash interfaces\n   * are the same.\n   *\n   * @private\n   */\n\n  _createClass(FlashMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_() {}\n    // intentional no-op\n\n    /**\n     * Create a new flash source buffer and add it to our flash media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the source\n     * @return {Object} the flash source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n      var sourceBuffer = undefined;\n\n      // if this is an FLV type, we'll push data to flash\n      if (parsedType.type === 'video/mp2t' || parsedType.type === 'audio/mp2t') {\n        // Flash source buffers\n        sourceBuffer = new _flashSourceBuffer2['default'](this);\n      } else {\n        throw new Error('NotSupportedError (Video.js)');\n      }\n\n      this.sourceBuffers.push(sourceBuffer);\n      return sourceBuffer;\n    }\n\n    /**\n     * Signals the end of the stream.\n     *\n     * @link https://w3c.github.io/media-source/#widl-MediaSource-endOfStream-void-EndOfStreamError-error\n     * @param {String=} error Signals that a playback error\n     * has occurred. If specified, it must be either \"network\" or\n     * \"decode\".\n     */\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream(error) {\n      if (error === 'network') {\n        // MEDIA_ERR_NETWORK\n        this.tech_.error(2);\n      } else if (error === 'decode') {\n        // MEDIA_ERR_DECODE\n        this.tech_.error(3);\n      }\n      if (this.readyState !== 'ended') {\n        this.readyState = 'ended';\n        this.swfObj.vjs_endOfStream();\n      }\n    }\n  }]);\n\n  return FlashMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashMediaSource;\ntry {\n  Object.defineProperty(FlashMediaSource.prototype, 'duration', {\n    /**\n     * Return the presentation duration.\n     *\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    get: function get() {\n      if (!this.swfObj) {\n        return NaN;\n      }\n      // get the current duration from the SWF\n      return this.swfObj.vjs_getProperty('duration');\n    },\n    /**\n     * Set the presentation duration.\n     *\n     * @param {Double} value the duration of the media in seconds\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    set: function set(value) {\n      var i = undefined;\n      var oldDuration = this.swfObj.vjs_getProperty('duration');\n\n      this.swfObj.vjs_setProperty('duration', value);\n\n      if (value < oldDuration) {\n        // In MSE, this triggers the range removal algorithm which causes\n        // an update to occur\n        for (i = 0; i < this.sourceBuffers.length; i++) {\n          this.sourceBuffers[i].remove(value, oldDuration);\n        }\n      }\n\n      return value;\n    }\n  });\n} catch (e) {\n  // IE8 throws if defineProperty is called on a non-DOM node. We\n  // don't support IE8 but we shouldn't throw an error if loaded\n  // there.\n  FlashMediaSource.prototype.duration = NaN;\n}\n\nfor (var property in _flashConstants2['default']) {\n  FlashMediaSource[property] = _flashConstants2['default'][property];\n}\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./flash-constants\":67,\"./flash-source-buffer\":69,\"global/document\":30}],69:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _flashTransmuxerWorker = require('./flash-transmuxer-worker');\n\nvar _flashTransmuxerWorker2 = _interopRequireDefault(_flashTransmuxerWorker);\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\n/**\n * A wrapper around the setTimeout function that uses\n * the flash constant time between ticks value.\n *\n * @param {Function} func the function callback to run\n * @private\n */\nvar scheduleTick = function scheduleTick(func) {\n  // Chrome doesn't invoke requestAnimationFrame callbacks\n  // in background tabs, so use setTimeout.\n  _globalWindow2['default'].setTimeout(func, _flashConstants2['default'].TIME_BETWEEN_CHUNKS);\n};\n\n/**\n * Generates a random string of max length 6\n *\n * @return {String} the randomly generated string\n * @function generateRandomString\n * @private\n */\nvar generateRandomString = function generateRandomString() {\n  return Math.random().toString(36).slice(2, 8);\n};\n\n/**\n * Round a number to a specified number of places much like\n * toFixed but return a number instead of a string representation.\n *\n * @param {Number} num A number\n * @param {Number} places The number of decimal places which to\n * round\n * @private\n */\nvar toDecimalPlaces = function toDecimalPlaces(num, places) {\n  if (typeof places !== 'number' || places < 0) {\n    places = 0;\n  }\n\n  var scale = Math.pow(10, places);\n\n  return Math.round(num * scale) / scale;\n};\n\n/**\n * A SourceBuffer implementation for Flash rather than HTML.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @param {Object} mediaSource the flash media source\n * @class FlashSourceBuffer\n * @extends videojs.EventTarget\n */\n\nvar FlashSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(FlashSourceBuffer, _videojs$EventTarget);\n\n  function FlashSourceBuffer(mediaSource) {\n    var _this = this;\n\n    _classCallCheck(this, FlashSourceBuffer);\n\n    _get(Object.getPrototypeOf(FlashSourceBuffer.prototype), 'constructor', this).call(this);\n    var encodedHeader = undefined;\n\n    // Start off using the globally defined value but refine\n    // as we append data into flash\n    this.chunkSize_ = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n    // byte arrays queued to be appended\n    this.buffer_ = [];\n\n    // the total number of queued bytes\n    this.bufferSize_ = 0;\n\n    // to be able to determine the correct position to seek to, we\n    // need to retain information about the mapping between the\n    // media timeline and PTS values\n    this.basePtsOffset_ = NaN;\n\n    this.mediaSource_ = mediaSource;\n\n    this.audioBufferEnd_ = NaN;\n    this.videoBufferEnd_ = NaN;\n\n    // indicates whether the asynchronous continuation of an operation\n    // is still being processed\n    // see https://w3c.github.io/media-source/#widl-SourceBuffer-updating\n    this.updating = false;\n    this.timestampOffset_ = 0;\n\n    encodedHeader = _globalWindow2['default'].btoa(String.fromCharCode.apply(null, Array.prototype.slice.call(_muxJsLibFlv2['default'].getFlvHeader())));\n\n    // create function names with added randomness for the global callbacks flash will use\n    // to get data from javascript into the swf. Random strings are added as a safety\n    // measure for pages with multiple players since these functions will be global\n    // instead of per instance. When making a call to the swf, the browser generates a\n    // try catch code snippet, but just takes the function name and writes out an unquoted\n    // call to that function. If the player id has any special characters, this will result\n    // in an error, so safePlayerId replaces all special characters to '_'\n    var safePlayerId = this.mediaSource_.player_.id().replace(/[^a-zA-Z0-9]/g, '_');\n\n    this.flashEncodedHeaderName_ = 'vjs_flashEncodedHeader_' + safePlayerId + generateRandomString();\n    this.flashEncodedDataName_ = 'vjs_flashEncodedData_' + safePlayerId + generateRandomString();\n\n    _globalWindow2['default'][this.flashEncodedHeaderName_] = function () {\n      delete _globalWindow2['default'][_this.flashEncodedHeaderName_];\n      return encodedHeader;\n    };\n\n    this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedHeaderName_);\n\n    this.transmuxer_ = (0, _webworkify2['default'])(_flashTransmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: {} });\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        _this.receiveBuffer_(event.data.segment);\n      }\n    };\n\n    this.one('updateend', function () {\n      _this.mediaSource_.tech_.trigger('loadedmetadata');\n    });\n\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          // We have to tell flash to expect a discontinuity\n          this.mediaSource_.swfObj.vjs_discontinuity();\n          // the media <-> PTS mapping must be re-established after\n          // the discontinuity\n          this.basePtsOffset_ = NaN;\n          this.audioBufferEnd_ = NaN;\n          this.videoBufferEnd_ = NaN;\n\n          this.transmuxer_.postMessage({ action: 'reset' });\n        }\n      }\n    });\n\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        if (!this.mediaSource_ || !this.mediaSource_.swfObj || !('vjs_getProperty' in this.mediaSource_.swfObj)) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        var buffered = this.mediaSource_.swfObj.vjs_getProperty('buffered');\n\n        if (buffered && buffered.length) {\n          buffered[0][0] = toDecimalPlaces(buffered[0][0], 3);\n          buffered[0][1] = toDecimalPlaces(buffered[0][1], 3);\n        }\n        return _videoJs2['default'].createTimeRanges(buffered);\n      }\n    });\n\n    // On a seek we remove all text track data since flash has no concept\n    // of a buffered-range and everything else is reset on seek\n    this.mediaSource_.player_.on('seeked', function () {\n      (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.metadataTrack_);\n      if (_this.inbandTextTracks_) {\n        for (var track in _this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.inbandTextTracks_[track]);\n        }\n      }\n    });\n\n    var onHlsReset = this.onHlsReset_.bind(this);\n\n    this.mediaSource_.player_.tech_.on('hls-reset', onHlsReset);\n\n    this.mediaSource_.player_.tech_.hls.on('dispose', function () {\n      _this.transmuxer_.terminate();\n      _this.mediaSource_.player_.tech_.off('hls-reset', onHlsReset);\n    });\n  }\n\n  /**\n   * Append bytes to the sourcebuffers buffer, in this case we\n   * have to append it to swf object.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n   * @param {Array} bytes\n   */\n\n  _createClass(FlashSourceBuffer, [{\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes) {\n      var error = undefined;\n\n      if (this.updating) {\n        error = new Error('SourceBuffer.append() cannot be called ' + 'while an update is in progress');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n      this.updating = true;\n      this.mediaSource_.readyState = 'open';\n      this.trigger({ type: 'update' });\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        data: bytes.buffer,\n        byteOffset: bytes.byteOffset,\n        byteLength: bytes.byteLength\n      }, [bytes.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Reset the parser and remove any data queued to be sent to the SWF.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      this.buffer_ = [];\n      this.bufferSize_ = 0;\n      this.mediaSource_.swfObj.vjs_abort();\n\n      // report any outstanding updates have ended\n      if (this.updating) {\n        this.updating = false;\n        this.trigger({ type: 'updateend' });\n      }\n    }\n\n    /**\n     * Flash cannot remove ranges already buffered in the NetStream\n     * but seeking clears the buffer entirely. For most purposes,\n     * having this operation act as a no-op is acceptable.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start start of the section to remove\n     * @param {Double} end end of the section to remove\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n      this.trigger({ type: 'update' });\n      this.trigger({ type: 'updateend' });\n    }\n\n    /**\n     * Receive a buffer from the flv.\n     *\n     * @param {Object} segment\n     * @private\n     */\n  }, {\n    key: 'receiveBuffer_',\n    value: function receiveBuffer_(segment) {\n      var _this2 = this;\n\n      // create an in-band caption track if one is present in the segment\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n      (0, _addTextTrackData.addTextTrackData)(this, segment.captions, segment.metadata);\n\n      // Do this asynchronously since convertTagsToData_ can be time consuming\n      scheduleTick(function () {\n        var flvBytes = _this2.convertTagsToData_(segment);\n\n        if (_this2.buffer_.length === 0) {\n          scheduleTick(_this2.processBuffer_.bind(_this2));\n        }\n\n        if (flvBytes) {\n          _this2.buffer_.push(flvBytes);\n          _this2.bufferSize_ += flvBytes.byteLength;\n        }\n      });\n    }\n\n    /**\n     * Append a portion of the current buffer to the SWF.\n     *\n     * @private\n     */\n  }, {\n    key: 'processBuffer_',\n    value: function processBuffer_() {\n      var _this3 = this;\n\n      var chunkSize = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n      if (!this.buffer_.length) {\n        if (this.updating !== false) {\n          this.updating = false;\n          this.trigger({ type: 'updateend' });\n        }\n        // do nothing if the buffer is empty\n        return;\n      }\n\n      // concatenate appends up to the max append size\n      var chunk = this.buffer_[0].subarray(0, chunkSize);\n\n      // requeue any bytes that won't make it this round\n      if (chunk.byteLength < chunkSize || this.buffer_[0].byteLength === chunkSize) {\n        this.buffer_.shift();\n      } else {\n        this.buffer_[0] = this.buffer_[0].subarray(chunkSize);\n      }\n\n      this.bufferSize_ -= chunk.byteLength;\n\n      // base64 encode the bytes\n      var binary = [];\n      var length = chunk.byteLength;\n\n      for (var i = 0; i < length; i++) {\n        binary.push(String.fromCharCode(chunk[i]));\n      }\n      var b64str = _globalWindow2['default'].btoa(binary.join(''));\n\n      _globalWindow2['default'][this.flashEncodedDataName_] = function () {\n        // schedule another processBuffer to process any left over data or to\n        // trigger updateend\n        scheduleTick(_this3.processBuffer_.bind(_this3));\n        delete _globalWindow2['default'][_this3.flashEncodedDataName_];\n        return b64str;\n      };\n\n      // Notify the swf that segment data is ready to be appended\n      this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedDataName_);\n    }\n\n    /**\n     * Turns an array of flv tags into a Uint8Array representing the\n     * flv data. Also removes any tags that are before the current\n     * time so that playback begins at or slightly after the right\n     * place on a seek\n     *\n     * @private\n     * @param {Object} segmentData object of segment data\n     */\n  }, {\n    key: 'convertTagsToData_',\n    value: function convertTagsToData_(segmentData) {\n      var segmentByteLength = 0;\n      var tech = this.mediaSource_.tech_;\n      var videoTargetPts = 0;\n      var segment = undefined;\n      var videoTags = segmentData.tags.videoTags;\n      var audioTags = segmentData.tags.audioTags;\n\n      // Establish the media timeline to PTS translation if we don't\n      // have one already\n      if (isNaN(this.basePtsOffset_) && (videoTags.length || audioTags.length)) {\n        // We know there is at least one video or audio tag, but since we may not have both,\n        // we use pts: Infinity for the missing tag. The will force the following Math.min\n        // call will to use the proper pts value since it will always be less than Infinity\n        var firstVideoTag = videoTags[0] || { pts: Infinity };\n        var firstAudioTag = audioTags[0] || { pts: Infinity };\n\n        this.basePtsOffset_ = Math.min(firstAudioTag.pts, firstVideoTag.pts);\n      }\n\n      if (tech.seeking()) {\n        // Do not use previously saved buffer end values while seeking since buffer\n        // is cleared on all seeks\n        this.videoBufferEnd_ = NaN;\n        this.audioBufferEnd_ = NaN;\n      }\n\n      if (isNaN(this.videoBufferEnd_)) {\n        if (tech.buffered().length) {\n          videoTargetPts = tech.buffered().end(0) - this.timestampOffset;\n        }\n\n        // Trim to currentTime if seeking\n        if (tech.seeking()) {\n          videoTargetPts = Math.max(videoTargetPts, tech.currentTime() - this.timestampOffset);\n        }\n\n        // PTS values are represented in milliseconds\n        videoTargetPts *= 1e3;\n        videoTargetPts += this.basePtsOffset_;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        videoTargetPts = this.videoBufferEnd_ + 0.1;\n      }\n\n      // filter complete GOPs with a presentation time less than the seek target/end of buffer\n      var currentIndex = videoTags.length;\n\n      // if the last tag is beyond videoTargetPts, then do not search the list for a GOP\n      // since our videoTargetPts lies in a future segment\n      if (currentIndex && videoTags[currentIndex - 1].pts >= videoTargetPts) {\n        // Start by walking backwards from the end of the list until we reach a tag that\n        // is equal to or less than videoTargetPts\n        while (--currentIndex) {\n          var currentTag = videoTags[currentIndex];\n\n          if (currentTag.pts > videoTargetPts) {\n            continue;\n          }\n\n          // if we see a keyFrame or metadata tag once we've gone below videoTargetPts,\n          // exit the loop as this is the start of the GOP that we want to append\n          if (currentTag.keyFrame || currentTag.metaDataTag) {\n            break;\n          }\n        }\n\n        // We need to check if there are any metadata tags that come before currentIndex\n        // as those will be metadata tags associated with the GOP we are appending\n        // There could be 0 to 2 metadata tags that come before the currentIndex depending\n        // on what videoTargetPts is and whether the transmuxer prepended metadata tags to this\n        // key frame\n        while (currentIndex) {\n          var nextTag = videoTags[currentIndex - 1];\n\n          if (!nextTag.metaDataTag) {\n            break;\n          }\n\n          currentIndex--;\n        }\n      }\n\n      var filteredVideoTags = videoTags.slice(currentIndex);\n\n      var audioTargetPts = undefined;\n\n      if (isNaN(this.audioBufferEnd_)) {\n        audioTargetPts = videoTargetPts;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        audioTargetPts = this.audioBufferEnd_ + 0.1;\n      }\n\n      if (filteredVideoTags.length) {\n        // If targetPts intersects a GOP and we appended the tags for the GOP that came\n        // before targetPts, we want to make sure to trim audio tags at the pts\n        // of the first video tag to avoid brief moments of silence\n        audioTargetPts = Math.min(audioTargetPts, filteredVideoTags[0].pts);\n      }\n\n      // skip tags with a presentation time less than the seek target/end of buffer\n      currentIndex = 0;\n\n      while (currentIndex < audioTags.length) {\n        if (audioTags[currentIndex].pts >= audioTargetPts) {\n          break;\n        }\n\n        currentIndex++;\n      }\n\n      var filteredAudioTags = audioTags.slice(currentIndex);\n\n      // update the audio and video buffer ends\n      if (filteredAudioTags.length) {\n        this.audioBufferEnd_ = filteredAudioTags[filteredAudioTags.length - 1].pts;\n      }\n      if (filteredVideoTags.length) {\n        this.videoBufferEnd_ = filteredVideoTags[filteredVideoTags.length - 1].pts;\n      }\n\n      var tags = this.getOrderedTags_(filteredVideoTags, filteredAudioTags);\n\n      if (tags.length === 0) {\n        return;\n      }\n\n      // If we are appending data that comes before our target pts, we want to tell\n      // the swf to adjust its notion of current time to account for the extra tags\n      // we are appending to complete the GOP that intersects with targetPts\n      if (tags[0].pts < videoTargetPts && tech.seeking()) {\n        var fudgeFactor = 1 / 30;\n        var currentTime = tech.currentTime();\n        var diff = (videoTargetPts - tags[0].pts) / 1e3;\n        var adjustedTime = currentTime - diff;\n\n        if (adjustedTime < fudgeFactor) {\n          adjustedTime = 0;\n        }\n\n        try {\n          this.mediaSource_.swfObj.vjs_adjustCurrentTime(adjustedTime);\n        } catch (e) {\n          // no-op for backwards compatability of swf. If adjustCurrentTime fails,\n          // the swf may incorrectly report currentTime and buffered ranges\n          // but should not affect playback over than the time displayed on the\n          // progress bar is inaccurate\n        }\n      }\n\n      // concatenate the bytes into a single segment\n      for (var i = 0; i < tags.length; i++) {\n        segmentByteLength += tags[i].bytes.byteLength;\n      }\n      segment = new Uint8Array(segmentByteLength);\n      for (var i = 0, j = 0; i < tags.length; i++) {\n        segment.set(tags[i].bytes, j);\n        j += tags[i].bytes.byteLength;\n      }\n\n      return segment;\n    }\n\n    /**\n     * Assemble the FLV tags in decoder order.\n     *\n     * @private\n     * @param {Array} videoTags list of video tags\n     * @param {Array} audioTags list of audio tags\n     */\n  }, {\n    key: 'getOrderedTags_',\n    value: function getOrderedTags_(videoTags, audioTags) {\n      var tag = undefined;\n      var tags = [];\n\n      while (videoTags.length || audioTags.length) {\n        if (!videoTags.length) {\n          // only audio tags remain\n          tag = audioTags.shift();\n        } else if (!audioTags.length) {\n          // only video tags remain\n          tag = videoTags.shift();\n        } else if (audioTags[0].dts < videoTags[0].dts) {\n          // audio should be decoded next\n          tag = audioTags.shift();\n        } else {\n          // video should be decoded next\n          tag = videoTags.shift();\n        }\n\n        tags.push(tag);\n      }\n\n      return tags;\n    }\n  }, {\n    key: 'onHlsReset_',\n    value: function onHlsReset_() {\n      this.transmuxer_.postMessage({ action: 'resetCaptions' });\n    }\n  }]);\n\n  return FlashSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./create-text-tracks-if-necessary\":66,\"./flash-constants\":67,\"./flash-transmuxer-worker\":70,\"./remove-cues-from-track\":72,\"global/window\":31,\"mux.js/lib/flv\":45,\"webworkify\":76}],70:[function(require,module,exports){\n/**\n * @file flash-transmuxer-worker.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment\n    });\n  });\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. The scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibFlv2['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit its\n     * results.\n     */\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar FlashTransmuxerWorker = function FlashTransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new FlashTransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/flv\":45}],71:[function(require,module,exports){\n(function (global){\n/**\n * @file html-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _virtualSourceBuffer = require('./virtual-source-buffer');\n\nvar _virtualSourceBuffer2 = _interopRequireDefault(_virtualSourceBuffer);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = (function (_videojs$EventTarget) {\n  _inherits(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, HtmlMediaSource);\n\n    _get(Object.getPrototypeOf(HtmlMediaSource.prototype), 'constructor', this).call(this);\n    var property = undefined;\n\n    this.nativeMediaSource_ = new _globalWindow2['default'].MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof this.nativeMediaSource_[property] === 'function') {\n        this[property] = this.nativeMediaSource_[property].bind(this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    this.duration_ = NaN;\n    Object.defineProperty(this, 'duration', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(this, 'seekable', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return _videoJs2['default'].createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(this, 'readyState', {\n      get: function get() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(this, 'activeSourceBuffers', {\n      get: function get() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    this.sourceBuffers = [];\n\n    this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          sourceBuffer.audioDisabled_ = disableAudioOnly;\n          if (disableAudioOnly) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = _globalDocument2['default'].querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = (0, _videoJs2['default'])(video.parentNode);\n\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    this.on('sourceended', function (event) {\n      var duration = (0, _addTextTrackData.durationOfVideo)(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      (0, _cleanupTextTracks.cleanupTextTracks)(this.player_);\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n      }\n    });\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  _createClass(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = undefined;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = undefined;\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = (0, _codecUtils.translateLegacyCodecs)(codecs);\n          codecs = codecs.filter(function (codec) {\n            return (0, _codecUtils.isAudioCodec)(codec) || (0, _codecUtils.isVideoCodec)(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new _virtualSourceBuffer2['default'](this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n\n  return HtmlMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = HtmlMediaSource;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./virtual-source-buffer\":75,\"global/document\":30,\"global/window\":31}],72:[function(require,module,exports){\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = undefined;\n  var cue = undefined;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\nexports[\"default\"] = removeCuesFromTrack;\nmodule.exports = exports[\"default\"];\n},{}],73:[function(require,module,exports){\n/**\n * @file transmuxer-worker.js\n */\n\n/**\n * videojs-contrib-media-sources\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Handles communication between the browser-world and the mux.js\n * transmuxer running inside of a WebWorker by exposing a simple\n * message-based interface to a Transmuxer object.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibMp4 = require('mux.js/lib/mp4');\n\nvar _muxJsLibMp42 = _interopRequireDefault(_muxJsLibMp4);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    // transfer ownership of the underlying ArrayBuffer\n    // instead of doing a copy to save memory\n    // ArrayBuffers are transferable but generic TypedArrays are not\n    // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n    var initArray = segment.initSegment;\n\n    segment.initSegment = {\n      data: initArray.buffer,\n      byteOffset: initArray.byteOffset,\n      byteLength: initArray.byteLength\n    };\n\n    var typedArray = segment.data;\n\n    segment.data = typedArray.buffer;\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment,\n      byteOffset: typedArray.byteOffset,\n      byteLength: typedArray.byteLength\n    }, [segment.data]);\n  });\n\n  if (transmuxer.captionStream) {\n    transmuxer.captionStream.on('data', function (caption) {\n      _globalWindow2['default'].postMessage({\n        action: 'caption',\n        data: caption\n      });\n    });\n  }\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibMp42['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n  }, {\n    key: 'setTimestampOffset',\n    value: function setTimestampOffset(data) {\n      var timestampOffset = data.timestampOffset || 0;\n\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n    }\n  }, {\n    key: 'setAudioAppendStart',\n    value: function setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n  }, {\n    key: 'flush',\n    value: function flush(data) {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar TransmuxerWorker = function TransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new TransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/mp4\":54}],74:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-media-sources.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _flashMediaSource = require('./flash-media-source');\n\nvar _flashMediaSource2 = _interopRequireDefault(_flashMediaSource);\n\nvar _htmlMediaSource = require('./html-media-source');\n\nvar _htmlMediaSource2 = _interopRequireDefault(_htmlMediaSource);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\nvar defaults = {\n  // how to determine the MediaSource implementation to use. There\n  // are three available modes:\n  // - auto: use native MediaSources where available and Flash\n  //   everywhere else\n  // - html5: always use native MediaSources\n  // - flash: always use the Flash MediaSource polyfill\n  mode: 'auto'\n};\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n_videoJs2['default'].mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = _videoJs2['default'].mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!_globalWindow2['default'].MediaSource && !!_globalWindow2['default'].MediaSource.isTypeSupported && _globalWindow2['default'].MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality such as flash and\n * video/mp2t videos. returns an instance of HtmlMediaSource or\n * FlashMediaSource depending on what is supported and what options\n * are passed in.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n * @param {Object} options options to use during setup.\n */\nvar MediaSource = function MediaSource(options) {\n  var settings = _videoJs2['default'].mergeOptions(defaults, options);\n\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  // determine whether HTML MediaSources should be used\n  if (settings.mode === 'html5' || settings.mode === 'auto' && supportsNativeMediaSources()) {\n    return new _htmlMediaSource2['default']();\n  } else if (_videoJs2['default'].getTech('Flash')) {\n    return new _flashMediaSource2['default']();\n  }\n\n  throw new Error('Cannot use Flash or Html5 to create a MediaSource for this video');\n};\n\nexports.MediaSource = MediaSource;\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = undefined;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof _htmlMediaSource2['default']) {\n      url = _globalWindow2['default'].URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof _flashMediaSource2['default'])) {\n      url = _globalWindow2['default'].URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    _videoJs2['default'].mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nexports.URL = URL;\n_videoJs2['default'].MediaSource = MediaSource;\n_videoJs2['default'].URL = URL;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./flash-media-source\":68,\"./html-media-source\":71,\"global/window\":31}],75:[function(require,module,exports){\n(function (global){\n/**\n * @file virtual-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _transmuxerWorker = require('./transmuxer-worker');\n\nvar _transmuxerWorker2 = _interopRequireDefault(_transmuxerWorker);\n\nvar _codecUtils = require('./codec-utils');\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function (key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get() {\n          return sourceBuffer[key];\n        },\n        set: function set(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    var _this = this;\n\n    _classCallCheck(this, VirtualSourceBuffer);\n\n    _get(Object.getPrototypeOf(VirtualSourceBuffer.prototype), 'constructor', this).call(this, _videoJs2['default'].EventTarget);\n    this.timestampOffset_ = 0;\n    this.pendingBuffers_ = [];\n    this.bufferUpdating_ = false;\n\n    this.mediaSource_ = mediaSource;\n    this.codecs_ = codecs;\n    this.audioCodec_ = null;\n    this.videoCodec_ = null;\n    this.audioDisabled_ = false;\n    this.appendAudioInitSegment_ = true;\n\n    var options = {\n      remux: false\n    };\n\n    this.codecs_.forEach(function (codec) {\n      if ((0, _codecUtils.isAudioCodec)(codec)) {\n        _this.audioCodec_ = codec;\n      } else if ((0, _codecUtils.isVideoCodec)(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    this.transmuxer_ = (0, _webworkify2['default'])(_transmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(this, 'appendWindowStart', {\n      get: function get() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(this, 'updating', {\n      get: function get() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        var start = null;\n        var end = null;\n        var arity = 0;\n        var extents = [];\n        var ranges = [];\n\n        // neither buffer has been created yet\n        if (!this.videoBuffer_ && !this.audioBuffer_) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // only one buffer is configured\n        if (!this.videoBuffer_) {\n          return this.audioBuffer_.buffered;\n        }\n        if (!this.audioBuffer_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are configured\n        if (this.audioDisabled_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are empty\n        if (this.videoBuffer_.buffered.length === 0 && this.audioBuffer_.buffered.length === 0) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // Handle the case where we have both buffers and create an\n        // intersection of the two\n        var videoBuffered = this.videoBuffer_.buffered;\n        var audioBuffered = this.audioBuffer_.buffered;\n        var count = videoBuffered.length;\n\n        // A) Gather up all start and end times\n        while (count--) {\n          extents.push({ time: videoBuffered.start(count), type: 'start' });\n          extents.push({ time: videoBuffered.end(count), type: 'end' });\n        }\n        count = audioBuffered.length;\n        while (count--) {\n          extents.push({ time: audioBuffered.start(count), type: 'start' });\n          extents.push({ time: audioBuffered.end(count), type: 'end' });\n        }\n        // B) Sort them by time\n        extents.sort(function (a, b) {\n          return a.time - b.time;\n        });\n\n        // C) Go along one by one incrementing arity for start and decrementing\n        //    arity for ends\n        for (count = 0; count < extents.length; count++) {\n          if (extents[count].type === 'start') {\n            arity++;\n\n            // D) If arity is ever incremented to 2 we are entering an\n            //    overlapping range\n            if (arity === 2) {\n              start = extents[count].time;\n            }\n          } else if (extents[count].type === 'end') {\n            arity--;\n\n            // E) If arity is ever decremented to 1 we leaving an\n            //    overlapping range\n            if (arity === 1) {\n              end = extents[count].time;\n            }\n          }\n\n          // F) Record overlapping ranges\n          if (start !== null && end !== null) {\n            ranges.push([start, end]);\n            start = null;\n            end = null;\n          }\n        }\n\n        return _videoJs2['default'].createTimeRanges(ranges);\n      }\n    });\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  _createClass(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        (0, _addTextTrackData.addTextTrackData)(this, sortedSegments.captions, sortedSegments.metadata);\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = undefined;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n\n  return VirtualSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = VirtualSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./codec-utils\":65,\"./create-text-tracks-if-necessary\":66,\"./remove-cues-from-track\":72,\"./transmuxer-worker\":73,\"webworkify\":76}],76:[function(require,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn) {\n    var keys = [];\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n    \n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        if (cache[key].exports === fn) {\n            wkey = key;\n            break;\n        }\n    }\n    \n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            Function(['require','module','exports'], '(' + fn + ')(self)'),\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n    \n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        Function(['require'],'require(' + stringify(wkey) + ')(self)'),\n        scache\n    ];\n    \n    var src = '(' + bundleFn + ')({'\n        + Object.keys(sources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n    \n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n    \n    return new Worker(URL.createObjectURL(\n        new Blob([src], { type: 'text/javascript' })\n    ));\n};\n\n},{}],77:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-hls.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-contrib-hls/blob/master/LICENSE\n */\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _xhr = require('./xhr');\n\nvar _xhr2 = _interopRequireDefault(_xhr);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\nvar _binUtils2 = _interopRequireDefault(_binUtils);\n\nvar _videojsContribMediaSources = require('videojs-contrib-media-sources');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _masterPlaylistController = require('./master-playlist-controller');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _renditionMixin = require('./rendition-mixin');\n\nvar _renditionMixin2 = _interopRequireDefault(_renditionMixin);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _playbackWatcher = require('./playback-watcher');\n\nvar _playbackWatcher2 = _interopRequireDefault(_playbackWatcher);\n\nvar _reloadSourceOnError = require('./reload-source-on-error');\n\nvar _reloadSourceOnError2 = _interopRequireDefault(_reloadSourceOnError);\n\nvar _playlistSelectorsJs = require('./playlist-selectors.js');\n\nvar Hls = {\n  PlaylistLoader: _playlistLoader2['default'],\n  Playlist: _playlist2['default'],\n  Decrypter: _aesDecrypter.Decrypter,\n  AsyncStream: _aesDecrypter.AsyncStream,\n  decrypt: _aesDecrypter.decrypt,\n  utils: _binUtils2['default'],\n\n  STANDARD_PLAYLIST_SELECTOR: _playlistSelectorsJs.lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: _playlistSelectorsJs.lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: _playlistSelectorsJs.comparePlaylistBandwidth,\n  comparePlaylistResolution: _playlistSelectorsJs.comparePlaylistResolution,\n\n  xhr: (0, _xhr2['default'])()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls, prop, {\n    get: function get() {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return _config2['default'][prop];\n    },\n    set: function set(value) {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        _videoJs2['default'].log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      _config2['default'][prop] = value;\n    }\n  });\n});\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls.canPlaySource = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls.supportsNativeHls = (function () {\n  var video = _globalDocument2['default'].createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!_videoJs2['default'].getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n})();\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls.isSupported = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar USER_AGENT = _globalWindow2['default'].navigator && _globalWindow2['default'].navigator.userAgent || '';\n\n/**\n * Determines whether the browser supports a change in the audio configuration\n * during playback. Currently only Firefox 48 and below do not support this.\n * window.isSecureContext is a propterty that was added to window in firefox 49,\n * so we can use it to detect Firefox 49+.\n *\n * @return {Boolean} Whether the browser supports audio config change during playback\n */\nHls.supportsAudioInfoChange_ = function () {\n  if (_videoJs2['default'].browser.IS_FIREFOX) {\n    var firefoxVersionMap = /Firefox\\/([\\d.]+)/i.exec(USER_AGENT);\n    var version = parseInt(firefoxVersionMap[1], 10);\n\n    return version >= 49;\n  }\n  return true;\n};\n\nvar Component = _videoJs2['default'].getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = (function (_Component) {\n  _inherits(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    var _this = this;\n\n    _classCallCheck(this, HlsHandler);\n\n    _get(Object.getPrototypeOf(HlsHandler.prototype), 'constructor', this).call(this, tech, options.hls);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = (0, _videoJs2['default'])(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get() {\n            _videoJs2['default'].log.warn('player.hls is deprecated. Use player.tech_.hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n    }\n\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n\n    // overriding native HLS only works if audio tracks have been emulated\n    // error early if we're misconfigured:\n    if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    this.on(_globalDocument2['default'], ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = _globalDocument2['default'].fullscreenElement || _globalDocument2['default'].webkitFullscreenElement || _globalDocument2['default'].mozFullScreenElement || _globalDocument2['default'].msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.fastQualityChange_();\n      }\n    });\n\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    this.audioTrackChange_ = function () {\n      _this.masterPlaylistController_.setupAudio();\n      _this.tech_.trigger({ type: 'usage', name: 'hls-audio-change' });\n    };\n\n    this.textTrackChange_ = function () {\n      _this.masterPlaylistController_.setupSubtitles();\n    };\n\n    this.on(this.tech_, 'play', this.play);\n  }\n\n  /**\n   * The Source Handler object, which informs video.js what additional\n   * MIME types are supported and sets up playback. It is registered\n   * automatically to the appropriate tech based on the capabilities of\n   * the browser it is running in. It is not necessary to use or modify\n   * this object in normal usage.\n   */\n\n  _createClass(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n  }, {\n    key: 'src',\n    value: function src(_src) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls;\n\n      this.masterPlaylistController_ = new _masterPlaylistController.MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new _playbackWatcher2['default'](_videoJs2['default'].mergeOptions(this.options_, {\n        seekable: function seekable() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = _videoJs2['default'].players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = undefined;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set() {\n            _videoJs2['default'].log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('sourceopen', function () {\n        _this3.tech_.audioTracks().addEventListener('change', _this3.audioTrackChange_);\n        _this3.tech_.remoteTextTracks().addEventListener('change', _this3.textTrackChange_);\n      });\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        (0, _renditionMixin2['default'])(_this3);\n      });\n\n      this.masterPlaylistController_.on('audioupdate', function () {\n        // clear current audioTracks\n        _this3.tech_.clearTracks('audio');\n        _this3.masterPlaylistController_.activeAudioGroup().forEach(function (audioTrack) {\n          _this3.tech_.audioTracks().addTrack(audioTrack);\n        });\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      // In the live case, we need to ignore the very first `seeking` event since\n      // that will be the result of the seek-to-live behavior\n      this.on(this.masterPlaylistController_, 'firstplay', function () {\n        this.ignoreNextSeekingEvent_ = true;\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(_videoJs2['default'].URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = _videoJs2['default'].players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * a helper for grabbing the active audio group from MasterPlaylistController\n     *\n     * @private\n     */\n  }, {\n    key: 'activeAudioGroup_',\n    value: function activeAudioGroup_() {\n      return this.masterPlaylistController_.activeAudioGroup();\n    }\n\n    /**\n     * Begin playing the video.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n    * Abort all outstanding work and cleanup.\n    */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      this.tech_.audioTracks().removeEventListener('change', this.audioTrackChange_);\n      this.tech_.remoteTextTracks().removeEventListener('change', this.textTrackChange_);\n      _get(Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n\n  return HlsHandler;\n})(Component);\n\nvar HlsSourceHandler = function HlsSourceHandler(mode) {\n  return {\n    canHandleSource: function canHandleSource(srcObj) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      // this forces video.js to skip this tech/mode if its not the one we have been\n      // overriden to use, by returing that we cannot handle the source.\n      if (localOptions.hls && localOptions.hls.mode && localOptions.hls.mode !== mode) {\n        return false;\n      }\n      return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n    },\n    handleSource: function handleSource(source, tech) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options, { hls: { mode: mode } });\n\n      if (mode === 'flash') {\n        // We need to trigger this asynchronously to give others the chance\n        // to bind to the event when a source is set at player creation\n        tech.setTimeout(function () {\n          tech.trigger('loadstart');\n        }, 1);\n      }\n\n      tech.hls = new HlsHandler(source, tech, localOptions);\n      tech.hls.xhr = (0, _xhr2['default'])();\n\n      tech.hls.src(source.src);\n      return tech.hls;\n    },\n    canPlayType: function canPlayType(type) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      if (HlsSourceHandler.canPlayType(type, localOptions)) {\n        return 'maybe';\n      }\n      return '';\n    }\n  };\n};\n\nHlsSourceHandler.canPlayType = function (type, options) {\n  // No support for IE 10 or below\n  if (_videoJs2['default'].browser.IE_VERSION && _videoJs2['default'].browser.IE_VERSION <= 10) {\n    return false;\n  }\n\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  // favor native HLS support if it's available\n  if (!options.hls.overrideNative && Hls.supportsNativeHls) {\n    return false;\n  }\n  return mpegurlRE.test(type);\n};\n\nif (typeof _videoJs2['default'].MediaSource === 'undefined' || typeof _videoJs2['default'].URL === 'undefined') {\n  _videoJs2['default'].MediaSource = _videojsContribMediaSources.MediaSource;\n  _videoJs2['default'].URL = _videojsContribMediaSources.URL;\n}\n\nvar flashTech = _videoJs2['default'].getTech('Flash');\n\n// register source handlers with the appropriate techs\nif (_videojsContribMediaSources.MediaSource.supportsNativeMediaSources()) {\n  _videoJs2['default'].getTech('Html5').registerSourceHandler(HlsSourceHandler('html5'), 0);\n}\nif (_globalWindow2['default'].Uint8Array && flashTech) {\n  flashTech.registerSourceHandler(HlsSourceHandler('flash'));\n}\n\n_videoJs2['default'].HlsHandler = HlsHandler;\n_videoJs2['default'].HlsSourceHandler = HlsSourceHandler;\n_videoJs2['default'].Hls = Hls;\nif (!_videoJs2['default'].use) {\n  _videoJs2['default'].registerComponent('Hls', Hls);\n}\n_videoJs2['default'].m3u8 = _m3u8Parser2['default'];\n_videoJs2['default'].options.hls = _videoJs2['default'].options.hls || {};\n\nif (_videoJs2['default'].registerPlugin) {\n  _videoJs2['default'].registerPlugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n} else {\n  _videoJs2['default'].plugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n}\n\nmodule.exports = {\n  Hls: Hls,\n  HlsHandler: HlsHandler,\n  HlsSourceHandler: HlsSourceHandler\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./master-playlist-controller\":5,\"./playback-watcher\":7,\"./playlist\":10,\"./playlist-loader\":8,\"./playlist-selectors.js\":9,\"./reload-source-on-error\":12,\"./rendition-mixin\":13,\"./xhr\":20,\"aes-decrypter\":24,\"global/document\":30,\"global/window\":31,\"m3u8-parser\":32,\"videojs-contrib-media-sources\":74}]},{},[77])(77)\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))\n\n/***/ }),\n\n/***/ 178:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('mu-appbar', {\n    staticClass: \"fixed\",\n    attrs: {\n      \"title\": \"主播\"\n    }\n  }, [_c('mu-icon-button', {\n    attrs: {\n      \"icon\": \"arrow_back\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.goback()\n      }\n    },\n    slot: \"left\"\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"padding-top\": \"66px\"\n    }\n  }, [_c('mu-card', [_c('mu-card-media', [_c('div', {\n    staticClass: \"player\"\n  }, [_c('video-player', {\n    ref: \"videoPlayer\",\n    staticClass: \"vjs-custom-skin\",\n    attrs: {\n      \"options\": _vm.playerOptions,\n      \"playsinline\": true\n    }\n  })], 1)])], 1), _vm._v(\" \"), _c('mu-tabs', {\n    attrs: {\n      \"value\": _vm.currentTab\n    },\n    on: {\n      \"change\": _vm.handleTabChange\n    }\n  }, [_c('mu-tab', {\n    attrs: {\n      \"value\": \"tab1\",\n      \"title\": \"信息\"\n    }\n  }), _vm._v(\" \"), _c('mu-tab', {\n    attrs: {\n      \"value\": \"tab2\",\n      \"title\": \"图集\"\n    }\n  }), _vm._v(\" \"), _c('mu-tab', {\n    attrs: {\n      \"value\": \"tab3\",\n      \"title\": \"视频\"\n    }\n  })], 1), _vm._v(\" \"), (_vm.currentTab === 'tab1') ? _c('div', {\n    staticClass: \"desc-container\"\n  }) : _vm._e(), _vm._v(\" \"), (_vm.currentTab === 'tab2') ? _c('div') : _vm._e(), _vm._v(\" \"), (_vm.currentTab === 'tab3') ? _c('div', [_c('h2'), _vm._v(\" \"), _c('p')]) : _vm._e()], 1), _vm._v(\" \"), _c('mu-dialog', {\n    attrs: {\n      \"open\": _vm.dialog,\n      \"title\": \"广告\"\n    }\n  }, [_c('h3', [_vm._v(\"因用户网络环境的不同，以及当前用户数量，看片时有时候会出现缓冲加载时间较长，您可以直接点击播放减少缓冲时间，如果感觉不是很流畅，可以先尝试去看其他片子，稍后再试！\")]), _vm._v(\" \"), _c('mu-flat-button', {\n    attrs: {\n      \"label\": \"关闭\",\n      \"primary\": \"\"\n    },\n    on: {\n      \"click\": function () {\n        _vm.dialog = false\n      }\n    },\n    slot: \"actions\"\n  })], 1)], 1)\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.53a356ef2543df3ad47b.js","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-173eb0c8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./LiveView.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./LiveView.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-173eb0c8\\\"}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./LiveView.vue\"),\n  /* scopeId */\n  \"data-v-173eb0c8\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/LiveView.vue\n// module id = 139\n// module chunks = 0","<template>\n<div >\n   <mu-appbar class=\"fixed\" title=\"主播\">\n     <mu-icon-button icon=\"arrow_back\" slot=\"left\" @click=\"goback()\" />\n   </mu-appbar>\n<div style=\"padding-top:66px;\">\n <mu-card>\n   <mu-card-media >\n    <div class=\"player\">\n          <video-player  class=\"vjs-custom-skin\"\n                         ref=\"videoPlayer\"\n                         :options=\"playerOptions\"\n                         :playsinline=\"true\">\n                       \n          </video-player>\n    </div>\n   \n  \n  </mu-card-media>\n </mu-card>\n <mu-tabs :value=\"currentTab\" @change=\"handleTabChange\">\n    <mu-tab value=\"tab1\" title=\"信息\"/>\n    <mu-tab value=\"tab2\" title=\"图集\"/>\n    <mu-tab value=\"tab3\" title=\"视频\"/>\n  </mu-tabs>\n  <div class=\"desc-container\" v-if=\"currentTab === 'tab1'\">\n     \n  </div>\n  <div v-if=\"currentTab === 'tab2'\"> \n  \n  </div>\n  <div v-if=\"currentTab === 'tab3'\">\n    <h2></h2>\n    <p>\n      \n    </p>\n  </div>\n</div>\n<mu-dialog :open=\"dialog\" title=\"广告\">\n    <h3>因用户网络环境的不同，以及当前用户数量，看片时有时候会出现缓冲加载时间较长，您可以直接点击播放减少缓冲时间，如果感觉不是很流畅，可以先尝试去看其他片子，稍后再试！</h3>\n    <mu-flat-button  label=\"关闭\" slot=\"actions\" primary @click=\"()=>{dialog=false}\"/>\n  </mu-dialog>\n</div>\n</template>\n<script >\n  require('videojs-contrib-hls/dist/videojs-contrib-hls')\n\n\texport default {\n\t\tname:'livevideo',\n\n    mounted(){\n\n        this.setplayer()\n    },\n\t\t\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tcurrentTab:'tab1',\n        dialog:true,\n        videoplayerurl:'',\n       \n        playerOptions:null\n\t\t\t}\n\t\t},\n   \n    beforeRouteEnter(to,from,next)\n    {\n      next(vm=>{\n        vm.setplayer()\n      })\n    },\n\n    beforeRouteLeave(to,from,next)\n    {\n       this.playerOptions=null;\n       next(true)\n     \n\n    },\n\t\tcomputed:{\n       videoObject() {\n        return this.$store.state.liveobj\n       }\n    },\n\t\tmethods: {\n     \n      setplayer(){\n           this.$http.get(this.$store.state.serverUrl+\"/live/?name=\"+this.videoObject.alt).then(response=>{\n            \n            var slist=[]\n            slist.push({type:\"application/x-mpegURL\",src:response.body,withCredentials: false})\n           \n            this.playerOptions={\n              aspectRatio:'16:9',\n              sources:slist,\n              controlBar: {\n              timeDivider: false,\n              durationDisplay: false\n          },       \n            }\n            //alert(slist[0].src)\n           \n          },response=>{\n        \n          })\n\n      },\n     \n\t\t\tfetchData () {\n\t\t\t\talert('hello')\n\t\t\t},\n      handleTabChange (val) {\n        this.currentTab = val\n      },\n      goback()\n      {\n        this.$router.go(-1)\n      }\n     \n\n    } \n  }\n</script>\n<style scoped>\n  \n   .flex{\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n   }\n   \n   .desc-container{\n    height:100%;\n    overflow-y: scroll;\n   }\n   img {\n    width: 100%;\n   }\n   .fixed {\n    position:fixed;\n    top: 0;\n   }\n \n</style>\n\n\n// WEBPACK FOOTER //\n// LiveView.vue?8d698418","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".flex[data-v-173eb0c8]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.desc-container[data-v-173eb0c8]{height:100%;overflow-y:scroll}img[data-v-173eb0c8]{width:100%}.fixed[data-v-173eb0c8]{position:fixed;top:0}\", \"\", {\"version\":3,\"sources\":[\"/Users/apple/mywebs/bb81_datas/clientapp/src/components/LiveView.vue\"],\"names\":[],\"mappings\":\"AACA,uBACC,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,4BAA6B,AAC7B,6BAA8B,AAC1B,0BAA2B,AACvB,sBAAuB,AAC/B,qBAAsB,AAClB,iBAAkB,AACtB,uBAAwB,AACpB,oBAAqB,AACjB,0BAA4B,CACpC,AACD,iCACC,YAAY,AACZ,iBAAmB,CACnB,AACD,qBACC,UAAY,CACZ,AACD,wBACC,eAAe,AACf,KAAO,CACP\",\"file\":\"LiveView.vue\",\"sourcesContent\":[\"\\n.flex[data-v-173eb0c8]{\\n display: -webkit-box;\\n display: -ms-flexbox;\\n display: flex;\\n -webkit-box-orient: vertical;\\n -webkit-box-direction: normal;\\n     -ms-flex-direction: column;\\n         flex-direction: column;\\n -ms-flex-wrap: nowrap;\\n     flex-wrap: nowrap;\\n -webkit-box-pack: start;\\n     -ms-flex-pack: start;\\n         justify-content: flex-start;\\n}\\n.desc-container[data-v-173eb0c8]{\\n height:100%;\\n overflow-y: scroll;\\n}\\nimg[data-v-173eb0c8] {\\n width: 100%;\\n}\\n.fixed[data-v-173eb0c8] {\\n position:fixed;\\n top: 0;\\n}\\n\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-173eb0c8\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/LiveView.vue\n// module id = 157\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-173eb0c8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./LiveView.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"27171dba\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-173eb0c8\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/LiveView.vue\n// module id = 167\n// module chunks = 0","/**\n * videojs-contrib-hls\n * @version 5.10.0\n * @copyright 2017 Brightcove, Inc\n * @license Apache-2.0\n */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.videojsContribHls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file ad-cue-tags.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = undefined;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = undefined;\n        var adTotal = undefined;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$split$map = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$split$map2 = _slicedToArray(_segment$cueOutCont$split$map, 2);\n\n        adOffset = _segment$cueOutCont$split$map2[0];\n        adTotal = _segment$cueOutCont$split$map2[1];\n\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\nexports['default'] = {\n  updateAdCues: updateAdCues,\n  findAdCue: findAdCue\n};\nmodule.exports = exports['default'];\n},{\"global/window\":31}],2:[function(require,module,exports){\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar utils = {\n  hexDump: function hexDump(data) {\n    var bytes = Array.prototype.slice.call(data);\n    var step = 16;\n    var result = '';\n    var hex = undefined;\n    var ascii = undefined;\n\n    for (var j = 0; j < bytes.length / step; j++) {\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n      result += hex + ' ' + ascii + '\\n';\n    }\n    return result;\n  },\n  tagDump: function tagDump(tag) {\n    return utils.hexDump(tag.bytes);\n  },\n  textRanges: function textRanges(ranges) {\n    var result = '';\n    var i = undefined;\n\n    for (i = 0; i < ranges.length; i++) {\n      result += textRange(ranges, i) + ' ';\n    }\n    return result;\n  },\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId\n};\n\nexports['default'] = utils;\nmodule.exports = exports['default'];\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\nmodule.exports = exports[\"default\"];\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\n/**\n * Our web worker interface so that things can talk to aes-decrypter\n * that will be running in a web worker. the scope is passed to this by\n * webworkify.\n *\n * @param {Object} self\n *        the scope for the web worker\n */\nvar DecrypterWorker = function DecrypterWorker(self) {\n  self.onmessage = function (event) {\n    var data = event.data;\n    var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n    /* eslint-disable no-new, handle-callback-err */\n    new _aesDecrypter.Decrypter(encrypted, key, iv, function (err, bytes) {\n      _globalWindow2['default'].postMessage((0, _binUtils.createTransferableMessage)({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n};\n\nexports['default'] = function (self) {\n  return new DecrypterWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"./bin-utils\":2,\"aes-decrypter\":24,\"global/window\":31}],5:[function(require,module,exports){\n(function (global){\n/**\n * @file master-playlist-controller.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _vttSegmentLoader = require('./vtt-segment-loader');\n\nvar _vttSegmentLoader2 = _interopRequireDefault(_vttSegmentLoader);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _adCueTags = require('./ad-cue-tags');\n\nvar _adCueTags2 = _interopRequireDefault(_adCueTags);\n\nvar _syncController = require('./sync-controller');\n\nvar _syncController2 = _interopRequireDefault(_syncController);\n\nvar _videojsContribMediaSourcesEs5CodecUtils = require('videojs-contrib-media-sources/es5/codec-utils');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _decrypterWorker = require('./decrypter-worker');\n\nvar _decrypterWorker2 = _interopRequireDefault(_decrypterWorker);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = undefined;\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\n/**\n * determine if an object a is differnt from\n * and object b. both only having one dimensional\n * properties\n *\n * @param {Object} a object one\n * @param {Object} b object two\n * @return {Boolean} if the object has changed or not\n */\nvar objectChanged = function objectChanged(a, b) {\n  if (typeof a !== typeof b) {\n    return true;\n  }\n  // if we have a different number of elements\n  // something has changed\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return true;\n  }\n\n  for (var prop in a) {\n    if (a[prop] !== b[prop]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs_ = function mapLegacyAvcCodecs_(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return (0, _videojsContribMediaSourcesEs5CodecUtils.translateLegacyCodecs)([match])[0];\n  });\n};\n\nexports.mapLegacyAvcCodecs_ = mapLegacyAvcCodecs_;\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return (0, _utilCodecsJs.parseCodecs)(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist_ = function mimeTypesForPlaylist_(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        if (!audioGroup[groupId].uri) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    _videoJs2['default'].log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n    codecInfo.audioProfile = defaultCodecs.audioProfile;\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is ano video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\nexports.mimeTypesForPlaylist_ = mimeTypesForPlaylist_;\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\n\nvar MasterPlaylistController = (function (_videojs$EventTarget) {\n  _inherits(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    var _this = this;\n\n    _classCallCheck(this, MasterPlaylistController);\n\n    _get(Object.getPrototypeOf(MasterPlaylistController.prototype), 'constructor', this).call(this);\n\n    var url = options.url;\n    var withCredentials = options.withCredentials;\n    var mode = options.mode;\n    var tech = options.tech;\n    var bandwidth = options.bandwidth;\n    var externHls = options.externHls;\n    var useCueTags = options.useCueTags;\n    var blacklistDuration = options.blacklistDuration;\n    var enableLowInitialPlaylist = options.enableLowInitialPlaylist;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.hls_ = tech.hls;\n    this.mode_ = mode;\n    this.useCueTags_ = useCueTags;\n    this.blacklistDuration = blacklistDuration;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    this.requestOptions_ = {\n      withCredentials: this.withCredentials,\n      timeout: null\n    };\n\n    this.audioGroups_ = {};\n    this.subtitleGroups_ = { groups: {}, tracks: {} };\n    this.closedCaptionGroups_ = { groups: {}, tracks: {} };\n\n    this.mediaSource = new _videoJs2['default'].MediaSource({ mode: mode });\n    this.audioinfo_ = null;\n    this.mediaSource.on('audioinfo', this.handleAudioinfoUpdate_.bind(this));\n\n    // load the media source into the player\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_.bind(this));\n\n    this.seekable_ = _videoJs2['default'].createTimeRanges();\n    this.hasPlayed_ = function () {\n      return false;\n    };\n\n    this.syncController_ = new _syncController2['default'](options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    this.decrypter_ = (0, _webworkify2['default'])(_decrypterWorker2['default']);\n\n    var segmentLoaderSettings = {\n      hls: this.hls_,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: function seekable() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_\n    };\n\n    // setup playlist loaders\n    this.masterPlaylistLoader_ = new _playlistLoader2['default'](url, this.hls_, this.withCredentials);\n    this.setupMasterPlaylistLoaderListeners_();\n    this.audioPlaylistLoader_ = null;\n    this.subtitlePlaylistLoader_ = null;\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    this.mainSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    this.audioSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    this.subtitleSegmentLoader_ = new _vttSegmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    this.masterPlaylistLoader_.load();\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  _createClass(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        _this2.fillAudioTracks_();\n        _this2.setupAudio();\n\n        _this2.fillSubtitleTracks_();\n        _this2.setupSubtitles();\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n        _this2.fillClosedCaptionTracks_();\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          _videoJs2['default'].log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('audioupdate');\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          var selectedMedia = undefined;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n        }\n\n        if (!updatedPlaylist.endList) {\n          (function () {\n            var addSeekableRange = function addSeekableRange() {\n              var seekable = _this2.seekable();\n\n              if (seekable.length !== 0) {\n                _this2.mediaSource.addSeekableRange_(seekable.start(0), seekable.end(0));\n              }\n            };\n\n            if (_this2.duration() !== Infinity) {\n              (function () {\n                var onDurationchange = function onDurationchange() {\n                  if (_this2.duration() === Infinity) {\n                    addSeekableRange();\n                  } else {\n                    _this2.tech_.one('durationchange', onDurationchange);\n                  }\n                };\n\n                _this2.tech_.one('durationchange', onDurationchange);\n              })();\n            } else {\n              addSeekableRange();\n            }\n          })();\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n        var activeAudioGroup = undefined;\n        var activeTrack = undefined;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (_this2.masterPlaylistLoader_.isLowestEnabledRendition_()) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n        _this2.mainSegmentLoader_.load();\n\n        // if the audio group has changed, a new audio track has to be\n        // enabled\n        activeAudioGroup = _this2.activeAudioGroup();\n        activeTrack = activeAudioGroup.filter(function (track) {\n          return track.enabled;\n        })[0];\n        if (!activeTrack) {\n          _this2.mediaGroupChanged();\n          _this2.trigger('audioupdate');\n        }\n        _this2.setupSubtitles();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < _config2['default'].MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.audioSegmentLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered with the current alternate audio track' + '. Switching back to default.');\n        _this3.audioSegmentLoader_.abort();\n        _this3.audioPlaylistLoader_ = null;\n        _this3.setupAudio();\n      });\n\n      this.subtitleSegmentLoader_.on('error', this.handleSubtitleError_.bind(this));\n    }\n  }, {\n    key: 'handleAudioinfoUpdate_',\n    value: function handleAudioinfoUpdate_(event) {\n      if (Hls.supportsAudioInfoChange_() || !this.audioInfo_ || !objectChanged(this.audioInfo_, event.info)) {\n        this.audioInfo_ = event.info;\n        return;\n      }\n\n      var error = 'had different audio properties (channels, sample rate, etc.) ' + 'or changed in some other way.  This behavior is currently ' + 'unsupported in Firefox 48 and below due to an issue: \\n\\n' + 'https://bugzilla.mozilla.org/show_bug.cgi?id=1247138\\n\\n';\n\n      var enabledIndex = this.activeAudioGroup().map(function (track) {\n        return track.enabled;\n      }).indexOf(true);\n      var enabledTrack = this.activeAudioGroup()[enabledIndex];\n      var defaultTrack = this.activeAudioGroup().filter(function (track) {\n        return track.properties_ && track.properties_['default'];\n      })[0];\n\n      // they did not switch audiotracks\n      // blacklist the current playlist\n      if (!this.audioPlaylistLoader_) {\n        error = 'The rendition that we tried to switch to ' + error + 'Unfortunately that means we will have to blacklist ' + 'the current playlist and switch to another. Sorry!';\n        this.blacklistCurrentPlaylist();\n      } else {\n        error = 'The audio track \\'' + enabledTrack.label + '\\' that we tried to ' + ('switch to ' + error + ' Unfortunately this means we will have to ') + ('return you to the main track \\'' + defaultTrack.label + '\\'. Sorry!');\n        defaultTrack.enabled = true;\n        this.activeAudioGroup().splice(enabledIndex, 1);\n        this.trigger('audioupdate');\n      }\n\n      _videoJs2['default'].log.warn(error);\n      this.setupAudio();\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * fill our internal list of HlsAudioTracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillAudioTracks_',\n    value: function fillAudioTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      // force a default if we have none or we are not\n      // in html5 mode (the only mode to support more than one\n      // audio track)\n      if (!mediaGroups || !mediaGroups.AUDIO || Object.keys(mediaGroups.AUDIO).length === 0 || this.mode_ !== 'html5') {\n        // \"main\" audio group, track name \"default\"\n        mediaGroups.AUDIO = { main: { 'default': { 'default': true } } };\n      }\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        if (!this.audioGroups_[mediaGroup]) {\n          this.audioGroups_[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n          var track = new _videoJs2['default'].AudioTrack({\n            id: label,\n            kind: this.audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            label: label\n          });\n\n          track.properties_ = properties;\n          this.audioGroups_[mediaGroup].push(track);\n        }\n      }\n\n      // enable the default active track\n      (this.activeAudioGroup().filter(function (audioTrack) {\n        return audioTrack.properties_['default'];\n      })[0] || this.activeAudioGroup()[0]).enabled = true;\n    }\n\n    /**\n     * Convert the properties of an HLS track into an audioTrackKind.\n     *\n     * @private\n     */\n  }, {\n    key: 'audioTrackKind_',\n    value: function audioTrackKind_(properties) {\n      var kind = properties['default'] ? 'main' : 'alternative';\n\n      if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n        kind = 'main-desc';\n      }\n\n      return kind;\n    }\n\n    /**\n     * fill our internal list of Subtitle Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillSubtitleTracks_',\n    value: function fillSubtitleTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups.SUBTITLES) {\n        if (!this.subtitleGroups_.groups[mediaGroup]) {\n          this.subtitleGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups.SUBTITLES[mediaGroup]) {\n          var properties = mediaGroups.SUBTITLES[mediaGroup][label];\n\n          if (!properties.forced) {\n            this.subtitleGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n            if (typeof this.subtitleGroups_.tracks[label] === 'undefined') {\n              var track = this.tech_.addRemoteTextTrack({\n                id: label,\n                kind: 'subtitles',\n                enabled: false,\n                language: properties.language,\n                label: label\n              }, false).track;\n\n              this.subtitleGroups_.tracks[label] = track;\n            }\n          }\n        }\n      }\n\n      // Do not enable a default subtitle track. Wait for user interaction instead.\n    }\n\n    /**\n     * fill our internal list of Captions Tracks with data from\n     * the master playlist or use a default\n     *\n     * @private\n     */\n  }, {\n    key: 'fillClosedCaptionTracks_',\n    value: function fillClosedCaptionTracks_() {\n      var master = this.master();\n      var mediaGroups = master.mediaGroups || {};\n\n      for (var mediaGroup in mediaGroups['CLOSED-CAPTIONS']) {\n        if (!this.closedCaptionGroups_.groups[mediaGroup]) {\n          this.closedCaptionGroups_.groups[mediaGroup] = [];\n        }\n\n        for (var label in mediaGroups['CLOSED-CAPTIONS'][mediaGroup]) {\n          var properties = mediaGroups['CLOSED-CAPTIONS'][mediaGroup][label];\n\n          // We only support CEA608 captions for now, so ignore anything that\n          // doesn't use a CCx INSTREAM-ID\n          if (!properties.instreamId.match(/CC\\d/)) {\n            continue;\n          }\n\n          this.closedCaptionGroups_.groups[mediaGroup].push(_videoJs2['default'].mergeOptions({ id: label }, properties));\n\n          if (typeof this.closedCaptionGroups_.tracks[label] === 'undefined') {\n            var track = this.tech_.addRemoteTextTrack({\n              id: properties.instreamId,\n              kind: 'captions',\n              enabled: false,\n              language: properties.language,\n              label: label\n            }, false).track;\n\n            this.closedCaptionGroups_.tracks[label] = track;\n          }\n        }\n      }\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Returns the audio group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeAudioGroup',\n    value: function activeAudioGroup() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (videoPlaylist.attributes.AUDIO) {\n        result = this.audioGroups_[videoPlaylist.attributes.AUDIO];\n      }\n\n      return result || this.audioGroups_.main;\n    }\n\n    /**\n     * Returns the subtitle group for the currently active primary\n     * media playlist.\n     */\n  }, {\n    key: 'activeSubtitleGroup_',\n    value: function activeSubtitleGroup_() {\n      var videoPlaylist = this.masterPlaylistLoader_.media();\n      var result = undefined;\n\n      if (!videoPlaylist) {\n        return null;\n      }\n\n      if (videoPlaylist.attributes.SUBTITLES) {\n        result = this.subtitleGroups_.groups[videoPlaylist.attributes.SUBTITLES];\n      }\n\n      return result || this.subtitleGroups_.groups.main;\n    }\n  }, {\n    key: 'activeSubtitleTrack_',\n    value: function activeSubtitleTrack_() {\n      for (var trackName in this.subtitleGroups_.tracks) {\n        if (this.subtitleGroups_.tracks[trackName].mode === 'showing') {\n          return this.subtitleGroups_.tracks[trackName];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: 'handleSubtitleError_',\n    value: function handleSubtitleError_() {\n      _videoJs2['default'].log.warn('Problem encountered loading the subtitle track' + '. Switching back to default.');\n\n      this.subtitleSegmentLoader_.abort();\n\n      var track = this.activeSubtitleTrack_();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      this.setupSubtitles();\n    }\n\n    /**\n     * Determine the correct audio renditions based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is only called when the media-group changes\n     * and performs non-destructive 'resync' of the SegmentLoader(s) since\n     * the playlist has likely changed\n     */\n  }, {\n    key: 'mediaGroupChanged',\n    value: function mediaGroupChanged() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resyncAudioLoaders_(track);\n    }\n\n    /**\n     * Determine the correct audio rendition based on the active\n     * AudioTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default audio track and should be\n     * invoked again if the track is changed. Performs destructive 'reset'\n     * on the SegmentLoaders(s) to ensure we start loading audio as\n     * close to currentTime as possible\n     */\n  }, {\n    key: 'setupAudio',\n    value: function setupAudio() {\n      var track = this.getActiveAudioTrack_();\n\n      this.stopAudioLoaders_();\n      this.resetAudioLoaders_(track);\n    }\n\n    /**\n     * Returns the currently active track or the default track if none\n     * are active\n     */\n  }, {\n    key: 'getActiveAudioTrack_',\n    value: function getActiveAudioTrack_() {\n      // determine whether seperate loaders are required for the audio\n      // rendition\n      var audioGroup = this.activeAudioGroup();\n      var track = audioGroup.filter(function (audioTrack) {\n        return audioTrack.enabled;\n      })[0];\n\n      if (!track) {\n        track = audioGroup.filter(function (audioTrack) {\n          return audioTrack.properties_['default'];\n        })[0] || audioGroup[0];\n        track.enabled = true;\n      }\n\n      return track;\n    }\n\n    /**\n     * Destroy the PlaylistLoader and pause the SegmentLoader specifically\n     * for audio when switching audio tracks\n     */\n  }, {\n    key: 'stopAudioLoaders_',\n    value: function stopAudioLoaders_() {\n      // stop playlist and segment loading for audio\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n        this.audioPlaylistLoader_ = null;\n      }\n      this.audioSegmentLoader_.pause();\n    }\n\n    /**\n     * Destructive reset of the mainSegmentLoader (when audio is muxed)\n     * or audioSegmentLoader (when audio is demuxed) to prepare them\n     * to start loading new data right at currentTime\n     */\n  }, {\n    key: 'resetAudioLoaders_',\n    value: function resetAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        this.mainSegmentLoader_.resetEverything();\n        return;\n      }\n\n      this.audioSegmentLoader_.resetEverything();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Non-destructive resync of the audioSegmentLoader (when audio\n     * is demuxed) to prepare to continue appending new audio data\n     * at the end of the current buffered region\n     */\n  }, {\n    key: 'resyncAudioLoaders_',\n    value: function resyncAudioLoaders_(track) {\n      if (!track.properties_.resolvedUri) {\n        return;\n      }\n\n      this.audioSegmentLoader_.resyncLoader();\n      this.setupAudioPlaylistLoader_(track);\n    }\n\n    /**\n     * Setup a new audioPlaylistLoader and start the audioSegmentLoader\n     * to begin loading demuxed audio\n     */\n  }, {\n    key: 'setupAudioPlaylistLoader_',\n    value: function setupAudioPlaylistLoader_(track) {\n      var _this4 = this;\n\n      // startup playlist and segment loaders for the enabled audio\n      // track\n      this.audioPlaylistLoader_ = new _playlistLoader2['default'](track.properties_.resolvedUri, this.hls_, this.withCredentials);\n      this.audioPlaylistLoader_.load();\n\n      this.audioPlaylistLoader_.on('loadedmetadata', function () {\n        var audioPlaylist = _this4.audioPlaylistLoader_.media();\n\n        _this4.audioSegmentLoader_.playlist(audioPlaylist, _this4.requestOptions_);\n\n        // if the video is already playing, or if this isn't a live video and preload\n        // permits, start downloading segments\n        if (!_this4.tech_.paused() || audioPlaylist.endList && _this4.tech_.preload() !== 'none') {\n          _this4.audioSegmentLoader_.load();\n        }\n\n        if (!audioPlaylist.endList) {\n          _this4.audioPlaylistLoader_.trigger('firstplay');\n        }\n      });\n\n      this.audioPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = undefined;\n\n        if (_this4.audioPlaylistLoader_) {\n          updatedPlaylist = _this4.audioPlaylistLoader_.media();\n        }\n\n        if (!updatedPlaylist) {\n          // only one playlist to select\n          _this4.audioPlaylistLoader_.media(_this4.audioPlaylistLoader_.playlists.master.playlists[0]);\n          return;\n        }\n\n        _this4.audioSegmentLoader_.playlist(updatedPlaylist, _this4.requestOptions_);\n      });\n\n      this.audioPlaylistLoader_.on('error', function () {\n        _videoJs2['default'].log.warn('Problem encountered loading the alternate audio track' + '. Switching back to default.');\n        _this4.audioSegmentLoader_.abort();\n        _this4.setupAudio();\n      });\n    }\n\n    /**\n     * Determine the correct subtitle playlist based on the active\n     * SubtitleTrack and initialize a PlaylistLoader and SegmentLoader if\n     * necessary. This method is called once automatically before\n     * playback begins to enable the default subtitle track and should be\n     * invoked again if the track is changed.\n     */\n  }, {\n    key: 'setupSubtitles',\n    value: function setupSubtitles() {\n      var _this5 = this;\n\n      var subtitleGroup = this.activeSubtitleGroup_();\n      var track = this.activeSubtitleTrack_();\n\n      this.subtitleSegmentLoader_.pause();\n\n      if (!track) {\n        // stop playlist and segment loading for subtitles\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n          this.subtitlePlaylistLoader_ = null;\n        }\n        return;\n      }\n\n      var properties = subtitleGroup.filter(function (subtitleProperties) {\n        return subtitleProperties.id === track.id;\n      })[0];\n\n      // startup playlist and segment loaders for the enabled subtitle track\n      if (!this.subtitlePlaylistLoader_ ||\n      // if the media hasn't loaded yet, we don't have the URI to check, so it is\n      // easiest to simply recreate the playlist loader\n      !this.subtitlePlaylistLoader_.media() || this.subtitlePlaylistLoader_.media().resolvedUri !== properties.resolvedUri) {\n\n        if (this.subtitlePlaylistLoader_) {\n          this.subtitlePlaylistLoader_.dispose();\n        }\n\n        // reset the segment loader only when the subtitle playlist is changed instead of\n        // every time setupSubtitles is called since switching subtitle tracks fires\n        // multiple `change` events on the TextTrackList\n        this.subtitleSegmentLoader_.resetEverything();\n\n        // can't reuse playlistloader because we're only using single renditions and not a\n        // proper master\n        this.subtitlePlaylistLoader_ = new _playlistLoader2['default'](properties.resolvedUri, this.hls_, this.withCredentials);\n\n        this.subtitlePlaylistLoader_.on('loadedmetadata', function () {\n          var subtitlePlaylist = _this5.subtitlePlaylistLoader_.media();\n\n          _this5.subtitleSegmentLoader_.playlist(subtitlePlaylist, _this5.requestOptions_);\n          _this5.subtitleSegmentLoader_.track(_this5.activeSubtitleTrack_());\n\n          // if the video is already playing, or if this isn't a live video and preload\n          // permits, start downloading segments\n          if (!_this5.tech_.paused() || subtitlePlaylist.endList && _this5.tech_.preload() !== 'none') {\n            _this5.subtitleSegmentLoader_.load();\n          }\n        });\n\n        this.subtitlePlaylistLoader_.on('loadedplaylist', function () {\n          var updatedPlaylist = undefined;\n\n          if (_this5.subtitlePlaylistLoader_) {\n            updatedPlaylist = _this5.subtitlePlaylistLoader_.media();\n          }\n\n          if (!updatedPlaylist) {\n            return;\n          }\n\n          _this5.subtitleSegmentLoader_.playlist(updatedPlaylist, _this5.requestOptions_);\n        });\n\n        this.subtitlePlaylistLoader_.on('error', this.handleSubtitleError_.bind(this));\n      }\n\n      if (this.subtitlePlaylistLoader_.media() && this.subtitlePlaylistLoader_.media().resolvedUri === properties.resolvedUri) {\n        this.subtitleSegmentLoader_.load();\n      } else {\n        this.subtitlePlaylistLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method may perform destructive actions, like\n     * removing already buffered content, to readjust the currently\n     * active playlist quickly.\n     *\n     * @private\n     */\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Begin playback.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.tech_.setCurrentTime(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable.start(0)) {\n          return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var seekable = undefined;\n      var media = this.masterPlaylistLoader_.media();\n\n      // check that everything is ready to begin buffering in the live\n      // scenario\n      // 1) the active media playlist is available\n      if (media &&\n      // 2) the player is not paused\n      !this.tech_.paused() &&\n      // 3) the player has not started playing\n      !this.hasPlayed_()) {\n\n        // when the video is a live stream\n        if (!media.endList) {\n          this.trigger('firstplay');\n\n          // seek to the latest media position for live videos\n          seekable = this.seekable();\n          if (seekable.length) {\n            this.tech_.setCurrentTime(seekable.end(0));\n          }\n        }\n        this.hasPlayed_ = function () {\n          return true;\n        };\n        // now that we are ready, load the segment\n        this.load();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        _videoJs2['default'].log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        this.tech_.play();\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.audioPlaylistLoader_) {\n        // if the audio playlist loader exists, then alternate audio is active, so we need\n        // to wait for both the main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable = this.seekable();\n\n      if (!seekable.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and\n      // buffer has reached absolute end of playlist\n      return bufferedEnd - currentTime <= _ranges2['default'].TIME_FUDGE_FACTOR && absolutePlaylistEnd - bufferedEnd <= _ranges2['default'].TIME_FUDGE_FACTOR;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist(error, blacklistDuration) {\n      if (error === undefined) error = {};\n\n      var currentPlaylist = undefined;\n      var nextPlaylist = undefined;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.isFinalRendition_();\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        _videoJs2['default'].log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + (blacklistDuration ? blacklistDuration : this.blacklistDuration) * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      _videoJs2['default'].log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = _ranges2['default'].findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks\n      var isFlash = this.mode_ === 'flash' || this.mode_ === 'auto' && !_videoJs2['default'].MediaSource.supportsNativeMediaSources();\n\n      // if the seek location is already buffered, continue buffering as\n      // usual\n      if (buffered && buffered.length && !isFlash) {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.audioPlaylistLoader_) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = undefined;\n      var audioSeekable = undefined;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.audioPlaylistLoader_) {\n        media = this.audioPlaylistLoader_.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = _videoJs2['default'].createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this6.mediaSource.duration = newDuration;\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      if (this.audioPlaylistLoader_) {\n        this.audioPlaylistLoader_.dispose();\n      }\n      if (this.subtitlePlaylistLoader_) {\n        this.subtitlePlaylistLoader_.dispose();\n      }\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = undefined;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist_(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n      this.mainSegmentLoader_.mimeType(mimeTypes[0]);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1]);\n      }\n\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var master = this.masterPlaylistLoader_.master;\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = undefined;\n\n      if (media.attributes.CODECS) {\n        codecs = (0, _utilCodecsJs.parseCodecs)(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n      master.playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          var codecString = variant.attributes.CODECS;\n\n          variantCodecs = (0, _utilCodecsJs.parseCodecs)(codecString);\n\n          if (window.MediaSource && window.MediaSource.isTypeSupported && !window.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs_(codecString) + '\"')) {\n            variant.excludeUntil = Infinity;\n          }\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable = this.seekable();\n\n      if (seekable.length) {\n        offset = seekable.start(0);\n      }\n\n      _adCueTags2['default'].updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].GOAL_BUFFER_LENGTH;\n      var rate = _config2['default'].GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].BUFFER_LOW_WATER_LINE;\n      var rate = _config2['default'].BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n\n  return MasterPlaylistController;\n})(_videoJs2['default'].EventTarget);\n\nexports.MasterPlaylistController = MasterPlaylistController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ad-cue-tags\":1,\"./config\":3,\"./decrypter-worker\":4,\"./playlist-loader\":8,\"./ranges\":11,\"./segment-loader\":15,\"./sync-controller\":17,\"./util/codecs.js\":18,\"./vtt-segment-loader\":19,\"videojs-contrib-media-sources/es5/codec-utils\":65,\"webworkify\":76}],6:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\nexports.REQUEST_ERRORS = REQUEST_ERRORS;\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = undefined;\n  var byterangeEnd = undefined;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr) {\n    xhr.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage((0, _binUtils.createTransferableMessage)({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = _videoJs2['default'].mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr, xhrOptions, decryptionWorker, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, finishProcessingFn);\n    var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, finishProcessingFn);\n  var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\nexports.mediaSegmentRequest = mediaSegmentRequest;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2}],7:[function(require,module,exports){\n(function (global){\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = (function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    _classCallCheck(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'playback-watcher ->');\n    }\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  _createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = _globalWindow2['default'].setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + 0.1 >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies (e.g. The Flash tech does not fire a `waiting` event when the end\n        // of the buffer is reached and has fallen off the live window). Calling\n        // `techWaiting_` here allows us to simulate responding to a native `waiting` event\n        // when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.outsideOfSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + _ranges2['default'].printableRange(seekable) + '. Seeking to ') + (seekableEnd + '.'));\n        this.tech_.setCurrentTime(seekableEnd);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = _ranges2['default'].findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.fellOutOfLiveWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'outsideOfSeekableWindow_',\n    value: function outsideOfSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n      if (currentTime < seekable.start(0) - 0.1 || currentTime > seekable.end(seekable.length - 1) + 0.1) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'fellOutOfLiveWindow_',\n    value: function fellOutOfLiveWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.tech_.setCurrentTime(nextRange.start(0) + _ranges2['default'].TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = _ranges2['default'].findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return PlaybackWatcher;\n})();\n\nexports['default'] = PlaybackWatcher;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ranges\":11,\"global/window\":31}],8:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _resolveUrl = require('./resolve-url');\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _playlistJs = require('./playlist.js');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n  var length = undefined;\n  var i = undefined;\n\n  offset = offset || 0;\n  length = Math.min(original.length, update.length + offset);\n\n  for (i = offset; i < length; i++) {\n    result[i - offset] = (0, _videoJs.mergeOptions)(original[i], result[i - offset]);\n  }\n  return result;\n};\n\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var changed = false;\n  var result = (0, _videoJs.mergeOptions)(master, {});\n  var i = master.playlists.length;\n  var playlist = undefined;\n  var segment = undefined;\n  var j = undefined;\n\n  while (i--) {\n    playlist = result.playlists[i];\n    if (playlist.uri === media.uri) {\n      // consider the playlist unchanged if the number of segments\n      // are equal and the media sequence number is unchanged\n      if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n        continue;\n      }\n\n      result.playlists[i] = (0, _videoJs.mergeOptions)(playlist, media);\n      result.playlists[media.uri] = result.playlists[i];\n\n      // if the update could overlap existing segment information,\n      // merge the two lists\n      if (playlist.segments) {\n        result.playlists[i].segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n      }\n      // resolve any missing segment and key URIs\n      j = 0;\n      if (result.playlists[i].segments) {\n        j = result.playlists[i].segments.length;\n      }\n      while (j--) {\n        segment = result.playlists[i].segments[j];\n        if (!segment.resolvedUri) {\n          segment.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.uri);\n        }\n        if (segment.key && !segment.key.resolvedUri) {\n          segment.key.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.key.uri);\n        }\n        if (segment.map && !segment.map.resolvedUri) {\n          segment.map.resolvedUri = (0, _resolveUrl2['default'])(playlist.resolvedUri, segment.map.uri);\n        }\n      }\n      changed = true;\n    }\n  }\n  return changed ? result : null;\n};\n\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\nvar PlaylistLoader = function PlaylistLoader(srcUrl, hls, withCredentials) {\n  var _this = this;\n\n  /* eslint-disable consistent-this */\n  var loader = this;\n  /* eslint-enable consistent-this */\n  var mediaUpdateTimeout = undefined;\n  var request = undefined;\n  var playlistRequestError = undefined;\n  var haveMetadata = undefined;\n\n  PlaylistLoader.prototype.constructor.call(this);\n\n  this.hls_ = hls;\n\n  if (!srcUrl) {\n    throw new Error('A non-empty playlist URL is required');\n  }\n\n  playlistRequestError = function (xhr, url, startingState) {\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    if (startingState) {\n      loader.state = startingState;\n    }\n\n    loader.error = {\n      playlist: loader.master.playlists[url],\n      status: xhr.status,\n      message: 'HLS playlist request error at URL: ' + url,\n      responseText: xhr.responseText,\n      code: xhr.status >= 500 ? 4 : 2\n    };\n\n    loader.trigger('error');\n  };\n\n  // update the playlist loader's state in response to a new or\n  // updated playlist.\n  haveMetadata = function (xhr, url) {\n    var parser = undefined;\n    var refreshDelay = undefined;\n    var update = undefined;\n\n    loader.setBandwidth(request || xhr);\n\n    // any in-flight request is now finished\n    request = null;\n\n    loader.state = 'HAVE_METADATA';\n\n    parser = new _m3u8Parser2['default'].Parser();\n    parser.push(xhr.responseText);\n    parser.end();\n    parser.manifest.uri = url;\n    // m3u8-parser does not attach an attributes property to media playlists so make\n    // sure that the property is attached to avoid undefined reference errors\n    parser.manifest.attributes = parser.manifest.attributes || {};\n\n    // merge this playlist into the master\n    update = updateMaster(loader.master, parser.manifest);\n    refreshDelay = (parser.manifest.targetDuration || 10) * 1000;\n    loader.targetDuration = parser.manifest.targetDuration;\n    if (update) {\n      loader.master = update;\n      loader.media_ = loader.master.playlists[parser.manifest.uri];\n    } else {\n      // if the playlist is unchanged since the last reload,\n      // try again after half the target duration\n      refreshDelay /= 2;\n      loader.trigger('playlistunchanged');\n    }\n\n    // refresh live playlists after a target duration passes\n    if (!loader.media().endList) {\n      _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(function () {\n        loader.trigger('mediaupdatetimeout');\n      }, refreshDelay);\n    }\n\n    loader.trigger('loadedplaylist');\n  };\n\n  // initialize the loader state\n  loader.state = 'HAVE_NOTHING';\n\n  /**\n   * Abort any outstanding work and clean up.\n   */\n  loader.dispose = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    loader.off();\n  };\n\n  loader.stopRequest = function () {\n    if (request) {\n      var oldRequest = request;\n\n      request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  };\n\n  /**\n   * Returns the number of enabled playlists on the master playlist object\n   *\n   * @return {Number} number of eneabled playlists\n   */\n  loader.enabledPlaylists_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length;\n  };\n\n  /**\n   * Returns whether the current playlist is the lowest rendition\n   *\n   * @return {Boolean} true if on lowest rendition\n   */\n  loader.isLowestEnabledRendition_ = function () {\n    if (loader.master.playlists.length === 1) {\n      return true;\n    }\n\n    var media = loader.media();\n\n    var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n    return loader.master.playlists.filter(function (playlist) {\n      var enabled = (0, _playlistJs.isEnabled)(playlist);\n\n      if (!enabled) {\n        return false;\n      }\n\n      return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n    }).length === 0;\n  };\n\n  /**\n   * Returns whether the current playlist is the final available rendition\n   *\n   * @return {Boolean} true if on final rendition\n   */\n  loader.isFinalRendition_ = function () {\n    return loader.master.playlists.filter(_playlistJs.isEnabled).length === 1;\n  };\n\n  /**\n   * When called without any arguments, returns the currently\n   * active media playlist. When called with a single argument,\n   * triggers the playlist loader to asynchronously switch to the\n   * specified media playlist. Calling this method while the\n   * loader is in the HAVE_NOTHING causes an error to be emitted\n   * but otherwise has no effect.\n   *\n   * @param {Object=} playlist the parsed media playlist\n   * object to switch to\n   * @return {Playlist} the current loaded media\n   */\n  loader.media = function (playlist) {\n    var startingState = loader.state;\n    var mediaChange = undefined;\n\n    // getter\n    if (!playlist) {\n      return loader.media_;\n    }\n\n    // setter\n    if (loader.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + loader.state);\n    }\n\n    // find the playlist object if the target playlist has been\n    // specified by URI\n    if (typeof playlist === 'string') {\n      if (!loader.master.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = loader.master.playlists[playlist];\n    }\n\n    mediaChange = !loader.media_ || playlist.uri !== loader.media_.uri;\n\n    // switch to fully loaded playlists immediately\n    if (loader.master.playlists[playlist.uri].endList) {\n      // abort outstanding playlist requests\n      if (request) {\n        request.onreadystatechange = null;\n        request.abort();\n        request = null;\n      }\n      loader.state = 'HAVE_METADATA';\n      loader.media_ = playlist;\n\n      // trigger media change if the active media has been updated\n      if (mediaChange) {\n        loader.trigger('mediachanging');\n        loader.trigger('mediachange');\n      }\n      return;\n    }\n\n    // switching to the active playlist is a no-op\n    if (!mediaChange) {\n      return;\n    }\n\n    loader.state = 'SWITCHING_MEDIA';\n\n    // there is already an outstanding playlist request\n    if (request) {\n      if ((0, _resolveUrl2['default'])(loader.master.uri, playlist.uri) === request.url) {\n        // requesting to switch to the same playlist multiple times\n        // has no effect after the first\n        return;\n      }\n      request.onreadystatechange = null;\n      request.abort();\n      request = null;\n    }\n\n    // request the new playlist\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, playlist.uri, startingState);\n      }\n\n      haveMetadata(req, playlist.uri);\n\n      // fire loadedmetadata the first time a media playlist is loaded\n      if (startingState === 'HAVE_MASTER') {\n        loader.trigger('loadedmetadata');\n      } else {\n        loader.trigger('mediachange');\n      }\n    });\n  };\n\n  /**\n   * set the bandwidth on an xhr to the bandwidth on the playlist\n   */\n  loader.setBandwidth = function (xhr) {\n    loader.bandwidth = xhr.bandwidth;\n  };\n\n  // live playlist staleness timeout\n  loader.on('mediaupdatetimeout', function () {\n    if (loader.state !== 'HAVE_METADATA') {\n      // only refresh the media playlist if no other activity is going on\n      return;\n    }\n\n    loader.state = 'HAVE_CURRENT_METADATA';\n    request = this.hls_.xhr({\n      uri: (0, _resolveUrl2['default'])(loader.master.uri, loader.media().uri),\n      withCredentials: withCredentials\n    }, function (error, req) {\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      if (error) {\n        return playlistRequestError(request, loader.media().uri, 'HAVE_METADATA');\n      }\n      haveMetadata(request, loader.media().uri);\n    });\n  });\n\n  // setup initial sync info\n  loader.on('firstplay', function () {\n    var playlist = loader.media();\n\n    if (playlist) {\n      playlist.syncInfo = {\n        mediaSequence: playlist.mediaSequence,\n        time: 0\n      };\n    }\n  });\n\n  /**\n   * pause loading of the playlist\n   */\n  loader.pause = function () {\n    loader.stopRequest();\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n    if (loader.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      loader.started = false;\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.load = function (isFinalRendition) {\n    var media = loader.media();\n\n    _globalWindow2['default'].clearTimeout(mediaUpdateTimeout);\n\n    if (isFinalRendition) {\n      var refreshDelay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n      mediaUpdateTimeout = _globalWindow2['default'].setTimeout(loader.load.bind(null, false), refreshDelay);\n      return;\n    }\n\n    if (!loader.started) {\n      loader.start();\n      return;\n    }\n\n    if (media && !media.endList) {\n      loader.trigger('mediaupdatetimeout');\n    } else {\n      loader.trigger('loadedplaylist');\n    }\n  };\n\n  /**\n   * start loading of the playlist\n   */\n  loader.start = function () {\n    loader.started = true;\n\n    // request the specified URL\n    request = _this.hls_.xhr({\n      uri: srcUrl,\n      withCredentials: withCredentials\n    }, function (error, req) {\n      var parser = undefined;\n      var playlist = undefined;\n      var i = undefined;\n\n      // disposed\n      if (!request) {\n        return;\n      }\n\n      // clear the loader's request reference\n      request = null;\n\n      if (error) {\n        loader.error = {\n          status: req.status,\n          message: 'HLS playlist request error at URL: ' + srcUrl,\n          responseText: req.responseText,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        };\n        if (loader.state === 'HAVE_NOTHING') {\n          loader.started = false;\n        }\n        return loader.trigger('error');\n      }\n\n      parser = new _m3u8Parser2['default'].Parser();\n      parser.push(req.responseText);\n      parser.end();\n\n      loader.state = 'HAVE_MASTER';\n\n      parser.manifest.uri = srcUrl;\n\n      // loaded a master playlist\n      if (parser.manifest.playlists) {\n        loader.master = parser.manifest;\n\n        // setup by-URI lookups and resolve media playlist URIs\n        i = loader.master.playlists.length;\n        while (i--) {\n          playlist = loader.master.playlists[i];\n          loader.master.playlists[playlist.uri] = playlist;\n          playlist.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, playlist.uri);\n\n          if (!playlist.attributes) {\n            // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n            // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n            // formatted master playlist may not have an attribute list. An attributes\n            // property is added here to prevent undefined references when we encounter\n            // this scenario.\n            playlist.attributes = {};\n\n            _videoJs.log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n          }\n        }\n\n        // resolve any media group URIs\n        ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n          for (var groupKey in loader.master.mediaGroups[mediaType]) {\n            for (var labelKey in loader.master.mediaGroups[mediaType][groupKey]) {\n              var mediaProperties = loader.master.mediaGroups[mediaType][groupKey][labelKey];\n\n              if (mediaProperties.uri) {\n                mediaProperties.resolvedUri = (0, _resolveUrl2['default'])(loader.master.uri, mediaProperties.uri);\n              }\n            }\n          }\n        });\n\n        loader.trigger('loadedplaylist');\n        if (!request) {\n          // no media playlist was specifically selected so start\n          // from the first listed one\n          loader.media(parser.manifest.playlists[0]);\n        }\n        return;\n      }\n\n      // loaded a media playlist\n      // infer a master playlist if none was previously requested\n      loader.master = {\n        mediaGroups: {\n          'AUDIO': {},\n          'VIDEO': {},\n          'CLOSED-CAPTIONS': {},\n          'SUBTITLES': {}\n        },\n        uri: _globalWindow2['default'].location.href,\n        playlists: [{\n          uri: srcUrl\n        }]\n      };\n      loader.master.playlists[srcUrl] = loader.master.playlists[0];\n      loader.master.playlists[0].resolvedUri = srcUrl;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      loader.master.playlists[0].attributes = loader.master.playlists[0].attributes || {};\n      haveMetadata(req, srcUrl);\n      return loader.trigger('loadedmetadata');\n    });\n  };\n};\n\nPlaylistLoader.prototype = new _videoJs.EventTarget();\n\nexports['default'] = PlaylistLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist.js\":10,\"./resolve-url\":14,\"global/window\":31,\"m3u8-parser\":32}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = undefined;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = undefined;\n  var rightBandwidth = undefined;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\nexports.comparePlaylistBandwidth = comparePlaylistBandwidth;\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = undefined;\n  var rightWidth = undefined;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\nexports.comparePlaylistResolution = comparePlaylistResolution;\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = undefined;\n    var height = undefined;\n    var bandwidth = undefined;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return _playlist2['default'].isEnabled(rep.playlist);\n  });\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * _config2['default'].BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = undefined;\n  var resolutionPlusOneSmallest = undefined;\n  var resolutionPlusOneRep = undefined;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  return (resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || sortedPlaylistReps[0]).playlist;\n};\n\nexports.simpleSelector = simpleSelector;\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\nexports.lastBandwidthSelector = lastBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @param {Number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\nvar movingAverageBandwidthSelector = function movingAverageBandwidthSelector(decay) {\n  var average = -1;\n\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n\n  return function () {\n    if (average < 0) {\n      average = this.systemBandwidth;\n    }\n\n    average = decay * this.systemBandwidth + (1 - decay) * average;\n    return simpleSelector(this.playlists.master, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n  };\n};\n\nexports.movingAverageBandwidthSelector = movingAverageBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master;\n  var currentTime = settings.currentTime;\n  var bandwidth = settings.bandwidth;\n  var duration = settings.duration;\n  var segmentDuration = settings.segmentDuration;\n  var timeUntilRebuffer = settings.timeUntilRebuffer;\n  var currentTimeline = settings.currentTimeline;\n  var syncController = settings.syncController;\n\n  var bandwidthPlaylists = master.playlists.filter(function (playlist) {\n    return _playlist2['default'].isEnabled(playlist) && _playlist2['default'].hasAttribute('BANDWIDTH', playlist);\n  });\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\nexports.minRebufferMaxBandwidthSelector = minRebufferMaxBandwidthSelector;\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(_playlist2['default'].isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return (0, _utilCodecsJs.parseCodecs)(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\nexports.lowestBitrateCompatibleVariantSelector = lowestBitrateCompatibleVariantSelector;\n},{\"./config\":3,\"./playlist\":10,\"./util/codecs.js\":18}],10:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar Playlist = {\n  /**\n   * The number of segments that are unsafe to start playback at in\n   * a live stream. Changing this value can cause playback stalls.\n   * See HTTP Live Streaming, \"Playing the Media Playlist File\"\n   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-18#section-6.3.3\n   */\n  UNSAFE_LIVE_SEGMENTS: 3\n};\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = undefined;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = undefined;\n  var forward = undefined;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return _globalWindow2['default'].Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\nexports.duration = duration;\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var i = startIndex; i < endIndex; i++) {\n    durations += playlist.segments[i].duration;\n  }\n\n  return durations;\n};\n\nexports.sumDurations = sumDurations;\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? Math.max(0, playlist.segments.length - Playlist.UNSAFE_LIVE_SEGMENTS) : Math.max(0, playlist.segments.length);\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\nexports.playlistEnd = playlistEnd;\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return (0, _videoJs.createTimeRange)();\n  }\n  return (0, _videoJs.createTimeRange)(seekableStart, seekableEnd);\n};\n\nexports.seekable = seekable;\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = undefined;\n  var segment = undefined;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\nexports.getMediaInfoForTime = getMediaInfoForTime;\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\nexports.isBlacklisted = isBlacklisted;\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\nexports.isEnabled = isEnabled;\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isAes = isAes;\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isFmp4 = isFmp4;\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\nexports.hasAttribute = hasAttribute;\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\nexports.estimateSegmentRequestTime = estimateSegmentRequestTime;\nPlaylist.duration = duration;\nPlaylist.seekable = seekable;\nPlaylist.getMediaInfoForTime = getMediaInfoForTime;\nPlaylist.isEnabled = isEnabled;\nPlaylist.isBlacklisted = isBlacklisted;\nPlaylist.playlistEnd = playlistEnd;\nPlaylist.isAes = isAes;\nPlaylist.isFmp4 = isFmp4;\nPlaylist.hasAttribute = hasAttribute;\nPlaylist.estimateSegmentRequestTime = estimateSegmentRequestTime;\n\n// exports\nexports['default'] = Playlist;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],11:[function(require,module,exports){\n(function (global){\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n\n/**\n * Clamps a value to within a range\n * @param {Number} num - the value to clamp\n * @param {Number} start - the start of the range to clamp within, inclusive\n * @param {Number} end - the end of the range to clamp within, inclusive\n * @return {Number}\n */\nvar clamp = function clamp(num, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var start = _ref2[0];\n  var end = _ref2[1];\n\n  return Math.min(Math.max(start, num), end);\n};\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = undefined;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return _videoJs2['default'].createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Search for a likely end time for the segment that was just appened\n * based on the state of the `buffered` property before and after the\n * append. If we fin only one such uncommon end-point return it.\n * @param {TimeRanges} original - the buffered time ranges before the update\n * @param {TimeRanges} update - the buffered time ranges after the update\n * @returns {Number|null} the end time added between `original` and `update`,\n * or null if one cannot be unambiguously determined.\n */\nvar findSoleUncommonTimeRangesEnd = function findSoleUncommonTimeRangesEnd(original, update) {\n  var i = undefined;\n  var start = undefined;\n  var end = undefined;\n  var result = [];\n  var edges = [];\n\n  // In order to qualify as a possible candidate, the end point must:\n  //  1) Not have already existed in the `original` ranges\n  //  2) Not result from the shrinking of a range that already existed\n  //     in the `original` ranges\n  //  3) Not be contained inside of a range that existed in `original`\n  var overlapsCurrentEnd = function overlapsCurrentEnd(span) {\n    return span[0] <= end && span[1] >= end;\n  };\n\n  if (original) {\n    // Save all the edges in the `original` TimeRanges object\n    for (i = 0; i < original.length; i++) {\n      start = original.start(i);\n      end = original.end(i);\n\n      edges.push([start, end]);\n    }\n  }\n\n  if (update) {\n    // Save any end-points in `update` that are not in the `original`\n    // TimeRanges object\n    for (i = 0; i < update.length; i++) {\n      start = update.start(i);\n      end = update.end(i);\n\n      if (edges.some(overlapsCurrentEnd)) {\n        continue;\n      }\n\n      // at this point it must be a unique non-shrinking end edge\n      result.push(end);\n    }\n  }\n\n  // we err on the side of caution and return null if didn't find\n  // exactly *one* differing end edge in the search above\n  if (result.length !== 1) {\n    return null;\n  }\n\n  return result[0];\n};\n\n/**\n * Calculate the intersection of two TimeRanges\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @returns {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\nvar bufferIntersection = function bufferIntersection(bufferA, bufferB) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return _videoJs2['default'].createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var count = bufferA.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: bufferA.start(count), type: 'start' });\n    extents.push({ time: bufferA.end(count), type: 'end' });\n  }\n  count = bufferB.length;\n  while (count--) {\n    extents.push({ time: bufferB.start(count), type: 'start' });\n    extents.push({ time: bufferB.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Calculates the percentage of `segmentRange` that overlaps the\n * `buffered` time ranges.\n * @param {TimeRanges} segmentRange - the time range that the segment\n * covers adjusted according to currentTime\n * @param {TimeRanges} referenceRange - the original time range that the\n * segment covers\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the currently buffered time ranges\n * @returns {Number} percent of the segment currently buffered\n */\nvar calculateBufferedPercent = function calculateBufferedPercent(adjustedRange, referenceRange, currentTime, buffered) {\n  var referenceDuration = referenceRange.end(0) - referenceRange.start(0);\n  var adjustedDuration = adjustedRange.end(0) - adjustedRange.start(0);\n  var bufferMissingFromAdjusted = referenceDuration - adjustedDuration;\n  var adjustedIntersection = bufferIntersection(adjustedRange, buffered);\n  var referenceIntersection = bufferIntersection(referenceRange, buffered);\n  var adjustedOverlap = 0;\n  var referenceOverlap = 0;\n\n  var count = adjustedIntersection.length;\n\n  while (count--) {\n    adjustedOverlap += adjustedIntersection.end(count) - adjustedIntersection.start(count);\n\n    // If the current overlap segment starts at currentTime, then increase the\n    // overlap duration so that it actually starts at the beginning of referenceRange\n    // by including the difference between the two Range's durations\n    // This is a work around for the way Flash has no buffer before currentTime\n    if (adjustedIntersection.start(count) === currentTime) {\n      adjustedOverlap += bufferMissingFromAdjusted;\n    }\n  }\n\n  count = referenceIntersection.length;\n\n  while (count--) {\n    referenceOverlap += referenceIntersection.end(count) - referenceIntersection.start(count);\n  }\n\n  // Use whichever value is larger for the percentage-buffered since that value\n  // is likely more accurate because the only way\n  return Math.max(adjustedOverlap, referenceOverlap) / referenceDuration * 100;\n};\n\n/**\n * Return the amount of a range specified by the startOfSegment and segmentDuration\n * overlaps the current buffered content.\n *\n * @param {Number} startOfSegment - the time where the segment begins\n * @param {Number} segmentDuration - the duration of the segment in seconds\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the state of the buffer\n * @returns {Number} percentage of the segment's time range that is\n * already in `buffered`\n */\nvar getSegmentBufferedPercent = function getSegmentBufferedPercent(startOfSegment, segmentDuration, currentTime, buffered) {\n  var endOfSegment = startOfSegment + segmentDuration;\n\n  // The entire time range of the segment\n  var originalSegmentRange = _videoJs2['default'].createTimeRanges([[startOfSegment, endOfSegment]]);\n\n  // The adjusted segment time range that is setup such that it starts\n  // no earlier than currentTime\n  // Flash has no notion of a back-buffer so adjustedSegmentRange adjusts\n  // for that and the function will still return 100% if a only half of a\n  // segment is actually in the buffer as long as the currentTime is also\n  // half-way through the segment\n  var adjustedSegmentRange = _videoJs2['default'].createTimeRanges([[clamp(startOfSegment, [currentTime, endOfSegment]), endOfSegment]]);\n\n  // This condition happens when the currentTime is beyond the segment's\n  // end time\n  if (adjustedSegmentRange.start(0) === adjustedSegmentRange.end(0)) {\n    return 0;\n  }\n\n  var percent = calculateBufferedPercent(adjustedSegmentRange, originalSegmentRange, currentTime, buffered);\n\n  // If the segment is reported as having a zero duration, return 0%\n  // since it is likely that we will need to fetch the segment\n  if (isNaN(percent) || percent === Infinity || percent === -Infinity) {\n    return 0;\n  }\n\n  return percent;\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\nexports['default'] = {\n  findRange: findRange,\n  findNextRange: findNextRange,\n  findGaps: findGaps,\n  findSoleUncommonTimeRangesEnd: findSoleUncommonTimeRangesEnd,\n  getSegmentBufferedPercent: getSegmentBufferedPercent,\n  TIME_FUDGE_FACTOR: TIME_FUDGE_FACTOR,\n  printableRange: printableRange,\n  timeUntilRebuffer: timeUntilRebuffer\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],12:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = _videoJs2['default'].mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      _videoJs2['default'].log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nexports['default'] = reloadSourceOnError;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _playlistJs = require('./playlist.js');\n\n/**\n * Enable/disable playlist function. It is intended to have the first two\n * arguments partially-applied in order to create the final per-playlist\n * function.\n *\n * @param {PlaylistLoader} playlist - The rendition or media-playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Boolean} The current enabled-state of the playlist\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn, enable) {\n  var playlist = loader.master.playlists[playlistUri];\n  var blacklisted = (0, _playlistJs.isBlacklisted)(playlist);\n  var currentlyEnabled = (0, _playlistJs.isEnabled)(playlist);\n\n  if (typeof enable === 'undefined') {\n    return currentlyEnabled;\n  }\n\n  if (enable) {\n    delete playlist.disabled;\n  } else {\n    playlist.disabled = true;\n  }\n\n  if (enable !== currentlyEnabled && !blacklisted) {\n    // Ensure the outside world knows about our changes\n    changePlaylistFn();\n    if (enable) {\n      loader.trigger('renditionenabled');\n    } else {\n      loader.trigger('renditiondisabled');\n    }\n  }\n  return enable;\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  _classCallCheck(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction.bind(this, hlsHandler.playlists, playlist.uri, fastChangeFunction);\n}\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n;\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !(0, _playlistJs.isBlacklisted)(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\nexports['default'] = renditionSelectionMixin;\nmodule.exports = exports['default'];\n},{\"./playlist.js\":10}],14:[function(require,module,exports){\n/**\n * @file resolve-url.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _urlToolkit = require('url-toolkit');\n\nvar _urlToolkit2 = _interopRequireDefault(_urlToolkit);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = _urlToolkit2['default'].buildAbsoluteURL(_globalWindow2['default'].location.href, baseURL);\n  }\n\n  return _urlToolkit2['default'].buildAbsoluteURL(baseURL, relativeURL);\n};\n\nexports['default'] = resolveUrl;\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"url-toolkit\":62}],15:[function(require,module,exports){\n(function (global){\n/**\n * @file segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _sourceUpdater = require('./source-updater');\n\nvar _sourceUpdater2 = _interopRequireDefault(_sourceUpdater);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar _mediaSegmentRequest = require('./media-segment-request');\n\nvar _ranges = require('./ranges');\n\nvar _playlistSelectors = require('./playlist-selectors');\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = (function (_videojs$EventTarget) {\n  _inherits(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    var _this = this;\n\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, SegmentLoader);\n\n    _get(Object.getPrototypeOf(SegmentLoader.prototype), 'constructor', this).call(this);\n    // check pre-conditions\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    this.state = 'INIT';\n    this.bandwidth = settings.bandwidth;\n    this.throughput = { rate: 0, count: 0 };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n\n    // private settings\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.hls_ = settings.hls;\n    this.loaderType_ = settings.loaderType;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n\n    // private instance variables\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.pendingSegment_ = null;\n    this.mimeType_ = null;\n    this.sourceUpdater_ = null;\n    this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {};\n\n    this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    this.fetchAtBuffer_ = false;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'segment-loader', this.loaderType_, '->');\n    }\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  _createClass(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new _sourceUpdater2['default'](this.mediaSource_, this.mimeType_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('mediaSequenceDiff', mediaSequenceDiff);\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     */\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     */\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything() {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_());\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end);\n      }\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = undefined;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      this.logger_('checkBuffer_', 'mediaIndex:', mediaIndex, 'hasPlayed:', hasPlayed, 'currentTime:', currentTime, 'syncPoint:', syncPoint, 'fetchAtBuffer:', this.fetchAtBuffer_, 'bufferedTime:', bufferedTime);\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        this.logger_('getSync', 'mediaIndex:', mediaIndex);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        this.logger_('walkForward', 'mediaIndex:', mediaIndex + 1);\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      }\n      this.logger_('getMediaIndexForTime', 'mediaIndex:', mediaIndex, 'startOfSegment:', startOfSegment);\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer = (0, _ranges.timeUntilRebuffer)(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer) {\n        return false;\n      }\n\n      var switchCandidate = (0, _playlistSelectors.minRebufferMaxBandwidthSelector)({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer <= _ranges.TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * _config2['default'].BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = (0, _mediaSegmentRequest.mediaSegmentRequest)(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var seekable = this.seekable_();\n      var currentTime = this.currentTime_();\n      var removeToTime = 0;\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      // If we have a seekable range use that as the limit for what can be removed safely\n      // otherwise remove anything older than 30 seconds before the current play head\n      if (seekable.length && seekable.start(0) > 0 && seekable.start(0) < currentTime) {\n        removeToTime = seekable.start(0);\n      } else {\n        removeToTime = currentTime - 30;\n      }\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      this.syncController_.probeSegmentInfo(segmentInfo);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        (function () {\n          var initId = (0, _binUtils.initSegmentId)(segment.map);\n\n          if (!_this3.activeInitSegmentId_ || _this3.activeInitSegmentId_ !== initId) {\n            var initSegment = _this3.initSegment(segment.map);\n\n            _this3.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n              _this3.activeInitSegmentId_ = initId;\n            });\n          }\n        })();\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      this.logger_('handleUpdateEnd_', 'segmentInfo:', this.pendingSegment_);\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n\n      var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n      var value = {\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n\n  return SegmentLoader;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./media-segment-request\":6,\"./playlist\":10,\"./playlist-selectors\":9,\"./ranges\":11,\"./source-updater\":16,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],16:[function(require,module,exports){\n(function (global){\n/**\n * @file source-updater.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar noop = function noop() {};\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n */\n\nvar SourceUpdater = (function () {\n  function SourceUpdater(mediaSource, mimeType) {\n    var _this = this;\n\n    _classCallCheck(this, SourceUpdater);\n\n    var createSourceBuffer = function createSourceBuffer() {\n      _this.sourceBuffer_ = mediaSource.addSourceBuffer(mimeType);\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      _this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this.pendingCallback_;\n\n        _this.pendingCallback_ = null;\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this.runCallback_();\n      };\n\n      _this.sourceBuffer_.addEventListener('updateend', _this.onUpdateendCallback_);\n\n      _this.runCallback_();\n    };\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', createSourceBuffer);\n    } else {\n      createSourceBuffer();\n    }\n  }\n\n  /**\n   * Aborts the current segment and resets the segment parser.\n   *\n   * @param {Function} done function to call when done\n   * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n   */\n\n  _createClass(SourceUpdater, [{\n    key: 'abort',\n    value: function abort(done) {\n      var _this2 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this2.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this3 = this;\n\n      this.processedAppend_ = true;\n\n      this.queueCallback_(function () {\n        _this3.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this4 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this4.sourceBuffer_.remove(start, end);\n        }, noop);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this5 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this5.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = undefined;\n\n      if (!this.updating() && this.callbacks_.length) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n\n  return SourceUpdater;\n})();\n\nexports['default'] = SourceUpdater;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],17:[function(require,module,exports){\n(function (global){\n/**\n * @file sync-controller.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _muxJsLibMp4Probe = require('mux.js/lib/mp4/probe');\n\nvar _muxJsLibMp4Probe2 = _interopRequireDefault(_muxJsLibMp4Probe);\n\nvar _muxJsLibToolsTsInspectorJs = require('mux.js/lib/tools/ts-inspector.js');\n\nvar _playlist = require('./playlist');\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (duration !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (syncController.datetimeToDisplayTime && playlist.dateTimeObject) {\n      var playlistTime = playlist.dateTimeObject.getTime() / 1000;\n      var playlistStart = playlistTime + syncController.datetimeToDisplayTime;\n      var syncPoint = {\n        time: playlistStart,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nexports.syncPointStrategies = syncPointStrategies;\n\nvar SyncController = (function (_videojs$EventTarget) {\n  _inherits(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, SyncController);\n\n    _get(Object.getPrototypeOf(SyncController.prototype), 'constructor', this).call(this);\n    // Segment Loader state variables...\n    // ...for synching across variants\n    this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    this.timelines = [];\n    this.discontinuities = [];\n    this.datetimeToDisplayTime = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'sync-controller ->');\n    }\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  _createClass(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + (0, _playlist.sumDurations)(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n          this.logger_('syncPoint found via <' + strategy.name + '>:', syncPoint);\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint with strategy <' + bestStrategy + '> chosen: ', bestSyncPoint);\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist sync:', newPlaylist.syncInfo);\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.dateTimeObject) {\n        var playlistTimestamp = playlist.dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timingInfo = undefined;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n        }\n      }\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = _muxJsLibMp4Probe2['default'].timescale(segment.map.bytes);\n      var startTime = _muxJsLibMp4Probe2['default'].startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = (0, _muxJsLibToolsTsInspectorJs.inspect)(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = undefined;\n      var segmentEndTime = undefined;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        this.logger_('tsO:', segmentInfo.timestampOffset);\n\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = undefined;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return SyncController;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SyncController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist\":10,\"mux.js/lib/mp4/probe\":56,\"mux.js/lib/tools/ts-inspector.js\":58}],18:[function(require,module,exports){\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = undefined;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc1)([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\nexports.parseCodecs = parseCodecs;\n},{}],19:[function(require,module,exports){\n(function (global){\n/**\n * @file vtt-segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\nvar uintToString = function uintToString(uintArray) {\n  return String.fromCharCode.apply(null, uintArray);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = (function (_SegmentLoader) {\n  _inherits(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, VTTSegmentLoader);\n\n    _get(Object.getPrototypeOf(VTTSegmentLoader.prototype), 'constructor', this).call(this, settings, options);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    this.mediaSource_ = null;\n\n    this.subtitlesTrack_ = null;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  _createClass(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return _videoJs2['default'].createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack} track\n     *        The text track to add loaded subtitles to\n     */\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this.state = 'READY';\n          if (!_this.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this2 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof _globalWindow2['default'].WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n        var _ret = (function () {\n\n          var loadHandler = function loadHandler() {\n            _this2.handleSegment_();\n          };\n\n          _this2.state = 'WAITING_ON_VTTJS';\n          _this2.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n          _this2.subtitlesTrack_.tech_.one('vttjserror', function () {\n            _this2.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n            _this2.error({\n              message: 'Error loading vtt.js'\n            });\n            _this2.state = 'READY';\n            _this2.pause();\n            _this2.trigger('error');\n          });\n\n          return {\n            v: undefined\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this2.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = undefined;\n      var decodeBytesToString = false;\n\n      if (typeof _globalWindow2['default'].TextDecoder === 'function') {\n        decoder = new _globalWindow2['default'].TextDecoder('utf8');\n      } else {\n        decoder = _globalWindow2['default'].WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        _videoJs2['default'].log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uintToString(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uintToString(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n\n  return VTTSegmentLoader;\n})(_segmentLoader2['default']);\n\nexports['default'] = VTTSegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./segment-loader\":15,\"global/window\":31,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],20:[function(require,module,exports){\n(function (global){\n/**\n * @file xhr.js\n */\n\n/**\n * A wrapper for videojs.xhr that tracks bandwidth.\n *\n * @param {Object} options options for the XHR\n * @param {Function} callback the callback to call when done\n * @return {Request} the xhr request that is going to be made\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar xhrFactory = function xhrFactory() {\n  var xhr = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = (0, _videoJs.mergeOptions)({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || _videoJs2['default'].Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = (0, _videoJs.xhr)(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr;\n};\n\nexports['default'] = xhrFactory;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],21:[function(require,module,exports){\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = undefined;\n  var x = undefined;\n  var xInv = undefined;\n  var d = [];\n  var th = [];\n  var x2 = undefined;\n  var x4 = undefined;\n  var x8 = undefined;\n  var s = undefined;\n  var tEnc = undefined;\n  var tDec = undefined;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = (function () {\n  function AES(key) {\n    _classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = undefined;\n    var j = undefined;\n    var tmp = undefined;\n    var encKey = undefined;\n    var decKey = undefined;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n  _createClass(AES, [{\n    key: 'decrypt',\n    value: function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      var key = this._key[1];\n      // state variables a,b,c,d are loaded with pre-whitened data\n      var a = encrypted0 ^ key[0];\n      var b = encrypted3 ^ key[1];\n      var c = encrypted2 ^ key[2];\n      var d = encrypted1 ^ key[3];\n      var a2 = undefined;\n      var b2 = undefined;\n      var c2 = undefined;\n\n      // key.length === 2 ?\n      var nInnerRounds = key.length / 4 - 2;\n      var i = undefined;\n      var kIndex = 4;\n      var table = this._tables[1];\n\n      // load up the tables\n      var table0 = table[0];\n      var table1 = table[1];\n      var table2 = table[2];\n      var table3 = table[3];\n      var sbox = table[4];\n\n      // Inner rounds. Cribbed from OpenSSL.\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;b = b2;c = c2;\n      }\n\n      // Last round.\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;a = b;b = c;c = d;d = a2;\n      }\n    }\n  }]);\n\n  return AES;\n})();\n\nexports['default'] = AES;\nmodule.exports = exports['default'];\n},{}],22:[function(require,module,exports){\n/**\n * @file async-stream.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = (function (_Stream) {\n  _inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    _classCallCheck(this, AsyncStream);\n\n    _get(Object.getPrototypeOf(AsyncStream.prototype), 'constructor', this).call(this, _stream2['default']);\n    this.jobs = [];\n    this.delay = 1;\n    this.timeout_ = null;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n  _createClass(AsyncStream, [{\n    key: 'processJob_',\n    value: function processJob_() {\n      this.jobs.shift()();\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n  }, {\n    key: 'push',\n    value: function push(job) {\n      this.jobs.push(job);\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n  }]);\n\n  return AsyncStream;\n})(_stream2['default']);\n\nexports['default'] = AsyncStream;\nmodule.exports = exports['default'];\n},{\"./stream\":25}],23:[function(require,module,exports){\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _aes = require('./aes');\n\nvar _aes2 = _interopRequireDefault(_aes);\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nvar _pkcs7 = require('pkcs7');\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new _aes2['default'](Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = undefined;\n  var init1 = undefined;\n  var init2 = undefined;\n  var init3 = undefined;\n  var encrypted0 = undefined;\n  var encrypted1 = undefined;\n  var encrypted2 = undefined;\n  var encrypted3 = undefined;\n\n  // iteration variable\n  var wordIx = undefined;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\nexports.decrypt = decrypt;\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = (function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    _classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new _asyncStream2['default']();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, (0, _pkcs7.unpad)(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n  _createClass(Decrypter, [{\n    key: 'decryptChunk_',\n\n    /**\n     * @private\n     */\n    value: function decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        var bytes = decrypt(encrypted, key, initVector);\n\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }], [{\n    key: 'STEP',\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n})();\n\nexports.Decrypter = Decrypter;\nexports['default'] = {\n  Decrypter: Decrypter,\n  decrypt: decrypt\n};\n},{\"./aes\":21,\"./async-stream\":22,\"pkcs7\":27}],24:[function(require,module,exports){\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _decrypter = require('./decrypter');\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nexports['default'] = {\n  decrypt: _decrypter.decrypt,\n  Decrypter: _decrypter.Decrypter,\n  AsyncStream: _asyncStream2['default']\n};\nmodule.exports = exports['default'];\n},{\"./async-stream\":22,\"./decrypter\":23}],25:[function(require,module,exports){\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Stream = (function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      var index = undefined;\n\n      if (!this.listeners[type]) {\n        return false;\n      }\n      index = this.listeners[type].indexOf(listener);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = undefined;\n      var i = undefined;\n      var length = undefined;\n      var args = undefined;\n\n      callbacks = this.listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n})();\n\nexports['default'] = Stream;\nmodule.exports = exports['default'];\n},{}],26:[function(require,module,exports){\n/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nvar PADDING;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function pad(plaintext) {\n  var padding = PADDING[(plaintext.byteLength % 16) || 0],\n      result = new Uint8Array(plaintext.byteLength + padding.length);\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n  return result;\n};\n\n// pre-define the padding values\nPADDING = [\n  [16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16],\n\n  [15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15],\n\n  [14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14],\n\n  [13, 13, 13, 13,\n   13, 13, 13, 13,\n   13, 13, 13, 13,\n   13],\n\n  [12, 12, 12, 12,\n   12, 12, 12, 12,\n   12, 12, 12, 12],\n\n  [11, 11, 11, 11,\n   11, 11, 11, 11,\n   11, 11, 11],\n\n  [10, 10, 10, 10,\n   10, 10, 10, 10,\n   10, 10],\n\n  [9, 9, 9, 9,\n   9, 9, 9, 9,\n   9],\n\n  [8, 8, 8, 8,\n   8, 8, 8, 8],\n\n  [7, 7, 7, 7,\n   7, 7, 7],\n\n  [6, 6, 6, 6,\n   6, 6],\n\n  [5, 5, 5, 5,\n   5],\n\n  [4, 4, 4, 4],\n\n  [3, 3, 3],\n\n  [2, 2],\n\n  [1]\n];\n\n},{}],27:[function(require,module,exports){\n/*\n * pkcs7\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nexports.pad = require('./pad.js');\nexports.unpad = require('./unpad.js');\n\n},{\"./pad.js\":26,\"./unpad.js\":28}],28:[function(require,module,exports){\n/*\n * pkcs7.unpad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n};\n\n},{}],29:[function(require,module,exports){\n\n},{}],30:[function(require,module,exports){\n(function (global){\nvar topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"min-document\":29}],31:[function(require,module,exports){\n(function (global){\nvar win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],32:[function(require,module,exports){\n'use strict';\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nmodule.exports = {\n  LineStream: _lineStream2['default'],\n  ParseStream: _parseStream2['default'],\n  Parser: _parser2['default']\n}; /**\n    * @file m3u8/index.js\n    *\n    * Utilities for parsing M3U8 files. If the entire manifest is available,\n    * `Parser` will create an object representation with enough detail for managing\n    * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n    * that do not assume the entirety of the manifest is ready and expose a\n    * ReadableStream-like interface.\n    */\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./parser\":35}],33:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/line-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\nvar LineStream = function (_Stream) {\n  _inherits(LineStream, _Stream);\n\n  function LineStream() {\n    _classCallCheck(this, LineStream);\n\n    var _this = _possibleConstructorReturn(this, (LineStream.__proto__ || Object.getPrototypeOf(LineStream)).call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  _createClass(LineStream, [{\n    key: 'push',\n    value: function push(data) {\n      var nextNewline = void 0;\n\n      this.buffer += data;\n      nextNewline = this.buffer.indexOf('\\n');\n\n      for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n        this.trigger('data', this.buffer.substring(0, nextNewline));\n        this.buffer = this.buffer.substring(nextNewline + 1);\n      }\n    }\n  }]);\n\n  return LineStream;\n}(_stream2['default']);\n\nexports['default'] = LineStream;\n},{\"./stream\":36}],34:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parse-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  _inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    _classCallCheck(this, ParseStream);\n\n    return _possibleConstructorReturn(this, (ParseStream.__proto__ || Object.getPrototypeOf(ParseStream)).call(this));\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  _createClass(ParseStream, [{\n    key: 'push',\n    value: function push(line) {\n      var match = void 0;\n      var event = void 0;\n\n      // strip whitespace\n      line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n      if (line.length === 0) {\n        // ignore empty lines\n        return;\n      }\n\n      // URIs\n      if (line[0] !== '#') {\n        this.trigger('data', {\n          type: 'uri',\n          uri: line\n        });\n        return;\n      }\n\n      // Comments\n      if (line.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: line.slice(1)\n        });\n        return;\n      }\n\n      // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n      line = line.replace('\\r', '');\n\n      // Tags\n      match = /^#EXTM3U/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n        if (match[2]) {\n          event.title = match[2];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'totalduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'byterange'\n        };\n        if (match[1]) {\n          event.length = parseInt(match[1], 10);\n        }\n        if (match[2]) {\n          event.offset = parseInt(match[2], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n          if (attributes.BYTERANGE) {\n            var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n                _attributes$BYTERANGE2 = _slicedToArray(_attributes$BYTERANGE, 2),\n                length = _attributes$BYTERANGE2[0],\n                offset = _attributes$BYTERANGE2[1];\n\n            event.byterange = {};\n            if (length) {\n              event.byterange.length = parseInt(length, 10);\n            }\n            if (offset) {\n              event.byterange.offset = parseInt(offset, 10);\n            }\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n            event.attributes.RESOLUTION = resolution;\n          }\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ENDLIST/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          // parse the IV string into a Uint32Array\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n\n      // unknown tag type\n      this.trigger('data', {\n        type: 'tag',\n        data: line.slice(4)\n      });\n    }\n  }]);\n\n  return ParseStream;\n}(_stream2['default']);\n\nexports['default'] = ParseStream;\n},{\"./stream\":36}],35:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parser.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\nvar Parser = function (_Stream) {\n  _inherits(Parser, _Stream);\n\n  function Parser() {\n    _classCallCheck(this, Parser);\n\n    var _this = _possibleConstructorReturn(this, (Parser.__proto__ || Object.getPrototypeOf(Parser)).call(this));\n\n    _this.lineStream = new _lineStream2['default']();\n    _this.parseStream = new _parseStream2['default']();\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              this.manifest.dateTimeString = entry.dateTimeString;\n              this.manifest.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  _createClass(Parser, [{\n    key: 'push',\n    value: function push(chunk) {\n      this.lineStream.push(chunk);\n    }\n\n    /**\n     * Flush any remaining input. This can be handy if the last line of an M3U8\n     * manifest did not contain a trailing newline but the file has been\n     * completely received.\n     */\n\n  }, {\n    key: 'end',\n    value: function end() {\n      // flush any buffered input\n      this.lineStream.push('\\n');\n    }\n  }]);\n\n  return Parser;\n}(_stream2['default']);\n\nexports['default'] = Parser;\n},{\"./line-stream\":33,\"./parse-stream\":34,\"./stream\":36}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n\n      var index = this.listeners[type].indexOf(listener);\n\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = this.listeners[type];\n      var i = void 0;\n      var length = void 0;\n      var args = void 0;\n\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n}();\n\nexports['default'] = Stream;\n},{}],37:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n\n},{\"../utils/stream.js\":61}],38:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n\n},{}],39:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n\n},{\"../utils/stream.js\":61}],40:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n\n},{\"../utils/exp-golomb.js\":60,\"../utils/stream.js\":61}],41:[function(require,module,exports){\nvar highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n\n},{}],42:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\n/**\n * The final stage of the transmuxer that emits the flv tags\n * for audio, video, and metadata. Also tranlates in time and\n * outputs caption data and id3 cues.\n */\nvar CoalesceStream = function(options) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = options.metadataStream;\n\n  this.videoTags = [];\n  this.audioTags = [];\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n      this.videoTags = output.tags;\n      this.pendingTracks++;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n      this.audioTags = output.tags;\n      this.pendingTracks++;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    id3,\n    caption,\n    i,\n    timelineStartPts,\n    event = {\n      tags: {},\n      captions: [],\n      captionStreams: {},\n      metadata: []\n    };\n\n  if (this.pendingTracks < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.pendingTracks === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.processedTracks++;\n\n      if (this.processedTracks < this.numberOfTracks) {\n        return;\n      }\n    }\n  }\n\n  this.processedTracks += this.pendingTracks;\n  this.pendingTracks = 0;\n\n  if (this.processedTracks < this.numberOfTracks) {\n    return;\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n  }\n\n  event.tags.videoTags = this.videoTags;\n  event.tags.audioTags = this.audioTags;\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = caption.startPts - timelineStartPts;\n    caption.startTime /= 90e3;\n    caption.endTime = caption.endPts - timelineStartPts;\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = id3.pts - timelineStartPts;\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.videoTags = [];\n  this.audioTags = [];\n  this.pendingCaptions.length = 0;\n  this.pendingMetadata.length = 0;\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  // Emit the final segment\n  this.trigger('data', event);\n\n  this.trigger('done');\n};\n\nmodule.exports = CoalesceStream;\n\n},{\"../utils/stream.js\":61}],43:[function(require,module,exports){\n'use strict';\n\nvar FlvTag = require('./flv-tag.js');\n\n// For information on the FLV format, see\n// http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf.\n// Technically, this function returns the header and a metadata FLV tag\n// if duration is greater than zero\n// duration in seconds\n// @return {object} the bytes of the FLV header as a Uint8Array\nvar getFlvHeader = function(duration, audio, video) { // :ByteArray {\n  var\n    headBytes = new Uint8Array(3 + 1 + 1 + 4),\n    head = new DataView(headBytes.buffer),\n    metadata,\n    result,\n    metadataLength;\n\n  // default arguments\n  duration = duration || 0;\n  audio = audio === undefined ? true : audio;\n  video = video === undefined ? true : video;\n\n  // signature\n  head.setUint8(0, 0x46); // 'F'\n  head.setUint8(1, 0x4c); // 'L'\n  head.setUint8(2, 0x56); // 'V'\n\n  // version\n  head.setUint8(3, 0x01);\n\n  // flags\n  head.setUint8(4, (audio ? 0x04 : 0x00) | (video ? 0x01 : 0x00));\n\n  // data offset, should be 9 for FLV v1\n  head.setUint32(5, headBytes.byteLength);\n\n  // init the first FLV tag\n  if (duration <= 0) {\n    // no duration available so just write the first field of the first\n    // FLV tag\n    result = new Uint8Array(headBytes.byteLength + 4);\n    result.set(headBytes);\n    result.set([0, 0, 0, 0], headBytes.byteLength);\n    return result;\n  }\n\n  // write out the duration metadata tag\n  metadata = new FlvTag(FlvTag.METADATA_TAG);\n  metadata.pts = metadata.dts = 0;\n  metadata.writeMetaDataDouble('duration', duration);\n  metadataLength = metadata.finalize().length;\n  result = new Uint8Array(headBytes.byteLength + metadataLength);\n  result.set(headBytes);\n  result.set(head.byteLength, metadataLength);\n\n  return result;\n};\n\nmodule.exports = getFlvHeader;\n\n},{\"./flv-tag.js\":44}],44:[function(require,module,exports){\n/**\n * An object that stores the bytes of an FLV tag and methods for\n * querying and manipulating that data.\n * @see http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf\n */\n'use strict';\n\nvar FlvTag;\n\n// (type:uint, extraData:Boolean = false) extends ByteArray\nFlvTag = function(type, extraData) {\n  var\n    // Counter if this is a metadata tag, nal start marker if this is a video\n    // tag. unused if this is an audio tag\n    adHoc = 0, // :uint\n\n    // The default size is 16kb but this is not enough to hold iframe\n    // data and the resizing algorithm costs a bit so we create a larger\n    // starting buffer for video tags\n    bufferStartSize = 16384,\n\n    // checks whether the FLV tag has enough capacity to accept the proposed\n    // write and re-allocates the internal buffers if necessary\n    prepareWrite = function(flv, count) {\n      var\n        bytes,\n        minLength = flv.position + count;\n      if (minLength < flv.bytes.byteLength) {\n        // there's enough capacity so do nothing\n        return;\n      }\n\n      // allocate a new buffer and copy over the data that will not be modified\n      bytes = new Uint8Array(minLength * 2);\n      bytes.set(flv.bytes.subarray(0, flv.position), 0);\n      flv.bytes = bytes;\n      flv.view = new DataView(flv.bytes.buffer);\n    },\n\n    // commonly used metadata properties\n    widthBytes = FlvTag.widthBytes || new Uint8Array('width'.length),\n    heightBytes = FlvTag.heightBytes || new Uint8Array('height'.length),\n    videocodecidBytes = FlvTag.videocodecidBytes || new Uint8Array('videocodecid'.length),\n    i;\n\n  if (!FlvTag.widthBytes) {\n    // calculating the bytes of common metadata names ahead of time makes the\n    // corresponding writes faster because we don't have to loop over the\n    // characters\n    // re-test with test/perf.html if you're planning on changing this\n    for (i = 0; i < 'width'.length; i++) {\n      widthBytes[i] = 'width'.charCodeAt(i);\n    }\n    for (i = 0; i < 'height'.length; i++) {\n      heightBytes[i] = 'height'.charCodeAt(i);\n    }\n    for (i = 0; i < 'videocodecid'.length; i++) {\n      videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);\n    }\n\n    FlvTag.widthBytes = widthBytes;\n    FlvTag.heightBytes = heightBytes;\n    FlvTag.videocodecidBytes = videocodecidBytes;\n  }\n\n  this.keyFrame = false; // :Boolean\n\n  switch (type) {\n  case FlvTag.VIDEO_TAG:\n    this.length = 16;\n    // Start the buffer at 256k\n    bufferStartSize *= 6;\n    break;\n  case FlvTag.AUDIO_TAG:\n    this.length = 13;\n    this.keyFrame = true;\n    break;\n  case FlvTag.METADATA_TAG:\n    this.length = 29;\n    this.keyFrame = true;\n    break;\n  default:\n    throw new Error('Unknown FLV tag type');\n  }\n\n  this.bytes = new Uint8Array(bufferStartSize);\n  this.view = new DataView(this.bytes.buffer);\n  this.bytes[0] = type;\n  this.position = this.length;\n  this.keyFrame = extraData; // Defaults to false\n\n  // presentation timestamp\n  this.pts = 0;\n  // decoder timestamp\n  this.dts = 0;\n\n  // ByteArray#writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0)\n  this.writeBytes = function(bytes, offset, length) {\n    var\n      start = offset || 0,\n      end;\n    length = length || bytes.byteLength;\n    end = start + length;\n\n    prepareWrite(this, length);\n    this.bytes.set(bytes.subarray(start, end), this.position);\n\n    this.position += length;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeByte(value:int):void\n  this.writeByte = function(byte) {\n    prepareWrite(this, 1);\n    this.bytes[this.position] = byte;\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeShort(value:int):void\n  this.writeShort = function(short) {\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, short);\n    this.position += 2;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // Negative index into array\n  // (pos:uint):int\n  this.negIndex = function(pos) {\n    return this.bytes[this.length - pos];\n  };\n\n  // The functions below ONLY work when this[0] == VIDEO_TAG.\n  // We are not going to check for that because we dont want the overhead\n  // (nal:ByteArray = null):int\n  this.nalUnitSize = function() {\n    if (adHoc === 0) {\n      return 0;\n    }\n\n    return this.length - (adHoc + 4);\n  };\n\n  this.startNalUnit = function() {\n    // remember position and add 4 bytes\n    if (adHoc > 0) {\n      throw new Error('Attempted to create new NAL wihout closing the old one');\n    }\n\n    // reserve 4 bytes for nal unit size\n    adHoc = this.length;\n    this.length += 4;\n    this.position = this.length;\n  };\n\n  // (nal:ByteArray = null):void\n  this.endNalUnit = function(nalContainer) {\n    var\n      nalStart, // :uint\n      nalLength; // :uint\n\n    // Rewind to the marker and write the size\n    if (this.length === adHoc + 4) {\n      // we started a nal unit, but didnt write one, so roll back the 4 byte size value\n      this.length -= 4;\n    } else if (adHoc > 0) {\n      nalStart = adHoc + 4;\n      nalLength = this.length - nalStart;\n\n      this.position = adHoc;\n      this.view.setUint32(this.position, nalLength);\n      this.position = this.length;\n\n      if (nalContainer) {\n        // Add the tag to the NAL unit\n        nalContainer.push(this.bytes.subarray(nalStart, nalStart + nalLength));\n      }\n    }\n\n    adHoc = 0;\n  };\n\n  /**\n   * Write out a 64-bit floating point valued metadata property. This method is\n   * called frequently during a typical parse and needs to be fast.\n   */\n  // (key:String, val:Number):void\n  this.writeMetaDataDouble = function(key, val) {\n    var i;\n    prepareWrite(this, 2 + key.length + 9);\n\n    // write size of property name\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n\n    // this next part looks terrible but it improves parser throughput by\n    // 10kB/s in my testing\n\n    // write property name\n    if (key === 'width') {\n      this.bytes.set(widthBytes, this.position);\n      this.position += 5;\n    } else if (key === 'height') {\n      this.bytes.set(heightBytes, this.position);\n      this.position += 6;\n    } else if (key === 'videocodecid') {\n      this.bytes.set(videocodecidBytes, this.position);\n      this.position += 12;\n    } else {\n      for (i = 0; i < key.length; i++) {\n        this.bytes[this.position] = key.charCodeAt(i);\n        this.position++;\n      }\n    }\n\n    // skip null byte\n    this.position++;\n\n    // write property value\n    this.view.setFloat64(this.position, val);\n    this.position += 8;\n\n    // update flv tag length\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // (key:String, val:Boolean):void\n  this.writeMetaDataBoolean = function(key, val) {\n    var i;\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n    for (i = 0; i < key.length; i++) {\n      // if key.charCodeAt(i) >= 255, handle error\n      prepareWrite(this, 1);\n      this.bytes[this.position] = key.charCodeAt(i);\n      this.position++;\n    }\n    prepareWrite(this, 2);\n    this.view.setUint8(this.position, 0x01);\n    this.position++;\n    this.view.setUint8(this.position, val ? 0x01 : 0x00);\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // ():ByteArray\n  this.finalize = function() {\n    var\n      dtsDelta, // :int\n      len; // :int\n\n    switch (this.bytes[0]) {\n      // Video Data\n    case FlvTag.VIDEO_TAG:\n       // We only support AVC, 1 = key frame (for AVC, a seekable\n       // frame), 2 = inter frame (for AVC, a non-seekable frame)\n      this.bytes[11] = ((this.keyFrame || extraData) ? 0x10 : 0x20) | 0x07;\n      this.bytes[12] = extraData ?  0x00 : 0x01;\n\n      dtsDelta = this.pts - this.dts;\n      this.bytes[13] = (dtsDelta & 0x00FF0000) >>> 16;\n      this.bytes[14] = (dtsDelta & 0x0000FF00) >>>  8;\n      this.bytes[15] = (dtsDelta & 0x000000FF) >>>  0;\n      break;\n\n    case FlvTag.AUDIO_TAG:\n      this.bytes[11] = 0xAF; // 44 kHz, 16-bit stereo\n      this.bytes[12] = extraData ? 0x00 : 0x01;\n      break;\n\n    case FlvTag.METADATA_TAG:\n      this.position = 11;\n      this.view.setUint8(this.position, 0x02); // String type\n      this.position++;\n      this.view.setUint16(this.position, 0x0A); // 10 Bytes\n      this.position += 2;\n      // set \"onMetaData\"\n      this.bytes.set([0x6f, 0x6e, 0x4d, 0x65,\n                      0x74, 0x61, 0x44, 0x61,\n                      0x74, 0x61], this.position);\n      this.position += 10;\n      this.bytes[this.position] = 0x08; // Array type\n      this.position++;\n      this.view.setUint32(this.position, adHoc);\n      this.position = this.length;\n      this.bytes.set([0, 0, 9], this.position);\n      this.position += 3; // End Data Tag\n      this.length = this.position;\n      break;\n    }\n\n    len = this.length - 11;\n\n    // write the DataSize field\n    this.bytes[ 1] = (len & 0x00FF0000) >>> 16;\n    this.bytes[ 2] = (len & 0x0000FF00) >>>  8;\n    this.bytes[ 3] = (len & 0x000000FF) >>>  0;\n    // write the Timestamp\n    this.bytes[ 4] = (this.dts & 0x00FF0000) >>> 16;\n    this.bytes[ 5] = (this.dts & 0x0000FF00) >>>  8;\n    this.bytes[ 6] = (this.dts & 0x000000FF) >>>  0;\n    this.bytes[ 7] = (this.dts & 0xFF000000) >>> 24;\n    // write the StreamID\n    this.bytes[ 8] = 0;\n    this.bytes[ 9] = 0;\n    this.bytes[10] = 0;\n\n    // Sometimes we're at the end of the view and have one slot to write a\n    // uint32, so, prepareWrite of count 4, since, view is uint8\n    prepareWrite(this, 4);\n    this.view.setUint32(this.length, this.length);\n    this.length += 4;\n    this.position += 4;\n\n    // trim down the byte buffer to what is actually being used\n    this.bytes = this.bytes.subarray(0, this.length);\n    this.frameTime = FlvTag.frameTime(this.bytes);\n    // if bytes.bytelength isn't equal to this.length, handle error\n    return this;\n  };\n};\n\nFlvTag.AUDIO_TAG = 0x08; // == 8, :uint\nFlvTag.VIDEO_TAG = 0x09; // == 9, :uint\nFlvTag.METADATA_TAG = 0x12; // == 18, :uint\n\n// (tag:ByteArray):Boolean {\nFlvTag.isAudioFrame = function(tag) {\n  return FlvTag.AUDIO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isVideoFrame = function(tag) {\n  return FlvTag.VIDEO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isMetaData = function(tag) {\n  return FlvTag.METADATA_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isKeyFrame = function(tag) {\n  if (FlvTag.isVideoFrame(tag)) {\n    return tag[11] === 0x17;\n  }\n\n  if (FlvTag.isAudioFrame(tag)) {\n    return true;\n  }\n\n  if (FlvTag.isMetaData(tag)) {\n    return true;\n  }\n\n  return false;\n};\n\n// (tag:ByteArray):uint {\nFlvTag.frameTime = function(tag) {\n  var pts = tag[ 4] << 16; // :uint\n  pts |= tag[ 5] <<  8;\n  pts |= tag[ 6] <<  0;\n  pts |= tag[ 7] << 24;\n  return pts;\n};\n\nmodule.exports = FlvTag;\n\n},{}],45:[function(require,module,exports){\nmodule.exports = {\n  tag: require('./flv-tag'),\n  Transmuxer: require('./transmuxer'),\n  getFlvHeader: require('./flv-header')\n};\n\n},{\"./flv-header\":43,\"./flv-tag\":44,\"./transmuxer\":47}],46:[function(require,module,exports){\n'use strict';\n\nvar TagList = function() {\n  var self = this;\n\n  this.list = [];\n\n  this.push = function(tag) {\n    this.list.push({\n      bytes: tag.bytes,\n      dts: tag.dts,\n      pts: tag.pts,\n      keyFrame: tag.keyFrame,\n      metaDataTag: tag.metaDataTag\n    });\n  };\n\n  Object.defineProperty(this, 'length', {\n    get: function() {\n      return self.list.length;\n    }\n  });\n};\n\nmodule.exports = TagList;\n\n},{}],47:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar FlvTag = require('./flv-tag.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar CoalesceStream = require('./coalesce-stream.js');\nvar TagList = require('./tag-list.js');\n\nvar\n  Transmuxer,\n  VideoSegmentStream,\n  AudioSegmentStream,\n  collectTimelineInfo,\n  metaDataTag,\n  extraDataTag;\n\n/**\n * Store information about the start and end of the tracka and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectTimelineInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    } else {\n      track.timelineStartInfo.pts =\n        Math.min(track.timelineStartInfo.pts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    } else {\n      track.timelineStartInfo.dts =\n        Math.min(track.timelineStartInfo.dts, data.dts);\n    }\n  }\n};\n\nmetaDataTag = function(track, pts) {\n  var\n    tag = new FlvTag(FlvTag.METADATA_TAG); // :FlvTag\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeMetaDataDouble('videocodecid', 7);\n  tag.writeMetaDataDouble('width', track.width);\n  tag.writeMetaDataDouble('height', track.height);\n\n  return tag;\n};\n\nextraDataTag = function(track, pts) {\n  var\n    i,\n    tag = new FlvTag(FlvTag.VIDEO_TAG, true);\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeByte(0x01);// version\n  tag.writeByte(track.profileIdc);// profile\n  tag.writeByte(track.profileCompatibility);// compatibility\n  tag.writeByte(track.levelIdc);// level\n  tag.writeByte(0xFC | 0x03); // reserved (6 bits), NULA length size - 1 (2 bits)\n  tag.writeByte(0xE0 | 0x01); // reserved (3 bits), num of SPS (5 bits)\n  tag.writeShort(track.sps[0].length); // data of SPS\n  tag.writeBytes(track.sps[0]); // SPS\n\n  tag.writeByte(track.pps.length); // num of PPS (will there ever be more that 1 PPS?)\n  for (i = 0; i < track.pps.length; ++i) {\n    tag.writeShort(track.pps[i].length); // 2 bytes for length of PPS\n    tag.writeBytes(track.pps[i]); // data of PPS\n  }\n\n  return tag;\n};\n\n/**\n * Constructs a single-track, media segment from AAC data\n * events. The output of this stream can be fed to flash.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    oldExtraData;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    if (track && track.channelcount === undefined) {\n      track.audioobjecttype = data.audioobjecttype;\n      track.channelcount = data.channelcount;\n      track.samplerate = data.samplerate;\n      track.samplingfrequencyindex = data.samplingfrequencyindex;\n      track.samplesize = data.samplesize;\n      track.extraData = (track.audioobjecttype << 11) |\n                        (track.samplingfrequencyindex << 7) |\n                        (track.channelcount << 3);\n    }\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.flush = function() {\n    var currentFrame, adtsFrame, lastMetaPts, tags = new TagList();\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    lastMetaPts = -Infinity;\n\n    while (adtsFrames.length) {\n      currentFrame = adtsFrames.shift();\n\n      // write out metadata tags every 1 second so that the decoder\n      // is re-initialized quickly after seeking into a different\n      // audio configuration\n      if (track.extraData !== oldExtraData || currentFrame.pts - lastMetaPts >= 1000) {\n       adtsFrame = new FlvTag(FlvTag.METADATA_TAG);\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        // AAC is always 10\n        adtsFrame.writeMetaDataDouble('audiocodecid', 10);\n        adtsFrame.writeMetaDataBoolean('stereo', track.channelcount === 2);\n        adtsFrame.writeMetaDataDouble('audiosamplerate', track.samplerate);\n        // Is AAC always 16 bit?\n        adtsFrame.writeMetaDataDouble('audiosamplesize', 16);\n\n        tags.push(adtsFrame.finalize());\n\n        oldExtraData = track.extraData;\n\n        adtsFrame = new FlvTag(FlvTag.AUDIO_TAG, true);\n        // For audio, DTS is always the same as PTS. We want to set the DTS\n        // however so we can compare with video DTS to determine approximate\n        // packet order\n        adtsFrame.pts = currentFrame.pts;\n        adtsFrame.dts = currentFrame.dts;\n\n        adtsFrame.view.setUint16(adtsFrame.position, track.extraData);\n        adtsFrame.position += 2;\n        adtsFrame.length = Math.max(adtsFrame.length, adtsFrame.position);\n\n        tags.push(adtsFrame.finalize());\n\n        lastMetaPts = currentFrame.pts;\n      }\n      adtsFrame = new FlvTag(FlvTag.AUDIO_TAG);\n      adtsFrame.pts = currentFrame.pts;\n      adtsFrame.dts = currentFrame.dts;\n\n      adtsFrame.writeBytes(currentFrame.data);\n\n      tags.push(adtsFrame.finalize());\n    }\n\n    oldExtraData = null;\n    this.trigger('data', {track: track, tags: tags.list});\n\n    this.trigger('done', 'AudioSegmentStream');\n  };\n};\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Store FlvTags for the h264 stream\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    nalUnits = [],\n    config,\n    h264Frame;\n  VideoSegmentStream.prototype.init.call(this);\n\n  this.finishFrame = function(tags, frame) {\n    if (!frame) {\n      return;\n    }\n    // Check if keyframe and the length of tags.\n    // This makes sure we write metadata on the first frame of a segment.\n    if (config && track && track.newMetadata &&\n        (frame.keyFrame || tags.length === 0)) {\n      // Push extra data on every IDR frame in case we did a stream change + seek\n      var metaTag = metaDataTag(config, frame.dts).finalize();\n      var extraTag = extraDataTag(track, frame.dts).finalize();\n\n      metaTag.metaDataTag = extraTag.metaDataTag = true;\n\n      tags.push(metaTag);\n      tags.push(extraTag);\n      track.newMetadata = false;\n    }\n\n    frame.endNalUnit();\n    tags.push(frame.finalize());\n    h264Frame = null;\n  };\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer video until flush() is called\n    nalUnits.push(data);\n  };\n\n  this.flush = function() {\n    var\n      currentNal,\n      tags = new TagList();\n\n    // Throw away nalUnits at the start of the byte stream until we find\n    // the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    while (nalUnits.length) {\n      currentNal = nalUnits.shift();\n\n      // record the track config\n      if (currentNal.nalUnitType === 'seq_parameter_set_rbsp') {\n        track.newMetadata = true;\n        config = currentNal.config;\n        track.width = config.width;\n        track.height = config.height;\n        track.sps = [currentNal.data];\n        track.profileIdc = config.profileIdc;\n        track.levelIdc = config.levelIdc;\n        track.profileCompatibility = config.profileCompatibility;\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'pic_parameter_set_rbsp') {\n        track.newMetadata = true;\n        track.pps = [currentNal.data];\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        if (h264Frame) {\n          this.finishFrame(tags, h264Frame);\n        }\n        h264Frame = new FlvTag(FlvTag.VIDEO_TAG);\n        h264Frame.pts = currentNal.pts;\n        h264Frame.dts = currentNal.dts;\n      } else {\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          // the current sample is a key frame\n          h264Frame.keyFrame = true;\n        }\n        h264Frame.endNalUnit();\n      }\n      h264Frame.startNalUnit();\n      h264Frame.writeBytes(currentNal.data);\n    }\n    if (h264Frame) {\n      this.finishFrame(tags, h264Frame);\n    }\n\n    this.trigger('data', {track: track, tags: tags.list});\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * An object that incrementally transmuxes MPEG2 Trasport Stream\n * chunks into an FLV.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n\n    packetStream, parseStream, elementaryStream,\n    videoTimestampRolloverStream, audioTimestampRolloverStream,\n    timedMetadataTimestampRolloverStream,\n    adtsStream, h264Stream,\n    videoSegmentStream, audioSegmentStream, captionStream,\n    coalesceStream;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n\n  // expose the metadata stream\n  this.metadataStream = new m2ts.MetadataStream();\n\n  options.metadataStream = this.metadataStream;\n\n  // set up the parsing pipeline\n  packetStream = new m2ts.TransportPacketStream();\n  parseStream = new m2ts.TransportParseStream();\n  elementaryStream = new m2ts.ElementaryStream();\n  videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n  audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n  timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n\n  adtsStream = new AdtsStream();\n  h264Stream = new H264Stream();\n  coalesceStream = new CoalesceStream(options);\n\n  // disassemble MPEG2-TS packets into elementary streams\n  packetStream\n    .pipe(parseStream)\n    .pipe(elementaryStream);\n\n  // !!THIS ORDER IS IMPORTANT!!\n  // demux the streams\n  elementaryStream\n    .pipe(videoTimestampRolloverStream)\n    .pipe(h264Stream);\n  elementaryStream\n    .pipe(audioTimestampRolloverStream)\n    .pipe(adtsStream);\n\n  elementaryStream\n    .pipe(timedMetadataTimestampRolloverStream)\n    .pipe(this.metadataStream)\n    .pipe(coalesceStream);\n  // if CEA-708 parsing is available, hook up a caption stream\n  captionStream = new m2ts.CaptionStream();\n  h264Stream.pipe(captionStream)\n    .pipe(coalesceStream);\n\n  // hook up the segment streams once track metadata is delivered\n  elementaryStream.on('data', function(data) {\n    var i, videoTrack, audioTrack;\n\n    if (data.type === 'metadata') {\n      i = data.tracks.length;\n\n      // scan the tracks listed in the metadata\n      while (i--) {\n        if (data.tracks[i].type === 'video') {\n          videoTrack = data.tracks[i];\n        } else if (data.tracks[i].type === 'audio') {\n          audioTrack = data.tracks[i];\n        }\n      }\n\n      // hook up the video segment stream to the first track with h264 data\n      if (videoTrack && !videoSegmentStream) {\n        coalesceStream.numberOfTracks++;\n        videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n        // Set up the final part of the video pipeline\n        h264Stream\n          .pipe(videoSegmentStream)\n          .pipe(coalesceStream);\n      }\n\n      if (audioTrack && !audioSegmentStream) {\n        // hook up the audio segment stream to the first track with aac data\n        coalesceStream.numberOfTracks++;\n        audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n        // Set up the final part of the audio pipeline\n        adtsStream\n          .pipe(audioSegmentStream)\n          .pipe(coalesceStream);\n      }\n    }\n  });\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    packetStream.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n    // Start at the top of the pipeline and flush all pending work\n    packetStream.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    captionStream.reset();\n  };\n\n  // Re-emit any data coming from the coalesce stream to the outside world\n  coalesceStream.on('data', function(event) {\n    self.trigger('data', event);\n  });\n\n  // Let the consumer know we have finished flushing the entire pipeline\n  coalesceStream.on('done', function() {\n    self.trigger('done');\n  });\n};\nTransmuxer.prototype = new Stream();\n\n// forward compatibility\nmodule.exports = Transmuxer;\n\n},{\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../m2ts/m2ts.js\":49,\"../utils/stream.js\":61,\"./coalesce-stream.js\":42,\"./flv-tag.js\":44,\"./tag-list.js\":46}],48:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128,\n    Stream = require('../utils/stream');\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar packetDropper = {\n  push: function() {}\n};\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across 2 packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the second\n  // dts packet we receive that has dts === this.latestDts_. And thus, the\n  // ignoreNextEqualDts_ flag was born.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    // We've received the last duplicate packet, time to start processing again\n    this.ignoreNextEqualDts_ = false;\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  this.captionPackets_ = this.captionPackets_.concat(parseCaptionPackets(event.pts, userData));\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.activeCea608Channel_ = null;\n  // Since we don't know which channel is active until we get a control\n  // code that sets it, we start off with CEA608 handlers that just drop\n  // all the packets.\n  this.activeCea608Streams_ = [\n    packetDropper,\n    packetDropper\n  ];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  if (this.setsChannel1Active(packet) && this.activeCea608Channel_ !== 1) {\n    this.activeCea608Channel_ = 1;\n    this.activeCea608Streams_ = [this.ccStreams_[0], this.ccStreams_[2]]; // CC1, CC3\n  } else if (this.setsChannel2Active(packet) && this.activeCea608Channel_ !== 2) {\n    this.activeCea608Channel_ = 2;\n    this.activeCea608Streams_ = [this.ccStreams_[1], this.ccStreams_[3]]; // CC2, CC4\n  }\n  // If we haven't set the active streams yet, this next call just returns\n  // immediately.\n  this.activeCea608Streams_[packet.type].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 1;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 2;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 3;\n      this.mode_ = 'rollUp';\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[BOTTOM_ROW] = this.nonDisplayed_[BOTTOM_ROW].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      this.mode_ = 'paintOn';\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode (not supported)\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[BOTTOM_ROW];\n\n  baseRow += text;\n  this.displayed_[BOTTOM_ROW] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < BOTTOM_ROW; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[BOTTOM_ROW] = '';\n};\n\n// paintOn mode is not implemented\nCea608Stream.prototype.paintOn = function() {};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n\n},{\"../utils/stream\":61}],49:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {};\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      // add an entry that maps the elementary_pid to the stream_type\n      self.programMapTable[(payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]] = payload[offset];\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n\n    // if there are any packets waiting for a PMT to be found, process them now\n    while (self.packetsWaitingForPmt.length) {\n      self.processPes_.apply(self, self.packetsWaitingForPmt.shift());\n    }\n  };\n\n  /**\n   * Deliver a new MP2T packet to the stream.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    result.streamType = this.programMapTable[result.pid];\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that they match before we do a flush\n      packetFlushable = type === 'video' || event.packetLength === stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable,\n          k,\n          track;\n\n        // translate streams to tracks\n        for (k in programMapTable) {\n          if (programMapTable.hasOwnProperty(k)) {\n            track = {\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              }\n            };\n            track.id = +k;\n            if (programMapTable[k] === m2tsStreamTypes.H264_STREAM_TYPE) {\n              track.codec = 'avc';\n              track.type = 'video';\n            } else if (programMapTable[k] === m2tsStreamTypes.ADTS_STREAM_TYPE) {\n              track.codec = 'adts';\n              track.type = 'audio';\n            }\n            event.tracks.push(track);\n          }\n        }\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n\n},{\"../utils/stream.js\":61,\"./caption-stream\":48,\"./metadata-stream\":50,\"./stream-types\":52,\"./stream-types.js\":52,\"./timestamp-rollover-stream\":53}],50:[function(require,module,exports){\n/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n\n},{\"../utils/stream\":61,\"./stream-types\":52}],51:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n\n},{\"./stream-types.js\":52}],52:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n\n},{}],53:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n\n},{\"../utils/stream\":61}],54:[function(require,module,exports){\nmodule.exports = {\n  generator: require('./mp4-generator'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream\n};\n\n},{\"./mp4-generator\":55,\"./transmuxer\":57}],55:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n\n},{}],56:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar findBox, parseType, timescale, startTime;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = data[i]     << 24;\n    size |= data[i + 1] << 16;\n    size |= data[i + 2] << 8;\n    size |= data[i + 3];\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = tkhd[index]     << 24 |\n         tkhd[index + 1] << 16 |\n         tkhd[index + 2] <<  8 |\n         tkhd[index + 3];\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = mdhd[index]     << 24 |\n                 mdhd[index + 1] << 16 |\n                 mdhd[index + 2] <<  8 |\n                 mdhd[index + 3];\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = tfhd[4] << 24 |\n           tfhd[5] << 16 |\n           tfhd[6] << 8 |\n           tfhd[7];\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = tfdt[4] << 24 |\n                 tfdt[5] << 16 |\n                 tfdt[6] <<  8 |\n                 tfdt[7];\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += tfdt[8]  << 24 |\n                    tfdt[9]  << 16 |\n                    tfdt[10] <<  8 |\n                    tfdt[11];\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\nmodule.exports = {\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime\n};\n\n},{}],57:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  createDefaultSample,\n  isLikelyAacData,\n  collectDtsInfo,\n  clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime,\n  arrayEquals,\n  sumFrameByteLengths;\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\ncreateDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0\n    }\n  };\n};\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    config,\n    pps;\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  this.push = function(nalUnit) {\n    collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = this.groupNalsIntoFrames_(nalUnits);\n    gops = this.groupFramesIntoGops_(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyrame-pulling\n        gops = this.extendFirstKeyFrame_(gops);\n      }\n    }\n    collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = this.generateSampleTable_(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(this.concatenateNalData_(gops));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  this.extendFirstKeyFrame_ = function(gops) {\n    var currentGop;\n\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n\n      gops.byteLength -=  currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount;\n\n      // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n\n    return gops;\n  };\n\n  // Convert an array of nal units into an array of frames with each frame being\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n  this.groupNalsIntoFrames_ = function(nalUnits) {\n    var\n      i,\n      currentNal,\n      currentFrame = [],\n      frames = [];\n\n    currentFrame.byteLength = 0;\n\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i];\n\n      // Split on 'aud'-type nal units\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          frames.push(currentFrame);\n        }\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    }\n\n    // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n    if (frames.length &&\n        (!currentFrame.duration ||\n         currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    }\n\n    // Push the final frame\n    frames.push(currentFrame);\n    return frames;\n  };\n\n  // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n  this.groupFramesIntoGops_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      currentGop = [],\n      gops = [];\n\n    // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts;\n\n    // store some metadata about all the Gops\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration;\n\n    // push the final Gop\n    gops.push(currentGop);\n    return gops;\n  };\n\n  // generate the track's sample table from an array of gops\n  this.generateSampleTable_ = function(gops, baseDataOffset) {\n    var\n      h, i,\n      sample,\n      currentGop,\n      currentFrame,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        sample = createDefaultSample();\n\n        sample.dataOffset = dataOffset;\n        sample.compositionTimeOffset = currentFrame.pts - currentFrame.dts;\n        sample.duration = currentFrame.duration;\n        sample.size = 4 * currentFrame.length; // Space for nal unit size\n        sample.size += currentFrame.byteLength;\n\n        if (currentFrame.keyFrame) {\n          sample.flags.dependsOn = 2;\n        }\n\n        dataOffset += sample.size;\n\n        samples.push(sample);\n      }\n    }\n    return samples;\n  };\n\n  // generate the track's raw mdat data from an array of gops\n  this.concatenateNalData_ = function(gops) {\n    var\n      h, i, j,\n      currentGop,\n      currentFrame,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = gops.byteLength,\n      numberOfNals = gops.nalCount,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer);\n\n    // For each Gop..\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      // For each Frame..\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        // For each NAL..\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n    return data;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nclearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n */\ncalculateTrackBaseMediaDecodeTime = function(track) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    // Calculate the distance, in time, that this segment starts from the start\n    // of the timeline (earliest time seen since the transmuxer initialized)\n    timeSinceStartOfTimeline = track.minSegmentDts - track.timelineStartInfo.dts;\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += timeSinceStartOfTimeline;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n\n},{\"../aac\":37,\"../codecs/adts.js\":39,\"../codecs/h264\":40,\"../data/silence\":41,\"../m2ts/m2ts.js\":49,\"../utils/clock\":59,\"../utils/stream.js\":61,\"./mp4-generator.js\":55}],58:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n\n},{\"../aac/probe.js\":38,\"../m2ts/probe.js\":51,\"../m2ts/stream-types.js\":52,\"../m2ts/timestamp-rollover-stream.js\":53}],59:[function(require,module,exports){\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n\n},{}],60:[function(require,module,exports){\n'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n\n},{}],61:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n\n},{}],62:[function(require,module,exports){\n/* jshint ignore:start */\r\n(function(root) { \r\n/* jshint ignore:end */\r\n  var URLToolkit = {\r\n    // build an absolute URL from a relative one using the provided baseURL\r\n    // if relativeURL is an absolute URL it will be returned as is.\r\n    buildAbsoluteURL: function(baseURL, relativeURL) {\r\n      // remove any remaining space and CRLF\r\n      relativeURL = relativeURL.trim();\r\n      if (/^[a-z]+:/i.test(relativeURL)) {\r\n        // complete url, not relative\r\n        return relativeURL;\r\n      }\r\n\r\n      var relativeURLQuery = null;\r\n      var relativeURLHash = null;\r\n\r\n      var relativeURLHashSplit = /^([^#]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLHashSplit) {\r\n        relativeURLHash = relativeURLHashSplit[2];\r\n        relativeURL = relativeURLHashSplit[1];\r\n      }\r\n      var relativeURLQuerySplit = /^([^\\?]*)(.*)$/.exec(relativeURL);\r\n      if (relativeURLQuerySplit) {\r\n        relativeURLQuery = relativeURLQuerySplit[2];\r\n        relativeURL = relativeURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLHashSplit = /^([^#]*)(.*)$/.exec(baseURL);\r\n      if (baseURLHashSplit) {\r\n        baseURL = baseURLHashSplit[1];\r\n      }\r\n      var baseURLQuerySplit = /^([^\\?]*)(.*)$/.exec(baseURL);\r\n      if (baseURLQuerySplit) {\r\n        baseURL = baseURLQuerySplit[1];\r\n      }\r\n\r\n      var baseURLDomainSplit = /^(([a-z]+:)?\\/\\/[^:\\/]+(:[0-9]+)?)?(\\/?.*)$/i.exec(baseURL);\r\n      if (!baseURLDomainSplit) {\r\n        throw new Error('Error trying to parse base URL.');\r\n      }\r\n      \r\n      // e.g. 'http:', 'https:', ''\r\n      var baseURLProtocol = baseURLDomainSplit[2] || '';\r\n      // e.g. 'http://example.com', '//example.com', ''\r\n      var baseURLProtocolDomain = baseURLDomainSplit[1] || '';\r\n      // e.g. '/a/b/c/playlist.m3u8', 'a/b/c/playlist.m3u8'\r\n      var baseURLPath = baseURLDomainSplit[4];\r\n      if (baseURLPath.indexOf('/') !== 0 && baseURLProtocolDomain !== '') {\r\n        // this handles a base url of http://example.com (missing last slash)\r\n        baseURLPath = '/'+baseURLPath;\r\n      }\r\n\r\n      var builtURL = null;\r\n      if (/^\\/\\//.test(relativeURL)) {\r\n        // relative url starts wth '//' so copy protocol (which may be '' if baseUrl didn't provide one)\r\n        builtURL = baseURLProtocol+'//'+URLToolkit.buildAbsolutePath('', relativeURL.substring(2));\r\n      }\r\n      else if (/^\\//.test(relativeURL)) {\r\n        // relative url starts with '/' so start from root of domain\r\n        builtURL = baseURLProtocolDomain+'/'+URLToolkit.buildAbsolutePath('', relativeURL.substring(1));\r\n      }\r\n      else {\r\n        builtURL = URLToolkit.buildAbsolutePath(baseURLProtocolDomain+baseURLPath, relativeURL);\r\n      }\r\n\r\n      // put the query and hash parts back\r\n      if (relativeURLQuery) {\r\n        builtURL += relativeURLQuery;\r\n      }\r\n      if (relativeURLHash) {\r\n        builtURL += relativeURLHash;\r\n      }\r\n      return builtURL;\r\n    },\r\n\r\n    // build an absolute path using the provided basePath\r\n    // adapted from https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#Using_relative_URLs_in_the_path_parameter\r\n    // this does not handle the case where relativePath is \"/\" or \"//\". These cases should be handled outside this.\r\n    buildAbsolutePath: function(basePath, relativePath) {\r\n      var sRelPath = relativePath;\r\n      var nUpLn, sDir = '', sPath = basePath.replace(/[^\\/]*$/, sRelPath.replace(/(\\/|^)(?:\\.?\\/+)+/g, '$1'));\r\n      for (var nEnd, nStart = 0; nEnd = sPath.indexOf('/../', nStart), nEnd > -1; nStart = nEnd + nUpLn) {\r\n        nUpLn = /^\\/(?:\\.\\.\\/)*/.exec(sPath.slice(nEnd))[0].length;\r\n        sDir = (sDir + sPath.substring(nStart, nEnd)).replace(new RegExp('(?:\\\\\\/+[^\\\\\\/]*){0,' + ((nUpLn - 1) / 3) + '}$'), '/');\r\n      }\r\n      return sDir + sPath.substr(nStart);\r\n    }\r\n  };\r\n\r\n/* jshint ignore:start */\r\n  if(typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = URLToolkit;\r\n  else if(typeof define === 'function' && define.amd)\r\n    define([], function() { return URLToolkit; });\r\n  else if(typeof exports === 'object')\r\n    exports[\"URLToolkit\"] = URLToolkit;\r\n  else\r\n    root[\"URLToolkit\"] = URLToolkit;\r\n})(this);\r\n/* jshint ignore:end */\r\n\n},{}],63:[function(require,module,exports){\n(function (global){\n/**\n * @file add-text-track-data.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = undefined;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the flash or virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    (function () {\n      var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n      metadataArray.forEach(function (metadata) {\n        var time = metadata.cueTime + this.timestampOffset;\n\n        metadata.frames.forEach(function (frame) {\n          var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n          cue.frame = frame;\n          cue.value = frame;\n          deprecateOldCue(cue);\n\n          this.metadataTrack_.addCue(cue);\n        }, this);\n      }, sourceHandler);\n\n      // Updating the metadeta cues so that\n      // the endTime of each cue is the startTime of the next cue\n      // the endTime of last cue is the duration of the video\n      if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n        (function () {\n          var cues = sourceHandler.metadataTrack_.cues;\n          var cuesArray = [];\n\n          // Create a copy of the TextTrackCueList...\n          // ...disregarding cues with a falsey value\n          for (var i = 0; i < cues.length; i++) {\n            if (cues[i]) {\n              cuesArray.push(cues[i]);\n            }\n          }\n\n          // Group cues by their startTime value\n          var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n            var timeSlot = obj[cue.startTime] || [];\n\n            timeSlot.push(cue);\n            obj[cue.startTime] = timeSlot;\n\n            return obj;\n          }, {});\n\n          // Sort startTimes by ascending order\n          var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n            return Number(a) - Number(b);\n          });\n\n          // Map each cue group's endTime to the next group's startTime\n          sortedStartTimes.forEach(function (startTime, idx) {\n            var cueGroup = cuesGroupedByStartTime[startTime];\n            var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n            // Map each cue's endTime the next group's startTime\n            cueGroup.forEach(function (cue) {\n              cue.endTime = nextTime;\n            });\n          });\n        })();\n      }\n    })();\n  }\n};\n\nexports['default'] = {\n  addTextTrackData: addTextTrackData,\n  durationOfVideo: durationOfVideo\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":31}],64:[function(require,module,exports){\n/**\n * Remove the text track from the player if one with matching kind and\n * label properties already exists on the player\n *\n * @param {Object} player the video.js player object\n * @param {String} kind to be considered the text track's `kind` must match\n * @param {String} label to be considered the text track's `label` must match\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar removeExistingTrack = function removeExistingTrack(player, kind, label) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = 0; i < tracks.length; i++) {\n    var track = tracks[i];\n\n    if (track.kind === kind && track.label === label) {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n};\n\nexports.removeExistingTrack = removeExistingTrack;\n/**\n * Cleaup text tracks on video.js if they exist\n *\n * @param {Object} player the video.js player object\n * @private\n */\nvar cleanupTextTracks = function cleanupTextTracks(player) {\n  var tracks = player.remoteTextTracks() || [];\n\n  for (var i = tracks.length - 1; i >= 0; i--) {\n    var track = tracks[i];\n\n    if (track.kind === 'captions') {\n      player.removeRemoteTextTrack(track);\n    }\n  }\n\n  removeExistingTrack(player, 'metadata', 'Timed Metadata');\n};\nexports.cleanupTextTracks = cleanupTextTracks;\n},{}],65:[function(require,module,exports){\n/**\n * @file codec-utils.js\n */\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var _name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[_name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\nexports['default'] = {\n  isAudioCodec: isAudioCodec,\n  parseContentType: parseContentType,\n  isVideoCodec: isVideoCodec,\n  translateLegacyCodecs: translateLegacyCodecs\n};\nmodule.exports = exports['default'];\n},{}],66:[function(require,module,exports){\n/**\n * @file create-text-tracks-if-necessary.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML or Flash media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    (0, _cleanupTextTracks.removeExistingTrack)(player, 'metadata', 'Timed Metadata', true);\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\nexports['default'] = createTextTracksIfNecessary;\nmodule.exports = exports['default'];\n},{\"./cleanup-text-tracks\":64}],67:[function(require,module,exports){\n/**\n * @file flash-constants.js\n */\n/**\n * The maximum size in bytes for append operations to the video.js\n * SWF. Calling through to Flash blocks and can be expensive so\n * we chunk data and pass through 4KB at a time, yielding to the\n * browser between chunks. This gives a theoretical maximum rate of\n * 1MB/s into Flash. Any higher and we begin to drop frames and UI\n * responsiveness suffers.\n *\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar flashConstants = {\n  // times in milliseconds\n  TIME_BETWEEN_CHUNKS: 1,\n  BYTES_PER_CHUNK: 1024 * 32\n};\n\nexports[\"default\"] = flashConstants;\nmodule.exports = exports[\"default\"];\n},{}],68:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _flashSourceBuffer = require('./flash-source-buffer');\n\nvar _flashSourceBuffer2 = _interopRequireDefault(_flashSourceBuffer);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * A flash implmentation of HTML MediaSources and a polyfill\n * for browsers that don't support native or HTML MediaSources..\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class FlashMediaSource\n * @extends videojs.EventTarget\n */\n\nvar FlashMediaSource = (function (_videojs$EventTarget) {\n  _inherits(FlashMediaSource, _videojs$EventTarget);\n\n  function FlashMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, FlashMediaSource);\n\n    _get(Object.getPrototypeOf(FlashMediaSource.prototype), 'constructor', this).call(this);\n    this.sourceBuffers = [];\n    this.readyState = 'closed';\n\n    this.on(['sourceopen', 'webkitsourceopen'], function (event) {\n      // find the swf where we will push media data\n      _this.swfObj = _globalDocument2['default'].getElementById(event.swfId);\n      _this.player_ = (0, _videoJs2['default'])(_this.swfObj.parentNode);\n      _this.tech_ = _this.swfObj.tech;\n      _this.readyState = 'open';\n\n      _this.tech_.on('seeking', function () {\n        var i = _this.sourceBuffers.length;\n\n        while (i--) {\n          _this.sourceBuffers[i].abort();\n        }\n      });\n\n      if (_this.tech_.hls) {\n        _this.tech_.hls.on('dispose', function () {\n          (0, _cleanupTextTracks.cleanupTextTracks)(_this.player_);\n        });\n      }\n\n      // trigger load events\n      if (_this.swfObj) {\n        _this.swfObj.vjs_load();\n      }\n    });\n  }\n\n  /**\n    * Set or return the presentation duration.\n    *\n    * @param {Double} value the duration of the media in seconds\n    * @param {Double} the current presentation duration\n    * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n    */\n\n  /**\n   * We have this function so that the html and flash interfaces\n   * are the same.\n   *\n   * @private\n   */\n\n  _createClass(FlashMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_() {}\n    // intentional no-op\n\n    /**\n     * Create a new flash source buffer and add it to our flash media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the source\n     * @return {Object} the flash source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n      var sourceBuffer = undefined;\n\n      // if this is an FLV type, we'll push data to flash\n      if (parsedType.type === 'video/mp2t' || parsedType.type === 'audio/mp2t') {\n        // Flash source buffers\n        sourceBuffer = new _flashSourceBuffer2['default'](this);\n      } else {\n        throw new Error('NotSupportedError (Video.js)');\n      }\n\n      this.sourceBuffers.push(sourceBuffer);\n      return sourceBuffer;\n    }\n\n    /**\n     * Signals the end of the stream.\n     *\n     * @link https://w3c.github.io/media-source/#widl-MediaSource-endOfStream-void-EndOfStreamError-error\n     * @param {String=} error Signals that a playback error\n     * has occurred. If specified, it must be either \"network\" or\n     * \"decode\".\n     */\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream(error) {\n      if (error === 'network') {\n        // MEDIA_ERR_NETWORK\n        this.tech_.error(2);\n      } else if (error === 'decode') {\n        // MEDIA_ERR_DECODE\n        this.tech_.error(3);\n      }\n      if (this.readyState !== 'ended') {\n        this.readyState = 'ended';\n        this.swfObj.vjs_endOfStream();\n      }\n    }\n  }]);\n\n  return FlashMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashMediaSource;\ntry {\n  Object.defineProperty(FlashMediaSource.prototype, 'duration', {\n    /**\n     * Return the presentation duration.\n     *\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    get: function get() {\n      if (!this.swfObj) {\n        return NaN;\n      }\n      // get the current duration from the SWF\n      return this.swfObj.vjs_getProperty('duration');\n    },\n    /**\n     * Set the presentation duration.\n     *\n     * @param {Double} value the duration of the media in seconds\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    set: function set(value) {\n      var i = undefined;\n      var oldDuration = this.swfObj.vjs_getProperty('duration');\n\n      this.swfObj.vjs_setProperty('duration', value);\n\n      if (value < oldDuration) {\n        // In MSE, this triggers the range removal algorithm which causes\n        // an update to occur\n        for (i = 0; i < this.sourceBuffers.length; i++) {\n          this.sourceBuffers[i].remove(value, oldDuration);\n        }\n      }\n\n      return value;\n    }\n  });\n} catch (e) {\n  // IE8 throws if defineProperty is called on a non-DOM node. We\n  // don't support IE8 but we shouldn't throw an error if loaded\n  // there.\n  FlashMediaSource.prototype.duration = NaN;\n}\n\nfor (var property in _flashConstants2['default']) {\n  FlashMediaSource[property] = _flashConstants2['default'][property];\n}\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./flash-constants\":67,\"./flash-source-buffer\":69,\"global/document\":30}],69:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _flashTransmuxerWorker = require('./flash-transmuxer-worker');\n\nvar _flashTransmuxerWorker2 = _interopRequireDefault(_flashTransmuxerWorker);\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\n/**\n * A wrapper around the setTimeout function that uses\n * the flash constant time between ticks value.\n *\n * @param {Function} func the function callback to run\n * @private\n */\nvar scheduleTick = function scheduleTick(func) {\n  // Chrome doesn't invoke requestAnimationFrame callbacks\n  // in background tabs, so use setTimeout.\n  _globalWindow2['default'].setTimeout(func, _flashConstants2['default'].TIME_BETWEEN_CHUNKS);\n};\n\n/**\n * Generates a random string of max length 6\n *\n * @return {String} the randomly generated string\n * @function generateRandomString\n * @private\n */\nvar generateRandomString = function generateRandomString() {\n  return Math.random().toString(36).slice(2, 8);\n};\n\n/**\n * Round a number to a specified number of places much like\n * toFixed but return a number instead of a string representation.\n *\n * @param {Number} num A number\n * @param {Number} places The number of decimal places which to\n * round\n * @private\n */\nvar toDecimalPlaces = function toDecimalPlaces(num, places) {\n  if (typeof places !== 'number' || places < 0) {\n    places = 0;\n  }\n\n  var scale = Math.pow(10, places);\n\n  return Math.round(num * scale) / scale;\n};\n\n/**\n * A SourceBuffer implementation for Flash rather than HTML.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @param {Object} mediaSource the flash media source\n * @class FlashSourceBuffer\n * @extends videojs.EventTarget\n */\n\nvar FlashSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(FlashSourceBuffer, _videojs$EventTarget);\n\n  function FlashSourceBuffer(mediaSource) {\n    var _this = this;\n\n    _classCallCheck(this, FlashSourceBuffer);\n\n    _get(Object.getPrototypeOf(FlashSourceBuffer.prototype), 'constructor', this).call(this);\n    var encodedHeader = undefined;\n\n    // Start off using the globally defined value but refine\n    // as we append data into flash\n    this.chunkSize_ = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n    // byte arrays queued to be appended\n    this.buffer_ = [];\n\n    // the total number of queued bytes\n    this.bufferSize_ = 0;\n\n    // to be able to determine the correct position to seek to, we\n    // need to retain information about the mapping between the\n    // media timeline and PTS values\n    this.basePtsOffset_ = NaN;\n\n    this.mediaSource_ = mediaSource;\n\n    this.audioBufferEnd_ = NaN;\n    this.videoBufferEnd_ = NaN;\n\n    // indicates whether the asynchronous continuation of an operation\n    // is still being processed\n    // see https://w3c.github.io/media-source/#widl-SourceBuffer-updating\n    this.updating = false;\n    this.timestampOffset_ = 0;\n\n    encodedHeader = _globalWindow2['default'].btoa(String.fromCharCode.apply(null, Array.prototype.slice.call(_muxJsLibFlv2['default'].getFlvHeader())));\n\n    // create function names with added randomness for the global callbacks flash will use\n    // to get data from javascript into the swf. Random strings are added as a safety\n    // measure for pages with multiple players since these functions will be global\n    // instead of per instance. When making a call to the swf, the browser generates a\n    // try catch code snippet, but just takes the function name and writes out an unquoted\n    // call to that function. If the player id has any special characters, this will result\n    // in an error, so safePlayerId replaces all special characters to '_'\n    var safePlayerId = this.mediaSource_.player_.id().replace(/[^a-zA-Z0-9]/g, '_');\n\n    this.flashEncodedHeaderName_ = 'vjs_flashEncodedHeader_' + safePlayerId + generateRandomString();\n    this.flashEncodedDataName_ = 'vjs_flashEncodedData_' + safePlayerId + generateRandomString();\n\n    _globalWindow2['default'][this.flashEncodedHeaderName_] = function () {\n      delete _globalWindow2['default'][_this.flashEncodedHeaderName_];\n      return encodedHeader;\n    };\n\n    this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedHeaderName_);\n\n    this.transmuxer_ = (0, _webworkify2['default'])(_flashTransmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: {} });\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        _this.receiveBuffer_(event.data.segment);\n      }\n    };\n\n    this.one('updateend', function () {\n      _this.mediaSource_.tech_.trigger('loadedmetadata');\n    });\n\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          // We have to tell flash to expect a discontinuity\n          this.mediaSource_.swfObj.vjs_discontinuity();\n          // the media <-> PTS mapping must be re-established after\n          // the discontinuity\n          this.basePtsOffset_ = NaN;\n          this.audioBufferEnd_ = NaN;\n          this.videoBufferEnd_ = NaN;\n\n          this.transmuxer_.postMessage({ action: 'reset' });\n        }\n      }\n    });\n\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        if (!this.mediaSource_ || !this.mediaSource_.swfObj || !('vjs_getProperty' in this.mediaSource_.swfObj)) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        var buffered = this.mediaSource_.swfObj.vjs_getProperty('buffered');\n\n        if (buffered && buffered.length) {\n          buffered[0][0] = toDecimalPlaces(buffered[0][0], 3);\n          buffered[0][1] = toDecimalPlaces(buffered[0][1], 3);\n        }\n        return _videoJs2['default'].createTimeRanges(buffered);\n      }\n    });\n\n    // On a seek we remove all text track data since flash has no concept\n    // of a buffered-range and everything else is reset on seek\n    this.mediaSource_.player_.on('seeked', function () {\n      (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.metadataTrack_);\n      if (_this.inbandTextTracks_) {\n        for (var track in _this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.inbandTextTracks_[track]);\n        }\n      }\n    });\n\n    var onHlsReset = this.onHlsReset_.bind(this);\n\n    this.mediaSource_.player_.tech_.on('hls-reset', onHlsReset);\n\n    this.mediaSource_.player_.tech_.hls.on('dispose', function () {\n      _this.transmuxer_.terminate();\n      _this.mediaSource_.player_.tech_.off('hls-reset', onHlsReset);\n    });\n  }\n\n  /**\n   * Append bytes to the sourcebuffers buffer, in this case we\n   * have to append it to swf object.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n   * @param {Array} bytes\n   */\n\n  _createClass(FlashSourceBuffer, [{\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes) {\n      var error = undefined;\n\n      if (this.updating) {\n        error = new Error('SourceBuffer.append() cannot be called ' + 'while an update is in progress');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n      this.updating = true;\n      this.mediaSource_.readyState = 'open';\n      this.trigger({ type: 'update' });\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        data: bytes.buffer,\n        byteOffset: bytes.byteOffset,\n        byteLength: bytes.byteLength\n      }, [bytes.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Reset the parser and remove any data queued to be sent to the SWF.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      this.buffer_ = [];\n      this.bufferSize_ = 0;\n      this.mediaSource_.swfObj.vjs_abort();\n\n      // report any outstanding updates have ended\n      if (this.updating) {\n        this.updating = false;\n        this.trigger({ type: 'updateend' });\n      }\n    }\n\n    /**\n     * Flash cannot remove ranges already buffered in the NetStream\n     * but seeking clears the buffer entirely. For most purposes,\n     * having this operation act as a no-op is acceptable.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start start of the section to remove\n     * @param {Double} end end of the section to remove\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n      this.trigger({ type: 'update' });\n      this.trigger({ type: 'updateend' });\n    }\n\n    /**\n     * Receive a buffer from the flv.\n     *\n     * @param {Object} segment\n     * @private\n     */\n  }, {\n    key: 'receiveBuffer_',\n    value: function receiveBuffer_(segment) {\n      var _this2 = this;\n\n      // create an in-band caption track if one is present in the segment\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n      (0, _addTextTrackData.addTextTrackData)(this, segment.captions, segment.metadata);\n\n      // Do this asynchronously since convertTagsToData_ can be time consuming\n      scheduleTick(function () {\n        var flvBytes = _this2.convertTagsToData_(segment);\n\n        if (_this2.buffer_.length === 0) {\n          scheduleTick(_this2.processBuffer_.bind(_this2));\n        }\n\n        if (flvBytes) {\n          _this2.buffer_.push(flvBytes);\n          _this2.bufferSize_ += flvBytes.byteLength;\n        }\n      });\n    }\n\n    /**\n     * Append a portion of the current buffer to the SWF.\n     *\n     * @private\n     */\n  }, {\n    key: 'processBuffer_',\n    value: function processBuffer_() {\n      var _this3 = this;\n\n      var chunkSize = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n      if (!this.buffer_.length) {\n        if (this.updating !== false) {\n          this.updating = false;\n          this.trigger({ type: 'updateend' });\n        }\n        // do nothing if the buffer is empty\n        return;\n      }\n\n      // concatenate appends up to the max append size\n      var chunk = this.buffer_[0].subarray(0, chunkSize);\n\n      // requeue any bytes that won't make it this round\n      if (chunk.byteLength < chunkSize || this.buffer_[0].byteLength === chunkSize) {\n        this.buffer_.shift();\n      } else {\n        this.buffer_[0] = this.buffer_[0].subarray(chunkSize);\n      }\n\n      this.bufferSize_ -= chunk.byteLength;\n\n      // base64 encode the bytes\n      var binary = [];\n      var length = chunk.byteLength;\n\n      for (var i = 0; i < length; i++) {\n        binary.push(String.fromCharCode(chunk[i]));\n      }\n      var b64str = _globalWindow2['default'].btoa(binary.join(''));\n\n      _globalWindow2['default'][this.flashEncodedDataName_] = function () {\n        // schedule another processBuffer to process any left over data or to\n        // trigger updateend\n        scheduleTick(_this3.processBuffer_.bind(_this3));\n        delete _globalWindow2['default'][_this3.flashEncodedDataName_];\n        return b64str;\n      };\n\n      // Notify the swf that segment data is ready to be appended\n      this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedDataName_);\n    }\n\n    /**\n     * Turns an array of flv tags into a Uint8Array representing the\n     * flv data. Also removes any tags that are before the current\n     * time so that playback begins at or slightly after the right\n     * place on a seek\n     *\n     * @private\n     * @param {Object} segmentData object of segment data\n     */\n  }, {\n    key: 'convertTagsToData_',\n    value: function convertTagsToData_(segmentData) {\n      var segmentByteLength = 0;\n      var tech = this.mediaSource_.tech_;\n      var videoTargetPts = 0;\n      var segment = undefined;\n      var videoTags = segmentData.tags.videoTags;\n      var audioTags = segmentData.tags.audioTags;\n\n      // Establish the media timeline to PTS translation if we don't\n      // have one already\n      if (isNaN(this.basePtsOffset_) && (videoTags.length || audioTags.length)) {\n        // We know there is at least one video or audio tag, but since we may not have both,\n        // we use pts: Infinity for the missing tag. The will force the following Math.min\n        // call will to use the proper pts value since it will always be less than Infinity\n        var firstVideoTag = videoTags[0] || { pts: Infinity };\n        var firstAudioTag = audioTags[0] || { pts: Infinity };\n\n        this.basePtsOffset_ = Math.min(firstAudioTag.pts, firstVideoTag.pts);\n      }\n\n      if (tech.seeking()) {\n        // Do not use previously saved buffer end values while seeking since buffer\n        // is cleared on all seeks\n        this.videoBufferEnd_ = NaN;\n        this.audioBufferEnd_ = NaN;\n      }\n\n      if (isNaN(this.videoBufferEnd_)) {\n        if (tech.buffered().length) {\n          videoTargetPts = tech.buffered().end(0) - this.timestampOffset;\n        }\n\n        // Trim to currentTime if seeking\n        if (tech.seeking()) {\n          videoTargetPts = Math.max(videoTargetPts, tech.currentTime() - this.timestampOffset);\n        }\n\n        // PTS values are represented in milliseconds\n        videoTargetPts *= 1e3;\n        videoTargetPts += this.basePtsOffset_;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        videoTargetPts = this.videoBufferEnd_ + 0.1;\n      }\n\n      // filter complete GOPs with a presentation time less than the seek target/end of buffer\n      var currentIndex = videoTags.length;\n\n      // if the last tag is beyond videoTargetPts, then do not search the list for a GOP\n      // since our videoTargetPts lies in a future segment\n      if (currentIndex && videoTags[currentIndex - 1].pts >= videoTargetPts) {\n        // Start by walking backwards from the end of the list until we reach a tag that\n        // is equal to or less than videoTargetPts\n        while (--currentIndex) {\n          var currentTag = videoTags[currentIndex];\n\n          if (currentTag.pts > videoTargetPts) {\n            continue;\n          }\n\n          // if we see a keyFrame or metadata tag once we've gone below videoTargetPts,\n          // exit the loop as this is the start of the GOP that we want to append\n          if (currentTag.keyFrame || currentTag.metaDataTag) {\n            break;\n          }\n        }\n\n        // We need to check if there are any metadata tags that come before currentIndex\n        // as those will be metadata tags associated with the GOP we are appending\n        // There could be 0 to 2 metadata tags that come before the currentIndex depending\n        // on what videoTargetPts is and whether the transmuxer prepended metadata tags to this\n        // key frame\n        while (currentIndex) {\n          var nextTag = videoTags[currentIndex - 1];\n\n          if (!nextTag.metaDataTag) {\n            break;\n          }\n\n          currentIndex--;\n        }\n      }\n\n      var filteredVideoTags = videoTags.slice(currentIndex);\n\n      var audioTargetPts = undefined;\n\n      if (isNaN(this.audioBufferEnd_)) {\n        audioTargetPts = videoTargetPts;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        audioTargetPts = this.audioBufferEnd_ + 0.1;\n      }\n\n      if (filteredVideoTags.length) {\n        // If targetPts intersects a GOP and we appended the tags for the GOP that came\n        // before targetPts, we want to make sure to trim audio tags at the pts\n        // of the first video tag to avoid brief moments of silence\n        audioTargetPts = Math.min(audioTargetPts, filteredVideoTags[0].pts);\n      }\n\n      // skip tags with a presentation time less than the seek target/end of buffer\n      currentIndex = 0;\n\n      while (currentIndex < audioTags.length) {\n        if (audioTags[currentIndex].pts >= audioTargetPts) {\n          break;\n        }\n\n        currentIndex++;\n      }\n\n      var filteredAudioTags = audioTags.slice(currentIndex);\n\n      // update the audio and video buffer ends\n      if (filteredAudioTags.length) {\n        this.audioBufferEnd_ = filteredAudioTags[filteredAudioTags.length - 1].pts;\n      }\n      if (filteredVideoTags.length) {\n        this.videoBufferEnd_ = filteredVideoTags[filteredVideoTags.length - 1].pts;\n      }\n\n      var tags = this.getOrderedTags_(filteredVideoTags, filteredAudioTags);\n\n      if (tags.length === 0) {\n        return;\n      }\n\n      // If we are appending data that comes before our target pts, we want to tell\n      // the swf to adjust its notion of current time to account for the extra tags\n      // we are appending to complete the GOP that intersects with targetPts\n      if (tags[0].pts < videoTargetPts && tech.seeking()) {\n        var fudgeFactor = 1 / 30;\n        var currentTime = tech.currentTime();\n        var diff = (videoTargetPts - tags[0].pts) / 1e3;\n        var adjustedTime = currentTime - diff;\n\n        if (adjustedTime < fudgeFactor) {\n          adjustedTime = 0;\n        }\n\n        try {\n          this.mediaSource_.swfObj.vjs_adjustCurrentTime(adjustedTime);\n        } catch (e) {\n          // no-op for backwards compatability of swf. If adjustCurrentTime fails,\n          // the swf may incorrectly report currentTime and buffered ranges\n          // but should not affect playback over than the time displayed on the\n          // progress bar is inaccurate\n        }\n      }\n\n      // concatenate the bytes into a single segment\n      for (var i = 0; i < tags.length; i++) {\n        segmentByteLength += tags[i].bytes.byteLength;\n      }\n      segment = new Uint8Array(segmentByteLength);\n      for (var i = 0, j = 0; i < tags.length; i++) {\n        segment.set(tags[i].bytes, j);\n        j += tags[i].bytes.byteLength;\n      }\n\n      return segment;\n    }\n\n    /**\n     * Assemble the FLV tags in decoder order.\n     *\n     * @private\n     * @param {Array} videoTags list of video tags\n     * @param {Array} audioTags list of audio tags\n     */\n  }, {\n    key: 'getOrderedTags_',\n    value: function getOrderedTags_(videoTags, audioTags) {\n      var tag = undefined;\n      var tags = [];\n\n      while (videoTags.length || audioTags.length) {\n        if (!videoTags.length) {\n          // only audio tags remain\n          tag = audioTags.shift();\n        } else if (!audioTags.length) {\n          // only video tags remain\n          tag = videoTags.shift();\n        } else if (audioTags[0].dts < videoTags[0].dts) {\n          // audio should be decoded next\n          tag = audioTags.shift();\n        } else {\n          // video should be decoded next\n          tag = videoTags.shift();\n        }\n\n        tags.push(tag);\n      }\n\n      return tags;\n    }\n  }, {\n    key: 'onHlsReset_',\n    value: function onHlsReset_() {\n      this.transmuxer_.postMessage({ action: 'resetCaptions' });\n    }\n  }]);\n\n  return FlashSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./create-text-tracks-if-necessary\":66,\"./flash-constants\":67,\"./flash-transmuxer-worker\":70,\"./remove-cues-from-track\":72,\"global/window\":31,\"mux.js/lib/flv\":45,\"webworkify\":76}],70:[function(require,module,exports){\n/**\n * @file flash-transmuxer-worker.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment\n    });\n  });\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. The scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibFlv2['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit its\n     * results.\n     */\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar FlashTransmuxerWorker = function FlashTransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new FlashTransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/flv\":45}],71:[function(require,module,exports){\n(function (global){\n/**\n * @file html-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _virtualSourceBuffer = require('./virtual-source-buffer');\n\nvar _virtualSourceBuffer2 = _interopRequireDefault(_virtualSourceBuffer);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _codecUtils = require('./codec-utils');\n\nvar _cleanupTextTracks = require('./cleanup-text-tracks');\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = (function (_videojs$EventTarget) {\n  _inherits(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, HtmlMediaSource);\n\n    _get(Object.getPrototypeOf(HtmlMediaSource.prototype), 'constructor', this).call(this);\n    var property = undefined;\n\n    this.nativeMediaSource_ = new _globalWindow2['default'].MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof this.nativeMediaSource_[property] === 'function') {\n        this[property] = this.nativeMediaSource_[property].bind(this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    this.duration_ = NaN;\n    Object.defineProperty(this, 'duration', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(this, 'seekable', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return _videoJs2['default'].createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(this, 'readyState', {\n      get: function get() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(this, 'activeSourceBuffers', {\n      get: function get() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    this.sourceBuffers = [];\n\n    this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          sourceBuffer.audioDisabled_ = disableAudioOnly;\n          if (disableAudioOnly) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = _globalDocument2['default'].querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = (0, _videoJs2['default'])(video.parentNode);\n\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    this.on('sourceended', function (event) {\n      var duration = (0, _addTextTrackData.durationOfVideo)(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      (0, _cleanupTextTracks.cleanupTextTracks)(this.player_);\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n      }\n    });\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  _createClass(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = undefined;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = undefined;\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = (0, _codecUtils.translateLegacyCodecs)(codecs);\n          codecs = codecs.filter(function (codec) {\n            return (0, _codecUtils.isAudioCodec)(codec) || (0, _codecUtils.isVideoCodec)(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new _virtualSourceBuffer2['default'](this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n\n  return HtmlMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = HtmlMediaSource;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./cleanup-text-tracks\":64,\"./codec-utils\":65,\"./virtual-source-buffer\":75,\"global/document\":30,\"global/window\":31}],72:[function(require,module,exports){\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = undefined;\n  var cue = undefined;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\nexports[\"default\"] = removeCuesFromTrack;\nmodule.exports = exports[\"default\"];\n},{}],73:[function(require,module,exports){\n/**\n * @file transmuxer-worker.js\n */\n\n/**\n * videojs-contrib-media-sources\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Handles communication between the browser-world and the mux.js\n * transmuxer running inside of a WebWorker by exposing a simple\n * message-based interface to a Transmuxer object.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibMp4 = require('mux.js/lib/mp4');\n\nvar _muxJsLibMp42 = _interopRequireDefault(_muxJsLibMp4);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    // transfer ownership of the underlying ArrayBuffer\n    // instead of doing a copy to save memory\n    // ArrayBuffers are transferable but generic TypedArrays are not\n    // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n    var initArray = segment.initSegment;\n\n    segment.initSegment = {\n      data: initArray.buffer,\n      byteOffset: initArray.byteOffset,\n      byteLength: initArray.byteLength\n    };\n\n    var typedArray = segment.data;\n\n    segment.data = typedArray.buffer;\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment,\n      byteOffset: typedArray.byteOffset,\n      byteLength: typedArray.byteLength\n    }, [segment.data]);\n  });\n\n  if (transmuxer.captionStream) {\n    transmuxer.captionStream.on('data', function (caption) {\n      _globalWindow2['default'].postMessage({\n        action: 'caption',\n        data: caption\n      });\n    });\n  }\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibMp42['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n  }, {\n    key: 'setTimestampOffset',\n    value: function setTimestampOffset(data) {\n      var timestampOffset = data.timestampOffset || 0;\n\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n    }\n  }, {\n    key: 'setAudioAppendStart',\n    value: function setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n  }, {\n    key: 'flush',\n    value: function flush(data) {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar TransmuxerWorker = function TransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new TransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":31,\"mux.js/lib/mp4\":54}],74:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-media-sources.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _flashMediaSource = require('./flash-media-source');\n\nvar _flashMediaSource2 = _interopRequireDefault(_flashMediaSource);\n\nvar _htmlMediaSource = require('./html-media-source');\n\nvar _htmlMediaSource2 = _interopRequireDefault(_htmlMediaSource);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\nvar defaults = {\n  // how to determine the MediaSource implementation to use. There\n  // are three available modes:\n  // - auto: use native MediaSources where available and Flash\n  //   everywhere else\n  // - html5: always use native MediaSources\n  // - flash: always use the Flash MediaSource polyfill\n  mode: 'auto'\n};\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n_videoJs2['default'].mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = _videoJs2['default'].mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!_globalWindow2['default'].MediaSource && !!_globalWindow2['default'].MediaSource.isTypeSupported && _globalWindow2['default'].MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality such as flash and\n * video/mp2t videos. returns an instance of HtmlMediaSource or\n * FlashMediaSource depending on what is supported and what options\n * are passed in.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n * @param {Object} options options to use during setup.\n */\nvar MediaSource = function MediaSource(options) {\n  var settings = _videoJs2['default'].mergeOptions(defaults, options);\n\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  // determine whether HTML MediaSources should be used\n  if (settings.mode === 'html5' || settings.mode === 'auto' && supportsNativeMediaSources()) {\n    return new _htmlMediaSource2['default']();\n  } else if (_videoJs2['default'].getTech('Flash')) {\n    return new _flashMediaSource2['default']();\n  }\n\n  throw new Error('Cannot use Flash or Html5 to create a MediaSource for this video');\n};\n\nexports.MediaSource = MediaSource;\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = undefined;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof _htmlMediaSource2['default']) {\n      url = _globalWindow2['default'].URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof _flashMediaSource2['default'])) {\n      url = _globalWindow2['default'].URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    _videoJs2['default'].mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nexports.URL = URL;\n_videoJs2['default'].MediaSource = MediaSource;\n_videoJs2['default'].URL = URL;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./flash-media-source\":68,\"./html-media-source\":71,\"global/window\":31}],75:[function(require,module,exports){\n(function (global){\n/**\n * @file virtual-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _webworkify = require('webworkify');\n\nvar _webworkify2 = _interopRequireDefault(_webworkify);\n\nvar _transmuxerWorker = require('./transmuxer-worker');\n\nvar _transmuxerWorker2 = _interopRequireDefault(_transmuxerWorker);\n\nvar _codecUtils = require('./codec-utils');\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function (key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get() {\n          return sourceBuffer[key];\n        },\n        set: function set(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    var _this = this;\n\n    _classCallCheck(this, VirtualSourceBuffer);\n\n    _get(Object.getPrototypeOf(VirtualSourceBuffer.prototype), 'constructor', this).call(this, _videoJs2['default'].EventTarget);\n    this.timestampOffset_ = 0;\n    this.pendingBuffers_ = [];\n    this.bufferUpdating_ = false;\n\n    this.mediaSource_ = mediaSource;\n    this.codecs_ = codecs;\n    this.audioCodec_ = null;\n    this.videoCodec_ = null;\n    this.audioDisabled_ = false;\n    this.appendAudioInitSegment_ = true;\n\n    var options = {\n      remux: false\n    };\n\n    this.codecs_.forEach(function (codec) {\n      if ((0, _codecUtils.isAudioCodec)(codec)) {\n        _this.audioCodec_ = codec;\n      } else if ((0, _codecUtils.isVideoCodec)(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    this.transmuxer_ = (0, _webworkify2['default'])(_transmuxerWorker2['default']);\n    this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(this, 'appendWindowStart', {\n      get: function get() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(this, 'updating', {\n      get: function get() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        var start = null;\n        var end = null;\n        var arity = 0;\n        var extents = [];\n        var ranges = [];\n\n        // neither buffer has been created yet\n        if (!this.videoBuffer_ && !this.audioBuffer_) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // only one buffer is configured\n        if (!this.videoBuffer_) {\n          return this.audioBuffer_.buffered;\n        }\n        if (!this.audioBuffer_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are configured\n        if (this.audioDisabled_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are empty\n        if (this.videoBuffer_.buffered.length === 0 && this.audioBuffer_.buffered.length === 0) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // Handle the case where we have both buffers and create an\n        // intersection of the two\n        var videoBuffered = this.videoBuffer_.buffered;\n        var audioBuffered = this.audioBuffer_.buffered;\n        var count = videoBuffered.length;\n\n        // A) Gather up all start and end times\n        while (count--) {\n          extents.push({ time: videoBuffered.start(count), type: 'start' });\n          extents.push({ time: videoBuffered.end(count), type: 'end' });\n        }\n        count = audioBuffered.length;\n        while (count--) {\n          extents.push({ time: audioBuffered.start(count), type: 'start' });\n          extents.push({ time: audioBuffered.end(count), type: 'end' });\n        }\n        // B) Sort them by time\n        extents.sort(function (a, b) {\n          return a.time - b.time;\n        });\n\n        // C) Go along one by one incrementing arity for start and decrementing\n        //    arity for ends\n        for (count = 0; count < extents.length; count++) {\n          if (extents[count].type === 'start') {\n            arity++;\n\n            // D) If arity is ever incremented to 2 we are entering an\n            //    overlapping range\n            if (arity === 2) {\n              start = extents[count].time;\n            }\n          } else if (extents[count].type === 'end') {\n            arity--;\n\n            // E) If arity is ever decremented to 1 we leaving an\n            //    overlapping range\n            if (arity === 1) {\n              end = extents[count].time;\n            }\n          }\n\n          // F) Record overlapping ranges\n          if (start !== null && end !== null) {\n            ranges.push([start, end]);\n            start = null;\n            end = null;\n          }\n        }\n\n        return _videoJs2['default'].createTimeRanges(ranges);\n      }\n    });\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  _createClass(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        (0, _addTextTrackData.addTextTrackData)(this, sortedSegments.captions, sortedSegments.metadata);\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = undefined;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n\n  return VirtualSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = VirtualSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":63,\"./codec-utils\":65,\"./create-text-tracks-if-necessary\":66,\"./remove-cues-from-track\":72,\"./transmuxer-worker\":73,\"webworkify\":76}],76:[function(require,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn) {\n    var keys = [];\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n    \n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        if (cache[key].exports === fn) {\n            wkey = key;\n            break;\n        }\n    }\n    \n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            Function(['require','module','exports'], '(' + fn + ')(self)'),\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n    \n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        Function(['require'],'require(' + stringify(wkey) + ')(self)'),\n        scache\n    ];\n    \n    var src = '(' + bundleFn + ')({'\n        + Object.keys(sources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n    \n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n    \n    return new Worker(URL.createObjectURL(\n        new Blob([src], { type: 'text/javascript' })\n    ));\n};\n\n},{}],77:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-hls.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-contrib-hls/blob/master/LICENSE\n */\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _xhr = require('./xhr');\n\nvar _xhr2 = _interopRequireDefault(_xhr);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\nvar _binUtils2 = _interopRequireDefault(_binUtils);\n\nvar _videojsContribMediaSources = require('videojs-contrib-media-sources');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _masterPlaylistController = require('./master-playlist-controller');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _renditionMixin = require('./rendition-mixin');\n\nvar _renditionMixin2 = _interopRequireDefault(_renditionMixin);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _playbackWatcher = require('./playback-watcher');\n\nvar _playbackWatcher2 = _interopRequireDefault(_playbackWatcher);\n\nvar _reloadSourceOnError = require('./reload-source-on-error');\n\nvar _reloadSourceOnError2 = _interopRequireDefault(_reloadSourceOnError);\n\nvar _playlistSelectorsJs = require('./playlist-selectors.js');\n\nvar Hls = {\n  PlaylistLoader: _playlistLoader2['default'],\n  Playlist: _playlist2['default'],\n  Decrypter: _aesDecrypter.Decrypter,\n  AsyncStream: _aesDecrypter.AsyncStream,\n  decrypt: _aesDecrypter.decrypt,\n  utils: _binUtils2['default'],\n\n  STANDARD_PLAYLIST_SELECTOR: _playlistSelectorsJs.lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: _playlistSelectorsJs.lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: _playlistSelectorsJs.comparePlaylistBandwidth,\n  comparePlaylistResolution: _playlistSelectorsJs.comparePlaylistResolution,\n\n  xhr: (0, _xhr2['default'])()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls, prop, {\n    get: function get() {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return _config2['default'][prop];\n    },\n    set: function set(value) {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        _videoJs2['default'].log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      _config2['default'][prop] = value;\n    }\n  });\n});\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls.canPlaySource = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls.supportsNativeHls = (function () {\n  var video = _globalDocument2['default'].createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!_videoJs2['default'].getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n})();\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls.isSupported = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar USER_AGENT = _globalWindow2['default'].navigator && _globalWindow2['default'].navigator.userAgent || '';\n\n/**\n * Determines whether the browser supports a change in the audio configuration\n * during playback. Currently only Firefox 48 and below do not support this.\n * window.isSecureContext is a propterty that was added to window in firefox 49,\n * so we can use it to detect Firefox 49+.\n *\n * @return {Boolean} Whether the browser supports audio config change during playback\n */\nHls.supportsAudioInfoChange_ = function () {\n  if (_videoJs2['default'].browser.IS_FIREFOX) {\n    var firefoxVersionMap = /Firefox\\/([\\d.]+)/i.exec(USER_AGENT);\n    var version = parseInt(firefoxVersionMap[1], 10);\n\n    return version >= 49;\n  }\n  return true;\n};\n\nvar Component = _videoJs2['default'].getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = (function (_Component) {\n  _inherits(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    var _this = this;\n\n    _classCallCheck(this, HlsHandler);\n\n    _get(Object.getPrototypeOf(HlsHandler.prototype), 'constructor', this).call(this, tech, options.hls);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = (0, _videoJs2['default'])(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get() {\n            _videoJs2['default'].log.warn('player.hls is deprecated. Use player.tech_.hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n    }\n\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n\n    // overriding native HLS only works if audio tracks have been emulated\n    // error early if we're misconfigured:\n    if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    this.on(_globalDocument2['default'], ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = _globalDocument2['default'].fullscreenElement || _globalDocument2['default'].webkitFullscreenElement || _globalDocument2['default'].mozFullScreenElement || _globalDocument2['default'].msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.fastQualityChange_();\n      }\n    });\n\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    this.audioTrackChange_ = function () {\n      _this.masterPlaylistController_.setupAudio();\n      _this.tech_.trigger({ type: 'usage', name: 'hls-audio-change' });\n    };\n\n    this.textTrackChange_ = function () {\n      _this.masterPlaylistController_.setupSubtitles();\n    };\n\n    this.on(this.tech_, 'play', this.play);\n  }\n\n  /**\n   * The Source Handler object, which informs video.js what additional\n   * MIME types are supported and sets up playback. It is registered\n   * automatically to the appropriate tech based on the capabilities of\n   * the browser it is running in. It is not necessary to use or modify\n   * this object in normal usage.\n   */\n\n  _createClass(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n  }, {\n    key: 'src',\n    value: function src(_src) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls;\n\n      this.masterPlaylistController_ = new _masterPlaylistController.MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new _playbackWatcher2['default'](_videoJs2['default'].mergeOptions(this.options_, {\n        seekable: function seekable() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = _videoJs2['default'].players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = undefined;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set() {\n            _videoJs2['default'].log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('sourceopen', function () {\n        _this3.tech_.audioTracks().addEventListener('change', _this3.audioTrackChange_);\n        _this3.tech_.remoteTextTracks().addEventListener('change', _this3.textTrackChange_);\n      });\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        (0, _renditionMixin2['default'])(_this3);\n      });\n\n      this.masterPlaylistController_.on('audioupdate', function () {\n        // clear current audioTracks\n        _this3.tech_.clearTracks('audio');\n        _this3.masterPlaylistController_.activeAudioGroup().forEach(function (audioTrack) {\n          _this3.tech_.audioTracks().addTrack(audioTrack);\n        });\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      // In the live case, we need to ignore the very first `seeking` event since\n      // that will be the result of the seek-to-live behavior\n      this.on(this.masterPlaylistController_, 'firstplay', function () {\n        this.ignoreNextSeekingEvent_ = true;\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(_videoJs2['default'].URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = _videoJs2['default'].players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * a helper for grabbing the active audio group from MasterPlaylistController\n     *\n     * @private\n     */\n  }, {\n    key: 'activeAudioGroup_',\n    value: function activeAudioGroup_() {\n      return this.masterPlaylistController_.activeAudioGroup();\n    }\n\n    /**\n     * Begin playing the video.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n    * Abort all outstanding work and cleanup.\n    */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      this.tech_.audioTracks().removeEventListener('change', this.audioTrackChange_);\n      this.tech_.remoteTextTracks().removeEventListener('change', this.textTrackChange_);\n      _get(Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n\n  return HlsHandler;\n})(Component);\n\nvar HlsSourceHandler = function HlsSourceHandler(mode) {\n  return {\n    canHandleSource: function canHandleSource(srcObj) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      // this forces video.js to skip this tech/mode if its not the one we have been\n      // overriden to use, by returing that we cannot handle the source.\n      if (localOptions.hls && localOptions.hls.mode && localOptions.hls.mode !== mode) {\n        return false;\n      }\n      return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n    },\n    handleSource: function handleSource(source, tech) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options, { hls: { mode: mode } });\n\n      if (mode === 'flash') {\n        // We need to trigger this asynchronously to give others the chance\n        // to bind to the event when a source is set at player creation\n        tech.setTimeout(function () {\n          tech.trigger('loadstart');\n        }, 1);\n      }\n\n      tech.hls = new HlsHandler(source, tech, localOptions);\n      tech.hls.xhr = (0, _xhr2['default'])();\n\n      tech.hls.src(source.src);\n      return tech.hls;\n    },\n    canPlayType: function canPlayType(type) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      if (HlsSourceHandler.canPlayType(type, localOptions)) {\n        return 'maybe';\n      }\n      return '';\n    }\n  };\n};\n\nHlsSourceHandler.canPlayType = function (type, options) {\n  // No support for IE 10 or below\n  if (_videoJs2['default'].browser.IE_VERSION && _videoJs2['default'].browser.IE_VERSION <= 10) {\n    return false;\n  }\n\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  // favor native HLS support if it's available\n  if (!options.hls.overrideNative && Hls.supportsNativeHls) {\n    return false;\n  }\n  return mpegurlRE.test(type);\n};\n\nif (typeof _videoJs2['default'].MediaSource === 'undefined' || typeof _videoJs2['default'].URL === 'undefined') {\n  _videoJs2['default'].MediaSource = _videojsContribMediaSources.MediaSource;\n  _videoJs2['default'].URL = _videojsContribMediaSources.URL;\n}\n\nvar flashTech = _videoJs2['default'].getTech('Flash');\n\n// register source handlers with the appropriate techs\nif (_videojsContribMediaSources.MediaSource.supportsNativeMediaSources()) {\n  _videoJs2['default'].getTech('Html5').registerSourceHandler(HlsSourceHandler('html5'), 0);\n}\nif (_globalWindow2['default'].Uint8Array && flashTech) {\n  flashTech.registerSourceHandler(HlsSourceHandler('flash'));\n}\n\n_videoJs2['default'].HlsHandler = HlsHandler;\n_videoJs2['default'].HlsSourceHandler = HlsSourceHandler;\n_videoJs2['default'].Hls = Hls;\nif (!_videoJs2['default'].use) {\n  _videoJs2['default'].registerComponent('Hls', Hls);\n}\n_videoJs2['default'].m3u8 = _m3u8Parser2['default'];\n_videoJs2['default'].options.hls = _videoJs2['default'].options.hls || {};\n\nif (_videoJs2['default'].registerPlugin) {\n  _videoJs2['default'].registerPlugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n} else {\n  _videoJs2['default'].plugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n}\n\nmodule.exports = {\n  Hls: Hls,\n  HlsHandler: HlsHandler,\n  HlsSourceHandler: HlsSourceHandler\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./master-playlist-controller\":5,\"./playback-watcher\":7,\"./playlist\":10,\"./playlist-loader\":8,\"./playlist-selectors.js\":9,\"./reload-source-on-error\":12,\"./rendition-mixin\":13,\"./xhr\":20,\"aes-decrypter\":24,\"global/document\":30,\"global/window\":31,\"m3u8-parser\":32,\"videojs-contrib-media-sources\":74}]},{},[77])(77)\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/videojs-contrib-hls/dist/videojs-contrib-hls.js\n// module id = 175\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('mu-appbar', {\n    staticClass: \"fixed\",\n    attrs: {\n      \"title\": \"主播\"\n    }\n  }, [_c('mu-icon-button', {\n    attrs: {\n      \"icon\": \"arrow_back\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.goback()\n      }\n    },\n    slot: \"left\"\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"padding-top\": \"66px\"\n    }\n  }, [_c('mu-card', [_c('mu-card-media', [_c('div', {\n    staticClass: \"player\"\n  }, [_c('video-player', {\n    ref: \"videoPlayer\",\n    staticClass: \"vjs-custom-skin\",\n    attrs: {\n      \"options\": _vm.playerOptions,\n      \"playsinline\": true\n    }\n  })], 1)])], 1), _vm._v(\" \"), _c('mu-tabs', {\n    attrs: {\n      \"value\": _vm.currentTab\n    },\n    on: {\n      \"change\": _vm.handleTabChange\n    }\n  }, [_c('mu-tab', {\n    attrs: {\n      \"value\": \"tab1\",\n      \"title\": \"信息\"\n    }\n  }), _vm._v(\" \"), _c('mu-tab', {\n    attrs: {\n      \"value\": \"tab2\",\n      \"title\": \"图集\"\n    }\n  }), _vm._v(\" \"), _c('mu-tab', {\n    attrs: {\n      \"value\": \"tab3\",\n      \"title\": \"视频\"\n    }\n  })], 1), _vm._v(\" \"), (_vm.currentTab === 'tab1') ? _c('div', {\n    staticClass: \"desc-container\"\n  }) : _vm._e(), _vm._v(\" \"), (_vm.currentTab === 'tab2') ? _c('div') : _vm._e(), _vm._v(\" \"), (_vm.currentTab === 'tab3') ? _c('div', [_c('h2'), _vm._v(\" \"), _c('p')]) : _vm._e()], 1), _vm._v(\" \"), _c('mu-dialog', {\n    attrs: {\n      \"open\": _vm.dialog,\n      \"title\": \"广告\"\n    }\n  }, [_c('h3', [_vm._v(\"因用户网络环境的不同，以及当前用户数量，看片时有时候会出现缓冲加载时间较长，您可以直接点击播放减少缓冲时间，如果感觉不是很流畅，可以先尝试去看其他片子，稍后再试！\")]), _vm._v(\" \"), _c('mu-flat-button', {\n    attrs: {\n      \"label\": \"关闭\",\n      \"primary\": \"\"\n    },\n    on: {\n      \"click\": function () {\n        _vm.dialog = false\n      }\n    },\n    slot: \"actions\"\n  })], 1)], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-173eb0c8\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/LiveView.vue\n// module id = 178\n// module chunks = 0"],"sourceRoot":""}